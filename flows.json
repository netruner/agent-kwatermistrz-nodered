[
    {
        "id": "8a595db6babaf80e",
        "type": "tab",
        "label": "01 - Check:Umowy:New",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bf6e5312884e6967",
        "type": "tab",
        "label": "02 - Check:Umowy:email-confirmed",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5e0f1a41e75562f7",
        "type": "tab",
        "label": "03 - Email:New:Check",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "be1c3f3f839ca819",
        "type": "tab",
        "label": "04 - Email:Processing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ef65b964aaf43e6",
        "type": "tab",
        "label": "API:GET",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7f8edcc91438aff6",
        "type": "tab",
        "label": "API:POST:Rejestracja",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8971cc29f27d4741",
        "type": "tab",
        "label": "API:POST:Check",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "77589ba277290912",
        "type": "tab",
        "label": "Mon:umowy",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c74ceced8c3687a1",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "63acb26d6d62c6a7",
        "type": "tab",
        "label": "Telegram:cmd",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7ac738eef3d259eb",
        "type": "tab",
        "label": "Group:Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7314cbba718b913d",
        "type": "tab",
        "label": "Raporty",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "03b285947d86a284",
        "type": "subflow",
        "name": "ZFAI - Init",
        "info": "",
        "category": "ZFAI",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "b53d3e27e0d7792d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 80,
                "wires": [
                    {
                        "id": "7e485c2935113754",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#77ff77"
    },
    {
        "id": "742f4a5525c4b3be",
        "type": "subflow",
        "name": "ZFAI - queue - get first",
        "info": "",
        "category": "ZFAI",
        "in": [
            {
                "x": 180,
                "y": 240,
                "wires": [
                    {
                        "id": "fde0b74fa9332f24"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1280,
                "y": 260,
                "wires": [
                    {
                        "id": "0c86c249e2b1eb7f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C7E9C0",
        "status": {
            "x": 1360,
            "y": 160,
            "wires": [
                {
                    "id": "d406d5b7700d015f",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "c977f243f2f9f757",
        "type": "subflow",
        "name": "ZFAI - queue - store",
        "info": "",
        "category": "ZFAI",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "9582aa3b01a3bada"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1420,
                "y": 560,
                "wires": [
                    {
                        "id": "941bac566f840c85",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C7E9C0",
        "status": {
            "x": 1480,
            "y": 60,
            "wires": [
                {
                    "id": "e6eaf73b9a935363",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "aa23e6e4889d7c8b",
        "type": "subflow",
        "name": "ZFAI - status change",
        "info": "msg.up = {};\nmsg.up.uuid = msg.uuid;\nmsg.up.beforestatus = \"new\";\nmsg.up.status = \"completed\";\n\nmsg.nocodb_t_active = msg.nocodb_t.csv_table;\nmsg.nocodb_v_active = msg.nocodb_t.csv_table_view_id;\n\nreturn msg;",
        "category": "ZFAI",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "0127fa15d67b7a66"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1100,
                "y": 240,
                "wires": [
                    {
                        "id": "d1b766d45d1e2c4f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "ZFAI",
            "version": "0.0.1",
            "author": "Netruner80"
        },
        "color": "#D8BFD8",
        "status": {
            "x": 1280,
            "y": 40,
            "wires": [
                {
                    "id": "e1df2cfa0791b631",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "7a14c201fa805842",
        "type": "subflow",
        "name": "ZFAI - queue - get",
        "info": "",
        "category": "ZFAI",
        "in": [
            {
                "x": 40,
                "y": 160,
                "wires": [
                    {
                        "id": "30594d531b7ff4ce"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 160,
                "wires": [
                    {
                        "id": "229809b4be14120d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C7E9C0",
        "status": {
            "x": 980,
            "y": 60,
            "wires": [
                {
                    "id": "68da87ec9a968b36",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "bfda0bc698f05633",
        "type": "subflow",
        "name": "Lucy_Brain - Get ",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "029d060e6a95c1e4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 40,
                "wires": [
                    {
                        "id": "bf2659ad317a32de",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#E6E0F8",
        "icon": "font-awesome/fa-braille",
        "status": {
            "x": 880,
            "y": 360,
            "wires": [
                {
                    "id": "3616461914df5781",
                    "port": 0
                },
                {
                    "id": "e9fe2d445440e3d5",
                    "port": 0
                },
                {
                    "id": "51990d93c1fe83ba",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "4b1994ea08f806f1",
        "type": "subflow",
        "name": "ChatGPT - Prepare",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 54,
                "y": 50,
                "wires": [
                    {
                        "id": "8bd4d0fdbf8d5d3e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 680,
                "wires": [
                    {
                        "id": "ba37a094af10769a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#E6E0F8",
        "inputLabels": [
            "Question"
        ],
        "icon": "font-awesome/fa-braille"
    },
    {
        "id": "cb0cbe65f5a7b6e2",
        "type": "subflow",
        "name": "Purge OpenAI Files",
        "info": "Usuwa pliki z OpenAI API po ich u≈ºyciu.",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "fbb9c3d6c4b6e5cb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 340,
                "wires": [
                    {
                        "id": "f5b4a6fef8e9dbd6",
                        "port": 1
                    }
                ]
            }
        ]
    },
    {
        "id": "c223930924320350",
        "type": "subflow",
        "name": "Telegram",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "telegram_out"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 300,
            "y": 40,
            "wires": [
                {
                    "id": "telegram_out",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "54b98742948036f5",
        "type": "subflow",
        "name": "get config",
        "info": "",
        "category": "ZFAI",
        "in": [
            {
                "x": 60,
                "y": 180,
                "wires": [
                    {
                        "id": "a6cdbcc189e7eec4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1460,
                "y": 180,
                "wires": [
                    {
                        "id": "0207b2cca5960203",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "ZFAI",
            "version": "0.0.1"
        },
        "color": "#E7E7AE",
        "status": {
            "x": 1460,
            "y": 40,
            "wires": [
                {
                    "id": "15f5c6d0d8dae181",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "7918a80261c18fd1",
        "type": "group",
        "z": "8a595db6babaf80e",
        "name": "q-umowy-get",
        "style": {
            "label": true
        },
        "nodes": [
            "ae66d354533891ae",
            "d76b89fea3b3511f",
            "7eb560b5c3a4cab1",
            "fab7b4e4e51382e7",
            "f7b559c39a8a4937",
            "5c20d9e3f4361aa9",
            "98e816074884f3ab",
            "66a4803a3bc0c120",
            "bffe11eda272cf24",
            "76342c885c64be03",
            "cb758e32c8fde973",
            "6fdc192e553c1f08",
            "735f7d3bd2c17e95",
            "cc7083de28d2431d",
            "b7688480.6338",
            "aeefc12bab89217d",
            "e8a87fd21d80a914",
            "2e4b1b679b6a73c1"
        ],
        "x": 34,
        "y": 139,
        "w": 792,
        "h": 402
    },
    {
        "id": "4f2350069ea4f77b",
        "type": "group",
        "z": "bf6e5312884e6967",
        "name": "q-umowy-email-confirmed",
        "style": {
            "label": true
        },
        "nodes": [
            "9060eb281e8a08fd",
            "740bedaaa777e92b",
            "6cb48eeb5107a8f1",
            "c812b3aa228e12af",
            "34e95e5fe4edecc3",
            "1252c9d2ad0609b6",
            "69bf6a3b91382b0d",
            "549eea8a4e59e3f1",
            "4354c87c6902235f",
            "8ec1b4bdf3c43882",
            "0f65c44103db53d1",
            "17eea626cf58a195",
            "165d3ba2dd0b69a5",
            "126789e8f3f95b0a",
            "70c29e09ef47dbdc"
        ],
        "x": 34,
        "y": 119,
        "w": 792,
        "h": 262
    },
    {
        "id": "de07ac967b5ab328",
        "type": "group",
        "z": "7f8edcc91438aff6",
        "name": "Save form to NoCoDB",
        "style": {
            "label": true
        },
        "nodes": [
            "e9c1304f5f90927e",
            "c9199959da0f2652",
            "8b0f70caea35ed13",
            "050dabcd08732f94",
            "eb069a6838953468",
            "388e845554a0cdbb",
            "d747d5ba3cbab626",
            "24362b7ab3a611b8",
            "8aff7492ecde8657",
            "dfbd52e418f9fe83",
            "dc114f2912e02c94",
            "37e28c92b2c5de6a",
            "3b04fab737edca4b"
        ],
        "x": 34,
        "y": 39,
        "w": 872,
        "h": 522
    },
    {
        "id": "49c2be5b620ebeda",
        "type": "group",
        "z": "6ef65b964aaf43e6",
        "name": "Response json to Form Select",
        "style": {
            "label": true
        },
        "nodes": [
            "353379d5bcdeee09",
            "b8e46ab11cd82e31",
            "e2ee6162640b5a29",
            "9a824614bd5da150",
            "5c111b1ca0dd686e",
            "f6fc7c875e15e454",
            "d9b3f86bef90891d"
        ],
        "x": 34,
        "y": 39,
        "w": 1192,
        "h": 142
    },
    {
        "id": "4ee9ee381cb20b47",
        "type": "group",
        "z": "8971cc29f27d4741",
        "name": "Save if email Valid",
        "style": {
            "label": true
        },
        "nodes": [
            "0ad1c2e33d36b2e2",
            "ee1d170117a16cb9",
            "92cf13ad610664b9",
            "1843a6fb6ef174c8",
            "2da5f5f1636f4f75",
            "64fb459404f1d9ec",
            "82659668adc9e858",
            "6af24b5c04863e1b",
            "aafbd476563b4156",
            "d675709b0a7d7e1c",
            "76b5da44be016767"
        ],
        "x": 34,
        "y": 39,
        "w": 1232,
        "h": 442
    },
    {
        "id": "e70669bd24ffbcf3",
        "type": "group",
        "z": "be1c3f3f839ca819",
        "name": "q-umowy-email-examine",
        "style": {
            "label": true
        },
        "nodes": [
            "344f4fdbcc7aa161",
            "7282e4f8e111ba27",
            "9c3521cbdd01940d",
            "432f72cad7c993b3",
            "3321558b29da0cf7",
            "eeb338a064f555cf",
            "0ea7646b207b1c61",
            "5de2046e824d541f",
            "6133dc5ef9a2e7f8",
            "1fc92443bd36b6ac",
            "06a3092fd10d6b09",
            "f54078fb7e5ba183",
            "59f39a36a11b77c4",
            "689f0bd78eab811c",
            "aaeb584c7ed5f33b",
            "7e2415a1a8fb10f8",
            "f21258598582116b",
            "5b3d9084b179b7b3"
        ],
        "x": 34,
        "y": 119,
        "w": 792,
        "h": 422
    },
    {
        "id": "24acd2baaff30f4c",
        "type": "group",
        "z": "be1c3f3f839ca819",
        "style": {
            "stroke": "#2c4d57",
            "stroke-opacity": "1",
            "fill": "#002b36",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#839496"
        },
        "nodes": [
            "10899b1d53947e83",
            "4ff8d3d1742d566c",
            "ebe57c8170dea9e9",
            "f33441915ef0ebbc",
            "d41ccd5e807be2a6",
            "fd42845d2e4811c2",
            "2820d7330d92ab47",
            "637ef8f0903ac97f",
            "86183fdac91b6d57",
            "49fad7c4acefac24"
        ],
        "x": 54,
        "y": 1819,
        "w": 1412,
        "h": 222
    },
    {
        "id": "a27a260c5543dd9b",
        "type": "group",
        "z": "8a595db6babaf80e",
        "name": "send email confirmation email",
        "style": {
            "label": true
        },
        "nodes": [
            "23bc26edc4890059",
            "45ddc02187c0cca4",
            "45f34c55d1865088",
            "adff4f876ee6b8db",
            "193521fa10b04844",
            "7e71c160d6b3bdef",
            "1438e47a6d3d8d47",
            "ac8cbb807a19bde8",
            "21e185dded19e0ef",
            "f4e3c0bd70abe439",
            "7a0422b57c8d6b62"
        ],
        "x": 34,
        "y": 579,
        "w": 1222,
        "h": 182
    },
    {
        "id": "863158746555e7a5",
        "type": "group",
        "z": "be1c3f3f839ca819",
        "name": "analiza:pdf:sumakontrolna",
        "style": {
            "label": true
        },
        "nodes": [
            "9957284425d66a7f",
            "0a9bd45f1d1b05f1",
            "24ada9ad71fb27e5",
            "3948f3ca7ad74cf8",
            "b38108020e6fc6dd",
            "1f33ac787fa27bb8",
            "985d625385b7399d"
        ],
        "x": 54,
        "y": 1499,
        "w": 1412,
        "h": 142
    },
    {
        "id": "727dd0b334f9c095",
        "type": "group",
        "z": "be1c3f3f839ca819",
        "name": "chatgpt:core",
        "style": {
            "label": true
        },
        "nodes": [
            "aa42338187a37ee5",
            "016e7caeb45b4b90",
            "da94a28b18cd787a",
            "5f3173974d010f8d",
            "a4334c1a25387636",
            "2f47160fd1b9a3e4",
            "959a28fdc68c6fd3",
            "83f375e56d5576ec"
        ],
        "x": 54,
        "y": 1239,
        "w": 1412,
        "h": 202
    },
    {
        "id": "5a48da093318a6e2",
        "type": "group",
        "z": "be1c3f3f839ca819",
        "name": "analiza:email:ogolne",
        "style": {
            "label": true
        },
        "nodes": [
            "62271a965b7c3f0c",
            "2e7cff19f475f711",
            "e72ad402e181b3c3",
            "f6b6f42eaaa61aee",
            "114f63ea7c2a3302",
            "44cc669bad8efc18"
        ],
        "x": 74,
        "y": 1019,
        "w": 632,
        "h": 142
    },
    {
        "id": "4f84417ea22d54a2",
        "type": "group",
        "z": "7ac738eef3d259eb",
        "name": "telegram:template:process",
        "style": {
            "label": true
        },
        "nodes": [
            "b38c6c11d0212c18",
            "05787fdb9e24909d",
            "a11e422b6114d822",
            "331f8aac05af3f84",
            "4052c790d3e279e9",
            "cb8bf8e488c1a183",
            "cb62cc24fb94ce57",
            "59bbb540505cd062",
            "ad22c65f984b2fa7",
            "9eaf057bbd22b391",
            "efd2c3e56d49ea9a",
            "5ed9f39bab8aac16",
            "c80e33e6bba36bf8",
            "ff22d8d375026584",
            "517f9e00e31abb1f"
        ],
        "x": 34,
        "y": 39,
        "w": 1092,
        "h": 322
    },
    {
        "id": "f9bbfc32157cdb86",
        "type": "group",
        "z": "77589ba277290912",
        "name": "reminder: 2 day : pay reminder",
        "style": {
            "label": true
        },
        "nodes": [
            "40bb53708044b360",
            "49097134b356b2e0",
            "77e59c26a15a179d",
            "a7ea8748e9067d11",
            "b5a91360a8ac5138",
            "859efdb4505bae86"
        ],
        "x": 14,
        "y": 259,
        "w": 1212,
        "h": 122
    },
    {
        "id": "62d8f16d3b6436f6",
        "type": "group",
        "z": "7ac738eef3d259eb",
        "name": "email:template:process",
        "style": {
            "label": true
        },
        "nodes": [
            "af5988b14e5e0f89",
            "8ddc47805697df87",
            "706d9530c14be168",
            "3ca6cc4f3684235a",
            "c883e43364769c58",
            "295c85d65cc691b1",
            "4299ba8fb5f1cf7d",
            "d34147cb0559b0fc",
            "e415410fe3904fb3"
        ],
        "x": 34,
        "y": 379,
        "w": 1092,
        "h": 202
    },
    {
        "id": "73239419c2047320",
        "type": "group",
        "z": "77589ba277290912",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "9407368179ec2d01",
            "2c09b68be327efc7",
            "24c3c48b7f9e604e",
            "ffecdc961fc788a3",
            "32b4a119168a6867",
            "1182af59a084503f",
            "1aa6815b8796ee9a",
            "341bc6749a92c644",
            "16ba26b1271e6af5",
            "6f53c036e57e020f",
            "95447c54ed5bcc29",
            "adef80085c9ba213",
            "c618303a32bfc6e2",
            "fb8eceb8c074d48f",
            "812ef4a3b678cf9d"
        ],
        "x": 14,
        "y": 419,
        "w": 782,
        "h": 322
    },
    {
        "id": "537ea4a677b95df8",
        "type": "group",
        "z": "bf6e5312884e6967",
        "name": "prepare:data:umowa",
        "style": {
            "label": true
        },
        "nodes": [
            "d3849b6988415d4c",
            "13bd61d5d00e0938",
            "52a11ea9f254b4c4",
            "0a915799cd0a9b38",
            "6bcfc63a363a2ab7",
            "161a06cfe1ee8836",
            "fabd68f3c6a6f304",
            "2f8f8edda548213e",
            "96662476f8736be1",
            "a21d790e0cbd5b6d",
            "679891f5bf1fd8b1",
            "f18e7a8383d8e549",
            "1fecc97559a778e5",
            "1ff02bacb793d1c6",
            "1cc46f27e4be9bb2",
            "56c829dbe109bbdc",
            "b2b180a1019e82fa"
        ],
        "x": 34,
        "y": 399,
        "w": 1152,
        "h": 442
    },
    {
        "id": "b1b6694d796f2268",
        "type": "group",
        "z": "77589ba277290912",
        "style": {
            "stroke": "#2c4d57",
            "stroke-opacity": "1",
            "fill": "#002b36",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#839496"
        },
        "nodes": [
            "972686854135edc7",
            "73af710f88d8f0ae",
            "fffab29afffa0ca2",
            "6036a778a9287460",
            "5786daab56f2e47a",
            "f06c0fd4ec506f23",
            "627e76625d5f573d",
            "777d95f82f496b75"
        ],
        "x": 14,
        "y": 779,
        "w": 1032,
        "h": 142
    },
    {
        "id": "98ebb837b0a8d454",
        "type": "group",
        "z": "63acb26d6d62c6a7",
        "style": {
            "stroke": "#2c4d57",
            "stroke-opacity": "1",
            "fill": "#002b36",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#839496"
        },
        "nodes": [
            "0553c056fd52bef6",
            "d5080d546f5000c8",
            "d826163ff57b1f9a",
            "571c54a6d40c0903",
            "1e83de49104afef7",
            "089abbe4a8575aa3",
            "9cd6e401c88a4ea3",
            "e7547e052ad0742d",
            "a7d36146b2282a7c"
        ],
        "x": 14,
        "y": 19,
        "w": 1472,
        "h": 142
    },
    {
        "id": "21e8dc7395c23c6f",
        "type": "group",
        "z": "63acb26d6d62c6a7",
        "style": {
            "stroke": "#2c4d57",
            "stroke-opacity": "1",
            "fill": "#002b36",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#839496"
        },
        "nodes": [
            "cc8434dc2f151dc3",
            "20c122696ef0bc4e",
            "8bb0752e96f183d0",
            "aae0e6e5b141fbe5",
            "c7a0324304b3b041",
            "301484661c74561e",
            "7d17c56e56404b9e",
            "2b4a8d9db9d46d6e",
            "3aca31d79f028e08",
            "f4884138272fb87e",
            "d7b4a24b096e0d4e",
            "4f5e3bf13f7afea8",
            "6864c44392bd2e0c",
            "3acfa58cf1e285d8",
            "3ed7aebfddb1fed8"
        ],
        "x": 14,
        "y": 199,
        "w": 1472,
        "h": 262
    },
    {
        "id": "98736a5cc35a2f91",
        "type": "group",
        "z": "63acb26d6d62c6a7",
        "style": {
            "stroke": "#2c4d57",
            "stroke-opacity": "1",
            "fill": "#002b36",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#839496"
        },
        "nodes": [
            "7df1d82535ca7da6",
            "c6ecda197f2c7756",
            "cac96696c131113d",
            "be164207f0fb422c",
            "82222e3128714a37",
            "dc6b3abdfbae4214",
            "c4d1a145c8fd2071",
            "b90fa9c387b19295",
            "71de6977e18c0bba",
            "96fe3b936394ce16",
            "799e576850c2a16c",
            "c5cba888a5a53ac7",
            "0413ffbfda008984",
            "c5b22891970b034f"
        ],
        "x": 14,
        "y": 499,
        "w": 1492,
        "h": 202
    },
    {
        "id": "f8c622ed58f1f1af",
        "type": "group",
        "z": "63acb26d6d62c6a7",
        "style": {
            "stroke": "#2c4d57",
            "stroke-opacity": "1",
            "fill": "#002b36",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#839496"
        },
        "nodes": [
            "c56d1030b010a33d",
            "60b02b41a406f9a1",
            "7a5460e190f6cd1a",
            "ddc4eda71cdeb12a",
            "d55e61242858b9b2",
            "430ada3446244ea8",
            "d5985ef0154fedb9",
            "31cc3b927ec061f3",
            "501ffba732296b03",
            "68952e7603429f09",
            "9826806d4f227dd8",
            "7ac8669501eb3b35",
            "61370446aa787625",
            "42384abfb69ac6e6",
            "03a2a3c321018e60",
            "164c6854f9b77b79",
            "73664b974a486325"
        ],
        "x": 14,
        "y": 759,
        "w": 1492,
        "h": 362
    },
    {
        "id": "telegram_bot",
        "type": "telegram bot",
        "botname": "TelegramBot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbothost": "",
        "localbotport": "",
        "publicbotport": "",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "b53d3e27e0d7792d",
        "type": "function",
        "z": "03b285947d86a284",
        "name": "Init - ZenFlowAI",
        "func": "\n// const uuidv4 = () => {\n//     return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n//         let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n//         return v.toString(16);\n//     });\n// };\n\nglobal.set(\"uuidv4\", function () {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        let r = Math.random() * 16 | 0;\n        let v = (c === 'x') ? r : ((r & 0x3) | 0x8);\n        return v.toString(16);\n    });\n});\n\nglobal.set(\"getDateTime\", function () {\n    const now = new Date();\n    const pad = (n) => n.toString().padStart(2, '0');\n\n    const year = now.getFullYear();\n    const month = pad(now.getMonth() + 1);\n    const day = pad(now.getDate());\n    const hours = pad(now.getHours());\n    const minutes = pad(now.getMinutes());\n    const seconds = pad(now.getSeconds());\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n});\n\nglobal.set(\"getTimeStamp\", function () {\n    const now = new Date();\n    const pad = (a) => a.toString().padStart(2, '0');\n    const ts = `${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())}_${pad(now.getHours())}-${pad(now.getMinutes())}-${pad(now.getSeconds())}`;\n\n    return ts;\n});\n\nflow.set(\"uuid_global\", global.get(\"uuidv4\")());\n\nglobal.set(\"storage\", \"/zenflowai/storage/\");\nglobal.set(\"path_template_umowy\", \"teamplates/umowy/\");\nglobal.set(\"path_umowy\", \"umowy/\");\nglobal.set(\"path_tmp\", \"tmp/\");\nglobal.set(\"path_email\", \"email/\");\nglobal.set(\"path_email_attachment\", \"attachment/\");\n\nglobal.set(\"cf_turnstile_secret\", global.get('env').CLOUDFLARE_SECRET);\nglobal.set(\"url_form_public\", global.get('env').URL_FORM_PUBLIC);\n\nglobal.set(\"dev\", global.get('env').DEV);\n\nmsg.uuid = global.get(\"uuidv4\")();\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); // STATUS\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            [
                "d99796da1dd07fa1"
            ]
        ]
    },
    {
        "id": "d99796da1dd07fa1",
        "type": "function",
        "z": "03b285947d86a284",
        "name": "tables - ZenFlowAI",
        "func": "const env1 = global.get('env');\nmsg.nocodb_host = env1.NOCODB_HOST;\nflow.set('xc-token', env1.NOCODB_KEY);\nmsg.xc_token = flow.get(\"xc-token\");\n\nmsg.nocodb_t = {};\n\nconst prefix = \"NOCODB_T_\";\n\nfor (const key in env1) {\n    if (key.startsWith(prefix)) {\n        const baseKey = key\n            .substring(prefix.length)        // usu≈Ñ prefix\n            .toLowerCase()                   // ma≈Çe litery\n            .replace(/_/g, '_');             // opcjonalne, mo≈ºna zostawiƒá jak jest\n        msg.nocodb_t[baseKey] = env1[key];\n    }\n}\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 80,
        "wires": [
            [
                "5717605838cc4ae7"
            ]
        ]
    },
    {
        "id": "5717605838cc4ae7",
        "type": "function",
        "z": "03b285947d86a284",
        "name": "smtp-config",
        "func": "\nglobal.set('chatgpt_api', );\nconst smtpUser = global.get('env').SMTP_USER;\nconst smtpPass = global.get('env').SMTP_PASS;\nconst smtpHost = global.get('env').SMTP_HOST;\nconst smtpPort = global.get('env').SMTP_PORT; // SSL\n\n// konfiguracja SMTP\nmsg.smtp = {\n    host: smtpHost,\n    port: smtpPort,\n    secure: true,\n    auth: {\n        user: smtpUser,\n        pass: smtpPass\n    },\n    tls: {\n        rejectUnauthorized: false // Setze auf true, wenn du eine Zertifikats√ºberpr√ºfung erzwingen m√∂chtest\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 80,
        "wires": [
            [
                "7e485c2935113754"
            ]
        ]
    },
    {
        "id": "7e485c2935113754",
        "type": "function",
        "z": "03b285947d86a284",
        "name": "chaggpt",
        "func": "global.set('chatgpt_api', global.get('env').CHAT_GPT_API);\nglobal.set('chatgpt_asst_sign', global.get('env').CHAT_GPT_ASST_SIGN)\nglobal.set('chatgpt_asst_email', global.get('env').CHAT_GPT_ASST_EMAIL)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "fde0b74fa9332f24",
        "type": "function",
        "z": "742f4a5525c4b3be",
        "name": "NocoDB - get app_queue uuid",
        "func": "msg.nocodb_t_active = msg.nocodb_t.app_queue;\n\nmsg.payload = {\n    offset: '0',\n    limit: '1',\n    viewId: msg.nocodb_t.app_queue_view ,\n    where: `(status,eq,${msg.queue.status})~and(kind,eq,${msg.queue.kind})`\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nmsg.statusText = \"search in queue ...\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 240,
        "wires": [
            [
                "bcc04b7f9f3ca71c",
                "d406d5b7700d015f"
            ]
        ]
    },
    {
        "id": "bcc04b7f9f3ca71c",
        "type": "http request",
        "z": "742f4a5525c4b3be",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 640,
        "y": 240,
        "wires": [
            [
                "a573c6b51b3de311"
            ]
        ]
    },
    {
        "id": "a573c6b51b3de311",
        "type": "function",
        "z": "742f4a5525c4b3be",
        "name": "NocoDB - analize get",
        "func": "// msg.nocodb_t_active = msg.nocodb_t.csv_table;\n\nif (msg.payload.list && msg.payload.list.length > 0) {\n    msg.id = msg.payload.list[0].Id;\n    node.status({ fill: \"grey\", shape: \"ring\", text: `ID: ${msg.id}` });\n    msg.statusText = `find ID: ${msg.id}`;\n    return [null,msg];\n}\n\n\nnode.status({ fill: \"yellow\", shape: \"dot\", text: `${msg.queue.kind}:${msg.queue.status} not found` });\nmsg.statusText = `${msg.queue.kind}:${msg.queue.status} not found`;\nreturn [msg,null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 240,
        "wires": [
            [
                "d406d5b7700d015f"
            ],
            [
                "d406d5b7700d015f",
                "0c86c249e2b1eb7f"
            ]
        ]
    },
    {
        "id": "d406d5b7700d015f",
        "type": "change",
        "z": "742f4a5525c4b3be",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "statusText",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0c86c249e2b1eb7f",
        "type": "function",
        "z": "742f4a5525c4b3be",
        "name": "ret uuid",
        "func": "if (msg.payload.list && msg.payload.list.length > 0) {\n    msg.uuidv4 = msg.payload.list[0].uuid;\n    msg.payload = msg.uuidv4;\n    node.status({ fill: \"grey\", shape: \"ring\", text: `get ID: ${msg.id}` });\n    msg.statusText = `get ID: ${msg.id}`;\n    return msg;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "c6320b6dbc7fecb3",
        "type": "function",
        "z": "c977f243f2f9f757",
        "name": "NocoDB - save queue record",
        "func": "msg.nocodb_t_active = msg.nocodb_t.app_queue;\n\nmsg.payload = [{\n        timestamp: global.get(\"getDateTime\")(),\n        status: \"new\",\n        kind: msg.queue.kind,\n        uuid: msg.queue.uuid\n}];\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn [msg,null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 340,
        "wires": [
            [
                "ca15ba53deb6fcf2"
            ]
        ]
    },
    {
        "id": "ca15ba53deb6fcf2",
        "type": "http request",
        "z": "c977f243f2f9f757",
        "name": "NocoDB - POST",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1040,
        "y": 340,
        "wires": [
            [
                "f23c4d8dd5d8155e"
            ]
        ]
    },
    {
        "id": "f23c4d8dd5d8155e",
        "type": "function",
        "z": "c977f243f2f9f757",
        "name": "nocodb_record_id",
        "func": "msg.topic = \"nocodb_record_id\";\nmsg.nocodb_record_id = msg.payload.Id;\nnode.status({ fill: \"green\", shape: \"dot\", text: `queue_id: ${msg.nocodb_record_id}` });\nmsg.statusText = `add ID: ${msg.id}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 340,
        "wires": [
            [
                "1c7138cea3bd8ab0"
            ]
        ]
    },
    {
        "id": "9582aa3b01a3bada",
        "type": "function",
        "z": "c977f243f2f9f757",
        "name": "NocoDB - get app_queue uuid",
        "func": "msg.nocodb_t_active = msg.nocodb_t.app_queue;\n\ndelete msg.headers;\ndelete msg.method;\ndelete msg.payload;\ndelete msg.url;\ndelete msg.responseUrl;\ndelete msg.redirectList;\n\n// msg.rowcsv = msg.payload;\n\nmsg.payload = {\n    offset: '0',\n    limit: '1',\n    viewId: msg.nocodb_t.app_queue_view ,\n    where: `(uuid,eq,${msg.queue.uuid})~and(kind,eq,${msg.queue.kind})`\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nmsg.statusText = \"search in queue ...\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 140,
        "wires": [
            [
                "0f37cc2311a0ddaf",
                "e6eaf73b9a935363"
            ]
        ]
    },
    {
        "id": "0f37cc2311a0ddaf",
        "type": "http request",
        "z": "c977f243f2f9f757",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 820,
        "y": 140,
        "wires": [
            [
                "cf0b217fe2bd2bc5"
            ]
        ]
    },
    {
        "id": "cf0b217fe2bd2bc5",
        "type": "function",
        "z": "c977f243f2f9f757",
        "name": "NocoDB - analize get",
        "func": "msg.nocodb_t_active = msg.nocodb_t.csv_table;\n\nif (msg.payload.list && msg.payload.list.length > 0) {\n    msg.id = msg.payload.list[0].Id;\n    node.status({ fill: \"grey\", shape: \"ring\", text: `ID: ${msg.id}` });\n    msg.statusText = `find ID: ${msg.id}`;\n    return [null,msg];\n}\n\n\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"Brak danych ‚Äî utworzono pusty rekord\" });\nmsg.statusText = \"no record ...\";\nreturn [msg,null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 140,
        "wires": [
            [
                "c6320b6dbc7fecb3",
                "e6eaf73b9a935363"
            ],
            [
                "01581cecbf8fe499",
                "e6eaf73b9a935363"
            ]
        ]
    },
    {
        "id": "01581cecbf8fe499",
        "type": "function",
        "z": "c977f243f2f9f757",
        "name": "NocoDB - update queue record",
        "func": "msg.nocodb_t_active = msg.nocodb_t.app_queue;\nmsg.method = \"PATCH\";\n\nmsg.payload = [{\n        Id: msg.id,  \n        status: msg.queue.status,\n}];\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 400,
        "wires": [
            [
                "d5935134f754a5f3"
            ]
        ]
    },
    {
        "id": "d5935134f754a5f3",
        "type": "http request",
        "z": "c977f243f2f9f757",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1040,
        "y": 400,
        "wires": [
            [
                "1c7138cea3bd8ab0"
            ]
        ]
    },
    {
        "id": "1c7138cea3bd8ab0",
        "type": "function",
        "z": "c977f243f2f9f757",
        "name": "NocoDB - get app_queue uuid",
        "func": "delete msg.headers;\ndelete msg.method;\ndelete msg.payload;\ndelete msg.url;\ndelete msg.responseUrl;\ndelete msg.redirectList;\n\nmsg.nocodb_t_active = msg.nocodb_t.app_queue;\n\nmsg.payload = {\n    offset: '0',\n    limit: '1',\n    viewId: msg.nocodb_t.app_queue_view_id ,\n    where: `(uuid,eq,${msg.queue.uuid})~and(kind,eq,${msg.queue.kind})`\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 560,
        "wires": [
            [
                "caf2958864e365d6",
                "e6eaf73b9a935363"
            ]
        ]
    },
    {
        "id": "caf2958864e365d6",
        "type": "http request",
        "z": "c977f243f2f9f757",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1020,
        "y": 560,
        "wires": [
            [
                "941bac566f840c85"
            ]
        ]
    },
    {
        "id": "e6eaf73b9a935363",
        "type": "change",
        "z": "c977f243f2f9f757",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "statusText",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1340,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "941bac566f840c85",
        "type": "function",
        "z": "c977f243f2f9f757",
        "name": "end",
        "func": "if (msg.payload.list && msg.payload.list.length > 0) {\n    msg.id = msg.payload.list[0].Id;\n    msg.payload = msg.payload.list[0];\n    node.status({ fill: \"grey\", shape: \"ring\", text: `update ID: ${msg.id}` });\n    msg.statusText = `update ID: ${msg.id}`;\n    return msg;\n}\n\n\n// node.status({ fill: \"red\", shape: \"dot\", text: \"Error\" });\n// msg.statusText = \"error ...\";\n// return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 560,
        "wires": [
            [
                "e6eaf73b9a935363"
            ]
        ]
    },
    {
        "id": "0127fa15d67b7a66",
        "type": "function",
        "z": "aa23e6e4889d7c8b",
        "name": "NocoDB - get app_queue uuid",
        "func": "msg.payload = {\n    offset: '0',\n    limit: '500',\n    viewId: msg.nocodb_v_active ,\n    where: `(uuid,eq,${msg.up.uuid})~and(status,eq,${msg.up.beforestatus})`\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nmsg.statusText = \"search in table ...\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 80,
        "wires": [
            [
                "0e4887c5ec1a1a79",
                "e1df2cfa0791b631"
            ]
        ]
    },
    {
        "id": "0e4887c5ec1a1a79",
        "type": "http request",
        "z": "aa23e6e4889d7c8b",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "65f00b0a6af61247"
            ]
        ]
    },
    {
        "id": "65f00b0a6af61247",
        "type": "function",
        "z": "aa23e6e4889d7c8b",
        "name": "NocoDB - analize get",
        "func": "if (msg.payload.list && msg.payload.list.length > 0) {\n    node.status({ fill: \"grey\", shape: \"ring\", text: `rows: ${msg.payload.list.length}` });\n    msg.records = msg.payload.list\n    msg.statusText = `rows: ${msg.payload.list.length}`;\n    return [null,msg];\n}\n\n\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"no records to update\" });\nmsg.statusText = \"no records to update\";\nreturn [msg,null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 80,
        "wires": [
            [
                "e1df2cfa0791b631"
            ],
            [
                "0473db998c3d3f9c",
                "e1df2cfa0791b631"
            ]
        ]
    },
    {
        "id": "0473db998c3d3f9c",
        "type": "function",
        "z": "aa23e6e4889d7c8b",
        "name": "prepare list to update",
        "func": "let rows = msg.records;\nmsg.method = \"PATCH\";\nmsg.payload = rows.map(row => {\n    let singleMsg = {\n        \"Id\": row.Id,\n        \"status\": msg.up.status\n    };\n\n    return singleMsg;\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 160,
        "wires": [
            [
                "3ba80c5671771201"
            ]
        ]
    },
    {
        "id": "3ba80c5671771201",
        "type": "http request",
        "z": "aa23e6e4889d7c8b",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 660,
        "y": 240,
        "wires": [
            [
                "d1b766d45d1e2c4f"
            ]
        ]
    },
    {
        "id": "e1df2cfa0791b631",
        "type": "change",
        "z": "aa23e6e4889d7c8b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "statusText",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d1b766d45d1e2c4f",
        "type": "function",
        "z": "aa23e6e4889d7c8b",
        "name": "NocoDB - analize save",
        "func": "if (msg.payload && msg.payload.length > 0) {\n    node.status({ fill: \"grey\", shape: \"ring\", text: `update rows: ${msg.payload.length}` });\n    msg.statusText = `update rows: ${msg.payload.length}`;\n    return msg;\n}\n\n\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"Brak danych\" });\nmsg.statusText = \"no records update\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 240,
        "wires": [
            [
                "e1df2cfa0791b631"
            ]
        ]
    },
    {
        "id": "30594d531b7ff4ce",
        "type": "function",
        "z": "7a14c201fa805842",
        "name": "NocoDB - get app_queue uuid",
        "func": "msg.nocodb_t_active = msg.nocodb_t.app_queue;\n\nmsg.payload = {\n    offset: '0',\n    limit: '1',\n    viewId: msg.nocodb_t.app_queue_view ,\n    where: `(uuid,eq,${msg.queue.uuid})~and(kind,eq,${msg.queue.kind})`\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nmsg.statusText = \"search in queue ...\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 160,
        "wires": [
            [
                "ebce8664cb0827d8",
                "68da87ec9a968b36"
            ]
        ]
    },
    {
        "id": "ebce8664cb0827d8",
        "type": "http request",
        "z": "7a14c201fa805842",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 560,
        "y": 160,
        "wires": [
            [
                "15321794a54ebb25"
            ]
        ]
    },
    {
        "id": "15321794a54ebb25",
        "type": "function",
        "z": "7a14c201fa805842",
        "name": "NocoDB - analize get",
        "func": "if (msg.payload.list && msg.payload.list.length > 0) {\n    msg.id = msg.payload.list[0].Id;\n    node.status({ fill: \"grey\", shape: \"ring\", text: `ID: ${msg.id}` });\n    msg.statusText = `find ID: ${msg.id}`;\n    return [null,msg];\n}\n\n\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"Brak danych ‚Äî utworzono pusty rekord\" });\nmsg.statusText = \"no record ...\";\nreturn [msg,null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 160,
        "wires": [
            [
                "68da87ec9a968b36"
            ],
            [
                "68da87ec9a968b36",
                "229809b4be14120d"
            ]
        ]
    },
    {
        "id": "68da87ec9a968b36",
        "type": "change",
        "z": "7a14c201fa805842",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "statusText",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "229809b4be14120d",
        "type": "function",
        "z": "7a14c201fa805842",
        "name": "ret all",
        "func": "if (msg.payload.list && msg.payload.list.length > 0) {\n    msg.uuidv4 = msg.payload.list[0].uuid;\n    msg.payload = msg.payload.list[0];\n    node.status({ fill: \"grey\", shape: \"ring\", text: `get ID: ${msg.id}` });\n    msg.statusText = `get ID: ${msg.id}`;\n    return msg;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "029d060e6a95c1e4",
        "type": "http request",
        "z": "bfda0bc698f05633",
        "name": "Check Run Status",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/threads/{{thread_id}}/runs/{{run_id}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "msg",
                "valueValue": "chatgpt_bearer"
            },
            {
                "keyType": "other",
                "keyValue": "OpenAI-Beta",
                "valueType": "other",
                "valueValue": "assistants=v2"
            }
        ],
        "x": 170,
        "y": 120,
        "wires": [
            [
                "2a51cb1b8b5fcdbd"
            ]
        ]
    },
    {
        "id": "2a51cb1b8b5fcdbd",
        "type": "switch",
        "z": "bfda0bc698f05633",
        "name": "Status complete?",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "completed",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 120,
        "wires": [
            [
                "e05670493e6af583"
            ],
            [
                "614dac60cbb0a72a",
                "3616461914df5781"
            ]
        ]
    },
    {
        "id": "e05670493e6af583",
        "type": "http request",
        "z": "bfda0bc698f05633",
        "name": "Get Assistant Message",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/threads/{{thread_id}}/messages",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "msg",
                "valueValue": "chatgpt_bearer"
            },
            {
                "keyType": "other",
                "keyValue": "OpenAI-Beta",
                "valueType": "other",
                "valueValue": "assistants=v2"
            }
        ],
        "x": 690,
        "y": 120,
        "wires": [
            [
                "bf2659ad317a32de"
            ]
        ]
    },
    {
        "id": "bf2659ad317a32de",
        "type": "function",
        "z": "bfda0bc698f05633",
        "name": "Extract Assistant Reply",
        "func": "let messages = msg.payload.data;\nlet reply = messages.find(m => m.role === \"assistant\");\nmsg.payload = reply ? reply.content[0].text.value : \"Brak odpowiedzi od Lucy.\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 120,
        "wires": [
            [
                "51990d93c1fe83ba"
            ]
        ]
    },
    {
        "id": "614dac60cbb0a72a",
        "type": "delay",
        "z": "bfda0bc698f05633",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 240,
        "wires": [
            [
                "029d060e6a95c1e4",
                "e9fe2d445440e3d5"
            ]
        ]
    },
    {
        "id": "3616461914df5781",
        "type": "function",
        "z": "bfda0bc698f05633",
        "name": "function 6",
        "func": "delete msg.payload;\nmsg.payload = { fill: \"yellow\", shape: \"dot\", text: \"Wait for Lucy\" }; \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e9fe2d445440e3d5",
        "type": "function",
        "z": "bfda0bc698f05633",
        "name": "function 8",
        "func": "msg.payload = { fill: \"blue\", shape: \"dot\", text: \"Check Answer\" }; \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "51990d93c1fe83ba",
        "type": "function",
        "z": "bfda0bc698f05633",
        "name": "function 9",
        "func": "delete msg.payload;\nmsg.payload = { fill: \"gray\", shape: \"ring\", text: \"Lucy is bored\" };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "ceb7a71d6503b21e",
        "type": "function",
        "z": "4b1994ea08f806f1",
        "name": "Build Payload",
        "func": "msg.chatgpt_api = global.get('chatgpt_api');\nmsg.chatgpt_bearer = \"Bearer \" + msg.chatgpt_api;\n\n\n// pytanie domy≈õlne\n// msg.question = msg.question || \"Czy dokument zawiera podpis rƒôczny?\";\n\nlet contentArray = [];\ncontentArray.push({ type: \"text\", text: msg.question });\n\n// dodanie plik√≥w (je≈õli nie wy≈ÇƒÖczone)\nif (!msg.nofile && Array.isArray(msg.file_ids) && msg.file_ids.length > 0) {\n    for (let i = 0; i < msg.file_ids.length; i++) {\n        contentArray.push({\n            type: \"image_file\",\n            image_file: { file_id: msg.file_ids[i] }\n        });\n    }\n}\n\nmsg.message_body = {\n    role: \"user\",\n    content: contentArray\n};\n\nmsg.thread_body = {};\nmsg.payload = {};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 380,
        "wires": [
            [
                "b24cfb5325653d90"
            ]
        ]
    },
    {
        "id": "b24cfb5325653d90",
        "type": "http request",
        "z": "4b1994ea08f806f1",
        "name": "Create Thread",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/threads",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "msg",
                "valueValue": "chatgpt_bearer"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            },
            {
                "keyType": "other",
                "keyValue": "OpenAI-Beta",
                "valueType": "other",
                "valueValue": "assistants=v2"
            }
        ],
        "x": 640,
        "y": 380,
        "wires": [
            [
                "6c7aa32f405245bc"
            ]
        ]
    },
    {
        "id": "6c7aa32f405245bc",
        "type": "function",
        "z": "4b1994ea08f806f1",
        "name": "Build Add Message",
        "func": "msg.thread_id = msg.payload.id;\nmsg.url = \"https://api.openai.com/v1/threads/\" + msg.thread_id + \"/messages\";\nmsg.payload = msg.message_body;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 460,
        "wires": [
            [
                "43779495fba54a02"
            ]
        ]
    },
    {
        "id": "43779495fba54a02",
        "type": "http request",
        "z": "4b1994ea08f806f1",
        "name": "Add Message",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "msg",
                "valueValue": "chatgpt_bearer"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            },
            {
                "keyType": "other",
                "keyValue": "OpenAI-Beta",
                "valueType": "other",
                "valueValue": "assistants=v2"
            }
        ],
        "x": 640,
        "y": 460,
        "wires": [
            [
                "d2c528a1bb0a595c"
            ]
        ]
    },
    {
        "id": "d2c528a1bb0a595c",
        "type": "function",
        "z": "4b1994ea08f806f1",
        "name": "Run Assistant",
        "func": "msg.url = \"https://api.openai.com/v1/threads/\" + msg.thread_id + \"/runs\";\nmsg.payload = {\n    assistant_id: msg.chatgpt_asst\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 540,
        "wires": [
            [
                "ba37a094af10769a"
            ]
        ]
    },
    {
        "id": "ba37a094af10769a",
        "type": "http request",
        "z": "4b1994ea08f806f1",
        "name": "Start Run",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "msg",
                "valueValue": "chatgpt_bearer"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            },
            {
                "keyType": "other",
                "keyValue": "OpenAI-Beta",
                "valueType": "other",
                "valueValue": "assistants=v2"
            }
        ],
        "x": 660,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "5cda78b9778c1f2f",
        "type": "function",
        "z": "4b1994ea08f806f1",
        "name": "function 13",
        "func": "const fs = global.get('fs');\n\nmsg.files = msg.files.map(f => {\n    try {\n        node.warn(`Wczytano: ${f.filename} -> ${f.path}`);\n        return {\n            filename: f.filename,\n            file: fs.readFileSync(f.path)\n        };\n    } catch (err) {\n        node.error(`B≈ÇƒÖd wczytywania pliku: ${f.path} - ${err.message}`);\n        return null;\n    }\n}).filter(Boolean);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 60,
        "wires": [
            [
                "4c1c6555f38ceb7e"
            ]
        ]
    },
    {
        "id": "4c1c6555f38ceb7e",
        "type": "function",
        "z": "4b1994ea08f806f1",
        "name": "upload:queue",
        "func": "const files = msg.files || [];\n\nif (!Array.isArray(files) || files.length === 0) {\n    node.error(\"Brak plik√≥w w msg.files\");\n    return null;\n}\n\nmsg.uploadQueue = files.map((f, index) => {\n    return {\n        file: f.file,                              // tylko Buffer\n        filename: f.filename || `file-${index + 1}`, // nazwa\n        index\n    };\n});\n\nmsg.uploadResults = [];\nmsg.currentUploadIndex = 0;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 60,
        "wires": [
            [
                "26fd971ca0d6bfac"
            ]
        ]
    },
    {
        "id": "26fd971ca0d6bfac",
        "type": "function",
        "z": "4b1994ea08f806f1",
        "name": "function 14",
        "func": "const fileObj = msg.uploadQueue[msg.currentUploadIndex];\nconst boundary = \"----WebKitFormBoundary\" + Math.random().toString(16).substr(2);\n\n// Sprawdzenie, czy mamy bufor\nif (!Buffer.isBuffer(fileObj.file)) {\n    node.error(\"Plik nie jest Bufferem! Upewnij siƒô, ≈ºe zosta≈Ç poprawnie za≈Çadowany z dysku.\");\n    return null;\n}\n\nmsg.headers = {\n    \"Content-Type\": \"multipart/form-data; boundary=\" + boundary,\n    \"Authorization\": \"Bearer \" + global.get(\"chatgpt_api\")\n};\n\nconst crlf = \"\\r\\n\";\nconst bodyParts = [\n    Buffer.from(`--${boundary}${crlf}` +\n        `Content-Disposition: form-data; name=\"purpose\"${crlf}${crlf}` +\n        `assistants${crlf}`),\n\n    Buffer.from(`--${boundary}${crlf}` +\n        `Content-Disposition: form-data; name=\"file\"; filename=\"${fileObj.filename}\"${crlf}` +\n        `Content-Type: image/png${crlf}${crlf}`),\n\n    fileObj.file,\n\n    Buffer.from(`${crlf}--${boundary}--${crlf}`)\n];\n\nmsg.payload = Buffer.concat(bodyParts);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 60,
        "wires": [
            [
                "9e3d6ac41c3bfa2a"
            ]
        ]
    },
    {
        "id": "295acf7d185c7d2a",
        "type": "function",
        "z": "4b1994ea08f806f1",
        "name": "function 15",
        "func": "msg.uploadResults.push(msg.payload.id);\nmsg.currentUploadIndex++;\n\nif (msg.currentUploadIndex < msg.uploadQueue.length) {\n    return [msg, null];  // repeat\n} else {\n    msg.file_ids = msg.uploadResults;\n    return [null, msg];  // done\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 140,
        "wires": [
            [
                "26fd971ca0d6bfac"
            ],
            [
                "ceb7a71d6503b21e"
            ]
        ]
    },
    {
        "id": "9e3d6ac41c3bfa2a",
        "type": "http request",
        "z": "4b1994ea08f806f1",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/files",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 60,
        "wires": [
            [
                "295acf7d185c7d2a"
            ]
        ]
    },
    {
        "id": "8bd4d0fdbf8d5d3e",
        "type": "function",
        "z": "4b1994ea08f806f1",
        "name": "nofile?",
        "func": "const files = msg.files || [];\nmsg.nofile = true;\n\nif (!Array.isArray(files) || files.length === 0) {\n    node.error(\"Brak plik√≥w w msg.files\");\n    msg.nofile = true;\n} else {\n    msg.nofile = false;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "84ad973dd639c523"
            ]
        ]
    },
    {
        "id": "84ad973dd639c523",
        "type": "switch",
        "z": "4b1994ea08f806f1",
        "name": "",
        "property": "nofile",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 100,
        "wires": [
            [
                "ceb7a71d6503b21e"
            ],
            [
                "5cda78b9778c1f2f"
            ]
        ]
    },
    {
        "id": "fbb9c3d6c4b6e5cb",
        "type": "function",
        "z": "cb0cbe65f5a7b6e2",
        "name": "Prepare Delete Queue",
        "func": "msg.deleteIndex = 0;\nmsg.deleteQueue = msg.file_ids || [];\nmsg.deleteResults = [];\n\nif (msg.deleteQueue.length === 0) {\n    node.warn(\"Brak plik√≥w do usuniƒôcia\");\n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            [
                "ea09dbf8973c4421"
            ]
        ]
    },
    {
        "id": "ea09dbf8973c4421",
        "type": "function",
        "z": "cb0cbe65f5a7b6e2",
        "name": "Build DELETE request",
        "func": "const file_id = msg.deleteQueue[msg.deleteIndex];\n\nmsg.url = `https://api.openai.com/v1/files/${file_id}`;\nmsg.method = \"DELETE\";\nmsg.headers = {\n    \"Authorization\": \"Bearer \" + global.get(\"chatgpt_api\")\n};\nmsg.payload = null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 80,
        "wires": [
            [
                "90a9b8c2c6c98e53"
            ]
        ]
    },
    {
        "id": "90a9b8c2c6c98e53",
        "type": "http request",
        "z": "cb0cbe65f5a7b6e2",
        "name": "DELETE OpenAI File",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 760,
        "y": 80,
        "wires": [
            [
                "f5b4a6fef8e9dbd6"
            ]
        ]
    },
    {
        "id": "f5b4a6fef8e9dbd6",
        "type": "function",
        "z": "cb0cbe65f5a7b6e2",
        "name": "Loop or Done",
        "func": "msg.deleteResults.push(msg.payload);\nmsg.deleteIndex++;\n\nif (msg.deleteIndex < msg.deleteQueue.length) {\n    return [msg, null]; // continue loop\n} else {\n    msg.payload = {\n        deleted: msg.deleteResults.length,\n        results: msg.deleteResults\n    };\n    return [null, msg]; // done\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 640,
        "y": 260,
        "wires": [
            [
                "ea09dbf8973c4421"
            ],
            []
        ]
    },
    {
        "id": "telegram_out",
        "type": "telegram sender",
        "z": "c223930924320350",
        "name": "Kwatermistrz",
        "bot": "telegram_bot",
        "haserroroutput": false,
        "outputs": 1,
        "x": 170,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "a6cdbcc189e7eec4",
        "type": "function",
        "z": "54b98742948036f5",
        "name": "NocoDB - get app_config parametr:kind",
        "func": "msg.nocodb_t_active = msg.nocodb_t.app_config;\n\n// Budowanie warunku where\nlet conditions = [];\n\nif (msg.config.parametr && msg.config.parametr !== \"*\") {\n    conditions.push(`(parametr,eq,${msg.config.parametr})`);\n}\nconditions.push(`(kind,eq,${msg.config.kind})`);\n\nif (msg.config.value && msg.config.value !== \"\") {\n    conditions.push(`(value,eq,${msg.config.value})`);\n}\n\nlet where = conditions.join(\"~and\");\n\n// Budowanie payloadu\nmsg.payload = {\n    offset: '0',\n    limit: msg.config.limit,\n    viewId: msg.nocodb_t.app_config_view,\n    where: where\n};\n\n// Status\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nmsg.statusText = \"search in config ...\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            [
                "15f5c6d0d8dae181",
                "c397e119640213f5"
            ]
        ]
    },
    {
        "id": "15f5c6d0d8dae181",
        "type": "change",
        "z": "54b98742948036f5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "statusText",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "9d1723e40fb93c1e",
        "type": "function",
        "z": "54b98742948036f5",
        "name": "NocoDB - analize get",
        "func": "if (msg.payload.list && msg.payload.list.length > 0) {\n    msg.id = msg.payload.list[0].Id;\n    node.status({ fill: \"grey\", shape: \"ring\", text: `ID: ${msg.id}` });\n    msg.statusText = `find ID: ${msg.id}`;\n    return [null,msg];\n}\n\n\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"Brak danych ‚Äî utworzono pusty rekord\" });\nmsg.statusText = \"no record ...\";\nreturn [msg,null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 180,
        "wires": [
            [
                "15f5c6d0d8dae181"
            ],
            [
                "15f5c6d0d8dae181",
                "0207b2cca5960203"
            ]
        ]
    },
    {
        "id": "0207b2cca5960203",
        "type": "function",
        "z": "54b98742948036f5",
        "name": "ret all",
        "func": "if (msg.config.flat && msg.config.flat.length > 0) {\n    const lista = msg.payload.list;\n    const flat_data = {};\n\n    for (let i = 0; i < lista.length; i++) {\n        const el = lista[i];\n        if (el.kind === msg.config.kind) {\n            flat_data[el.parametr] = el.value;\n        }\n    }\n\n    msg[msg.config.flat] = flat_data;\n\n    node.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n} else {\n    if (msg.payload.list && msg.payload.list.length > 0) {\n        if (msg.config && msg.config.limit === 1) {\n            msg.payload = msg.payload.list[0];\n            node.status({ fill: \"grey\", shape: \"ring\", text: `get ID: ${msg.payload.id || msg.payload.uuid || \"?\"}` });\n            msg.statusText = `get ID: ${msg.payload.id || msg.payload.uuid || \"?\"}`;\n        } else {\n            msg.payload = msg.payload.list;\n            node.status({ fill: \"blue\", shape: \"dot\", text: `list length: ${msg.payload.length}` });\n            msg.statusText = `list length: ${msg.payload.length}`;\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "c397e119640213f5",
        "type": "http request",
        "z": "54b98742948036f5",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 700,
        "y": 180,
        "wires": [
            [
                "9d1723e40fb93c1e"
            ]
        ]
    },
    {
        "id": "bc8a691041330981",
        "type": "subflow:03b285947d86a284",
        "z": "8a595db6babaf80e",
        "name": "",
        "x": 300,
        "y": 80,
        "wires": [
            [
                "3a862aed26a5ef2e"
            ]
        ]
    },
    {
        "id": "6b878d2c9c32a6e1",
        "type": "inject",
        "z": "8a595db6babaf80e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "bc8a691041330981"
            ]
        ]
    },
    {
        "id": "3a862aed26a5ef2e",
        "type": "function",
        "z": "8a595db6babaf80e",
        "name": "NocoDB - umowy:get:new",
        "func": "msg.nocodb_t_active = msg.nocodb_t.umowy;\n\nlet nr_k = msg.payload.nr_k;\n\nmsg.form_data = msg.payload;\n\nmsg.payload = {\n    offset: '0',\n    limit: '25',\n    viewId: msg.nocodb_t.umowy_view,\n    where: `(status,eq,01 new)`,\n    \"nested[osoby][fields]\": \"*\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 80,
        "wires": [
            [
                "c66408c43bb56b21"
            ]
        ]
    },
    {
        "id": "c66408c43bb56b21",
        "type": "http request",
        "z": "8a595db6babaf80e",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 800,
        "y": 80,
        "wires": [
            [
                "8be11d0711271c4f"
            ]
        ]
    },
    {
        "id": "23bc26edc4890059",
        "type": "function",
        "z": "8a595db6babaf80e",
        "g": "a27a260c5543dd9b",
        "name": "email:template:confirm-email",
        "func": "var data = msg.payload;\n\nconst fs = global.get('fs');\nconst path = global.get('path');\n\n// ≈öcie≈ºki do plik√≥w (dostosuj wed≈Çug potrzeb)\nconst htmlPath = global.get('storage') + \"/teamplates/html/email_verify.html\";\nconst cssPath = global.get('storage') + \"/teamplates/html/email-style.css\";\n\nlet html = fs.readFileSync(htmlPath, \"utf8\");\nconst css = fs.readFileSync(cssPath, \"utf8\");\n\nconst formdata = {\n    \"osoba_name\": data.osoby.imie,\n    \"confirm_email_link\": global.get(\"url_form_public\") + \"confirm_email/\" + data.uuid\n}\n\n// Wstawienie stylu inline w miejsce <link rel=\"stylesheet\"...>\nhtml = html.replace(\n    /<link\\s+rel=[\"']stylesheet[\"']\\s+href=[\"'][^\"']+[\"']\\s*\\/?>/,\n    `<style>\\n${css}\\n</style>`\n);\n\n// Zamiana znacznik√≥w {{...}} dynamicznie z msg.payload\nhtml = html\n    .replace(/{{osoba_name}}/g, formdata.osoba_name)\n    .replace(/{{confirm_email_link}}/g,formdata.confirm_email_link);\n\nmsg.payload = html;\nmsg.to = `${data.osoby.email}`;\n// msg.from = \"kwatermistrz@zenflowai.net\";\nmsg.from = msg.smtp.auth.user;\nmsg.subject = \"Potwierdzenie adresu e-mail - Kapitan Bastek\";\nmsg.headers = {\n    \"Content-Type\": \"text/html\"\n};\n\nmsg.umowa = data;\nmsg.html = html;\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 620,
        "wires": [
            [
                "adff4f876ee6b8db"
            ]
        ]
    },
    {
        "id": "ae66d354533891ae",
        "type": "function",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "separate records",
        "func": "let rows = msg.q.list;\n\nmsg.payload = rows.map(row => {\n    let singleMsg = RED.util.cloneMessage(msg); // duplikujemy oryginalny msg\n    singleMsg.payload = row;\n    return singleMsg;\n});\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn [msg.payload]; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 320,
        "wires": [
            [
                "7eb560b5c3a4cab1"
            ]
        ]
    },
    {
        "id": "d76b89fea3b3511f",
        "type": "link in",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "in-q",
        "links": [
            "5c20d9e3f4361aa9",
            "bffe11eda272cf24"
        ],
        "x": 485,
        "y": 380,
        "wires": [
            [
                "7eb560b5c3a4cab1"
            ]
        ]
    },
    {
        "id": "fab7b4e4e51382e7",
        "type": "link in",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "start-all_node_get_next",
        "links": [
            "45f34c55d1865088"
        ],
        "x": 160,
        "y": 440,
        "wires": [
            [
                "f7b559c39a8a4937"
            ]
        ],
        "l": true
    },
    {
        "id": "f7b559c39a8a4937",
        "type": "function",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "get next",
        "func": "const q = flow.get('q');\nnode.send({ topic: q.ct, payload: \"drop\"})\nmsg.topic = q.ct\nmsg.payload = \"peek\"\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 440,
        "wires": [
            [
                "5c20d9e3f4361aa9"
            ]
        ]
    },
    {
        "id": "5c20d9e3f4361aa9",
        "type": "link out",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "end-all_node_get_next",
        "mode": "link",
        "links": [
            "d76b89fea3b3511f"
        ],
        "x": 700,
        "y": 440,
        "wires": [],
        "l": true
    },
    {
        "id": "98e816074884f3ab",
        "type": "status",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "q-status",
        "scope": [
            "7eb560b5c3a4cab1"
        ],
        "x": 120,
        "y": 500,
        "wires": [
            [
                "66a4803a3bc0c120"
            ]
        ]
    },
    {
        "id": "66a4803a3bc0c120",
        "type": "function",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "check if first in q",
        "func": "const statusText = msg.status.text;\nconst processing_tag = \"processing05\";\nlet processing = flow.get(processing_tag) || false;\nconst q = flow.get('q');\n\n// Dopasuj liczbƒô po \"queuing:\"\nconst match = statusText.match(/queuing:\\s*(\\d+)/);\n\nif (match) {\n    const queuingCount = parseInt(match[1], 10);\n    node.status({ fill: \"gray\", shape: \"ring\", text: queuingCount });\n    const timestamp = global.get(\"getDateTime\")();\n\n    // Ustaw status wƒôz≈Ça\n    node.status({\n        fill: queuingCount > 0 ? \"yellow\" : \"green\",\n        shape: \"dot\",\n        text: `${timestamp} | queuing: ${queuingCount}`\n    });\n\n    if (queuingCount == 0) {\n        flow.set(processing_tag, false);\n        msg.payload = \"end\";\n        node.status({ fill: \"gray\", shape: \"dot\", text: \"processing end\" });\n        return msg;\n    }\n\n\n\n    if (queuingCount > 0) {\n\n        if (!processing) {\n            flow.set(processing_tag, true);\n            msg.topic = q.ct;\n            msg.payload = \"peek\";\n            node.status({ fill: \"gray\", shape: \"dot\", text: \"od true\" });\n            return msg;\n        } else {\n            node.status({ fill: \"gray\", shape: \"dot\", text: \"od false\" });\n        }\n\n        // msg.payload = {\n        //     queuing: queuingCount,\n        //     time: timestamp, peek\n        //     rawStatus: statusText\n        // };\n        node.status({ fill: \"gray\", shape: \"dot\", text: processing });\n        // return msg;\n\n    } else {\n        node.status({ fill: \"green\", shape: \"dot\", text: \"processing ...\" });\n    }\n}\n\n// Je≈õli nie pasuje ‚Äì wyczy≈õƒá status i nic nie wysy≈Çaj\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"no match or queuing ‚â§ 1\" });\n// node.status({ fill: \"gray\", shape: \"ring\", text: match });\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 500,
        "wires": [
            [
                "cb758e32c8fde973"
            ]
        ]
    },
    {
        "id": "bffe11eda272cf24",
        "type": "link out",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "d76b89fea3b3511f"
        ],
        "x": 785,
        "y": 500,
        "wires": []
    },
    {
        "id": "76342c885c64be03",
        "type": "delay",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 500,
        "wires": [
            [
                "bffe11eda272cf24"
            ]
        ]
    },
    {
        "id": "cb758e32c8fde973",
        "type": "switch",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "peek",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "end",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 500,
        "wires": [
            [
                "76342c885c64be03"
            ],
            []
        ]
    },
    {
        "id": "6fdc192e553c1f08",
        "type": "function",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "q-config",
        "func": "msg.q = {\n    ct: \"control-umowy_get\",\n    list: msg.payload.list,\n}\n\nflow.set(\"q\", msg.q);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 180,
        "wires": [
            [
                "aeefc12bab89217d"
            ]
        ]
    },
    {
        "id": "8be11d0711271c4f",
        "type": "link out",
        "z": "8a595db6babaf80e",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "735f7d3bd2c17e95"
        ],
        "x": 935,
        "y": 80,
        "wires": []
    },
    {
        "id": "735f7d3bd2c17e95",
        "type": "link in",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "link in 1",
        "links": [
            "8be11d0711271c4f"
        ],
        "x": 75,
        "y": 180,
        "wires": [
            [
                "6fdc192e553c1f08"
            ]
        ]
    },
    {
        "id": "cc7083de28d2431d",
        "type": "link out",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "45ddc02187c0cca4"
        ],
        "x": 785,
        "y": 320,
        "wires": []
    },
    {
        "id": "b7688480.6338",
        "type": "inject",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "q.ct",
                "vt": "flow"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 610,
        "y": 380,
        "wires": [
            [
                "7eb560b5c3a4cab1"
            ]
        ]
    },
    {
        "id": "45ddc02187c0cca4",
        "type": "link in",
        "z": "8a595db6babaf80e",
        "g": "a27a260c5543dd9b",
        "name": "link in 2",
        "links": [
            "cc7083de28d2431d"
        ],
        "x": 75,
        "y": 620,
        "wires": [
            [
                "23bc26edc4890059"
            ]
        ]
    },
    {
        "id": "45f34c55d1865088",
        "type": "link out",
        "z": "8a595db6babaf80e",
        "g": "a27a260c5543dd9b",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "fab7b4e4e51382e7"
        ],
        "x": 1215,
        "y": 720,
        "wires": []
    },
    {
        "id": "adff4f876ee6b8db",
        "type": "function",
        "z": "8a595db6babaf80e",
        "g": "a27a260c5543dd9b",
        "name": "NocoDB:post:osoba",
        "func": "msg.nocodb_t_active = msg.nocodb_t.messages;\n\n// const uploadedFile = msg.payload[0];\n\nconst now = new Date();\nconst pad = (n) => n.toString().padStart(2, '0');\n\nconst year = now.getFullYear();\nconst month = pad(now.getMonth() + 1);\nconst day = pad(now.getDate());\nconst hours = pad(now.getHours());\nconst minutes = pad(now.getMinutes());\nconst seconds = pad(now.getSeconds());\n\nconst uuid = global.get(\"uuidv4\")();\n\n// Prepare the update payload for the record\nmsg.payload = {\n    \"name\": year+month+day+hours+minutes+seconds+\" confirm-email \" + msg.to,\n    \"status\": \"new\",\n    \"type\": \"email\",\n    \"msg_to\": msg.to,\n    \"msg_subject\": msg.subject,\n    \"msg_body\": msg.html,\n    uuid: msg.uuid\n};\nmsg.method = \"POST\";\n\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 620,
        "wires": [
            [
                "193521fa10b04844"
            ]
        ]
    },
    {
        "id": "193521fa10b04844",
        "type": "http request",
        "z": "8a595db6babaf80e",
        "g": "a27a260c5543dd9b",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 760,
        "y": 620,
        "wires": [
            [
                "7e71c160d6b3bdef"
            ]
        ]
    },
    {
        "id": "7e71c160d6b3bdef",
        "type": "function",
        "z": "8a595db6babaf80e",
        "g": "a27a260c5543dd9b",
        "name": "get:id:msg",
        "func": "msg.msg_id = msg.payload.Id\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 620,
        "wires": [
            [
                "21e185dded19e0ef"
            ]
        ]
    },
    {
        "id": "1438e47a6d3d8d47",
        "type": "http request",
        "z": "8a595db6babaf80e",
        "g": "a27a260c5543dd9b",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 620,
        "y": 720,
        "wires": [
            [
                "f4e3c0bd70abe439"
            ]
        ]
    },
    {
        "id": "ac8cbb807a19bde8",
        "type": "function",
        "z": "8a595db6babaf80e",
        "g": "a27a260c5543dd9b",
        "name": "NocoDB:patch:msg",
        "func": "msg.nocodb_t_active = msg.nocodb_t.messages;\nmsg.method = \"PATCH\";\n\n// Domy≈õlny status\nlet status = \"pending\";\n\n// Sprawdzenie p√≥l accepted/rejected\nif (msg.payload.accepted && msg.payload.accepted.length > 0) {\n    status = \"send\";\n} else if (msg.payload.rejected && msg.payload.rejected.length > 0) {\n    status = \"error\";\n}\n\nmsg.payload = {\n    Id: msg.msg_id,   // klucz podstawowy w Twojej tabeli\n    status: status\n};\n\n\nmsg.send_status = status;\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `${global.get(\"getDateTime\")()}`\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 720,
        "wires": [
            [
                "1438e47a6d3d8d47"
            ]
        ]
    },
    {
        "id": "7eb560b5c3a4cab1",
        "type": "q-gate",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "q-umowy_get",
        "controlTopic": "control-umowy_get",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "100",
        "keepNewest": false,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 640,
        "y": 320,
        "wires": [
            [
                "cc7083de28d2431d"
            ]
        ]
    },
    {
        "id": "21e185dded19e0ef",
        "type": "email-dynamic",
        "z": "8a595db6babaf80e",
        "g": "a27a260c5543dd9b",
        "name": "",
        "smtpServer": "",
        "smtpPort": "",
        "smtpUser": "",
        "smtpPass": "",
        "secure": false,
        "tlsRejectUnauthorized": false,
        "x": 160,
        "y": 720,
        "wires": [
            [
                "ac8cbb807a19bde8"
            ]
        ]
    },
    {
        "id": "f4e3c0bd70abe439",
        "type": "function",
        "z": "8a595db6babaf80e",
        "g": "a27a260c5543dd9b",
        "name": "umowa:status:patch",
        "func": "msg.nocodb_t_active = msg.nocodb_t.umowy;\nmsg.method = \"PATCH\";\n\nif ( msg.send_status == \"send\") {\n    \n    msg.payload = {\n        Id: msg.umowa.Id,   // klucz podstawowy w Twojej tabeli\n        status: \"03 email-send\"\n    };\n\n} else {\n\n    msg.payload = {\n        Id: msg.umowa.Id,   // klucz podstawowy w Twojej tabeli\n        status: \"02 email-send-error\"\n    };\n}\n\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `${global.get(\"getDateTime\")()}`\n});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 720,
        "wires": [
            [
                "7a0422b57c8d6b62"
            ]
        ]
    },
    {
        "id": "7a0422b57c8d6b62",
        "type": "http request",
        "z": "8a595db6babaf80e",
        "g": "a27a260c5543dd9b",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1080,
        "y": 720,
        "wires": [
            [
                "45f34c55d1865088"
            ]
        ]
    },
    {
        "id": "aeefc12bab89217d",
        "type": "function",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "up:status:new_to_queue",
        "func": "let rows = msg.payload.list;\n\nmsg.method = \"PATCH\";\nmsg.payload = rows.map(row => {\n    let singleMsg = {\n        \"Id\": row.Id,\n        \"status\": \"queue\"\n    };\n\n    return singleMsg;\n});\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 240,
        "wires": [
            [
                "e8a87fd21d80a914"
            ]
        ]
    },
    {
        "id": "e8a87fd21d80a914",
        "type": "http request",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 400,
        "y": 240,
        "wires": [
            [
                "2e4b1b679b6a73c1"
            ]
        ]
    },
    {
        "id": "2e4b1b679b6a73c1",
        "type": "function",
        "z": "8a595db6babaf80e",
        "g": "7918a80261c18fd1",
        "name": "NocoDB - analize save",
        "func": "if (msg.payload && msg.payload.length > 0) {\n    node.status({ fill: \"grey\", shape: \"ring\", text: `update rows: ${msg.payload.length}` });\n    msg.statusText = `update rows: ${msg.payload.length}`;\n    return msg;\n}\n\n\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"Brak danych\" });\nmsg.statusText = \"no records update\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 240,
        "wires": [
            [
                "ae66d354533891ae"
            ]
        ]
    },
    {
        "id": "292d42f2cac760e2",
        "type": "subflow:03b285947d86a284",
        "z": "bf6e5312884e6967",
        "name": "",
        "x": 300,
        "y": 60,
        "wires": [
            [
                "18d583dbe85332cc"
            ]
        ]
    },
    {
        "id": "570980b42d7a140f",
        "type": "inject",
        "z": "bf6e5312884e6967",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "292d42f2cac760e2"
            ]
        ]
    },
    {
        "id": "18d583dbe85332cc",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "NocoDB - umowy:get:05 email-confirmed",
        "func": "msg.nocodb_t_active = msg.nocodb_t.umowy;\n\nlet nr_k = msg.payload.nr_k;\n\nmsg.form_data = msg.payload;\n\nmsg.payload = {\n    offset: '0',\n    limit: '5',\n    viewId: msg.nocodb_t.umowy_view,\n    where: `(status,eq,05 email-confirmed)`,\n    \"nested[osoby][fields]\": \"*\",\n    \"nested[rejsy][fields]\": \"*\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 60,
        "wires": [
            [
                "fc912d421d472bc9"
            ]
        ]
    },
    {
        "id": "fc912d421d472bc9",
        "type": "http request",
        "z": "bf6e5312884e6967",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 880,
        "y": 60,
        "wires": [
            [
                "40a861699158bdb8"
            ]
        ]
    },
    {
        "id": "d3849b6988415d4c",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "crate:umowa",
        "func": "// Get required modules from global context (configured in settings.js)\nconst fs = global.get('fs');\nconst path = global.get('path');\nconst createReport = global.get('docx_templates').createReport;\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\n\n(async () => {\n    try {\n        const templatePath = msg.umowa.path_umowa_template;\n\n        if (!fs.existsSync(templatePath)) {\n            throw new Error(`Template nie istnieje: ${templatePath}`);\n        }\n\n        const template = fs.readFileSync(templatePath);\n        // const data = msg.umowa;\n\n        const data = {\n            ...msg.umowa,\n            barcodeImage: {\n                width: 4, // w centymetrach\n                height: 4,\n                data: msg.barcode_uuid,\n                extension: '.png'\n            }\n        };\n\n        console.log(\"Generowanie dokumentu...\");\n        const buffer = await createReport({\n            template,\n            data,\n            // cmdDelimiter: ['{', '}'],\n        });\n\n        msg.file_buffer = buffer;\n\n        const outputPath = msg.umowa.path_tmp + msg.umowa.umowa_name + \".docx\" ;\n        fs.writeFileSync(outputPath, buffer);\n\n        console.log(`Dokument zapisany: ${outputPath}`);\n        node.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n        node.send(msg);\n\n    } catch (error) {\n        console.error(\"B≈ÇƒÖd:\", error);\n        node.error(error.message, msg);\n    }\n})();",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 680,
        "wires": [
            [
                "0a915799cd0a9b38"
            ]
        ]
    },
    {
        "id": "13bd61d5d00e0938",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "prepare:umowa",
        "func": "function slowniePL(kwota) {\n    const jednostki = [\"\", \"jeden\", \"dwa\", \"trzy\", \"cztery\", \"piƒôƒá\", \"sze≈õƒá\", \"siedem\", \"osiem\", \"dziewiƒôƒá\"];\n    const nascie = [\"dziesiƒôƒá\", \"jedena≈õcie\", \"dwana≈õcie\", \"trzyna≈õcie\", \"czterna≈õcie\", \"piƒôtna≈õcie\", \"szesna≈õcie\", \"siedemna≈õcie\", \"osiemna≈õcie\", \"dziewiƒôtna≈õcie\"];\n    const dziesiatki = [\"\", \"\", \"dwadzie≈õcia\", \"trzydzie≈õci\", \"czterdzie≈õci\", \"piƒôƒádziesiƒÖt\", \"sze≈õƒádziesiƒÖt\", \"siedemdziesiƒÖt\", \"osiemdziesiƒÖt\", \"dziewiƒôƒádziesiƒÖt\"];\n    const setki = [\"\", \"sto\", \"dwie≈õcie\", \"trzysta\", \"czterysta\", \"piƒôƒáset\", \"sze≈õƒáset\", \"siedemset\", \"osiemset\", \"dziewiƒôƒáset\"];\n\n    const grupy = [\n        [\"\", \"\", \"\"],\n        [\"tysiƒÖc\", \"tysiƒÖce\", \"tysiƒôcy\"],\n        [\"milion\", \"miliony\", \"milion√≥w\"],\n        [\"miliard\", \"miliardy\", \"miliard√≥w\"]\n    ];\n\n    function odmiana(liczba, formy) {\n        if (liczba === 1) return formy[0];\n        if ([2, 3, 4].includes(liczba % 10) && !(liczba % 100 >= 10 && liczba % 100 <= 20)) return formy[1];\n        return formy[2];\n    }\n\n    function segment(n) {\n        const s = Math.floor(n / 100);\n        const d = Math.floor((n % 100) / 10);\n        const j = n % 10;\n\n        let wynik = [];\n\n        if (s) wynik.push(setki[s]);\n        if (d === 1) {\n            wynik.push(nascie[j]);\n        } else {\n            if (d > 1) wynik.push(dziesiatki[d]);\n            if (j > 0) wynik.push(jednostki[j]);\n        }\n\n        return wynik.join(\" \");\n    }\n\n    function liczbaNaSlowa(n) {\n        if (n === 0) return \"zero\";\n\n        let res = [];\n        let i = 0;\n\n        while (n > 0) {\n            let trzy = n % 1000;\n            if (trzy > 0) {\n                let seg = segment(trzy);\n                if (i > 0) {\n                    let formy = grupy[i];\n                    let odm = odmiana(trzy, formy);\n                    if (trzy === 1 && i === 1) {\n                        seg = odm; // tylko \"tysiƒÖc\", bez \"jeden\"\n                    } else {\n                        seg += \" \" + odm;\n                    }\n                }\n                res.unshift(seg);\n            }\n            n = Math.floor(n / 1000);\n            i++;\n        }\n\n        return res.join(\" \");\n    }\n\n    let zl = Math.floor(kwota);\n    let gr = Math.round((kwota - zl) * 100);\n\n    let wynik = liczbaNaSlowa(zl);// + \" z≈Çotych\";\n    if (gr > 0) {\n        wynik += \" i \" + liczbaNaSlowa(gr) + \" groszy\";\n    }\n\n    return wynik;\n}\n\n\nconst now = new Date();\nconst pad = (n) => n.toString().padStart(2, '0');\n\nconst year = now.getFullYear();\nconst month = pad(now.getMonth() + 1);\nconst day = pad(now.getDate());\nconst hours = pad(now.getHours());\nconst minutes = pad(now.getMinutes());\nconst seconds = pad(now.getSeconds());\n\nconst data_zawarcia = `${year}-${month}-${day}`;\n\nconst umowa = msg.umowa_get;\nconst rejs = umowa.rejsy;\nconst osoba = umowa.osoby;\n\nconst storage = global.get(\"storage\");\nconst path_template_umowy = global.get(\"path_template_umowy\");\nconst path_umowy = global.get(\"path_umowy\");\nconst path_tmp = global.get(\"path_tmp\")\n\nlet nr_umowa_new = parseInt(msg.umowa_ostatni_nr, 10) + 1;\n\nlet nr_umowy = msg.umowa_prefix + \"/\" + nr_umowa_new;\nlet nr_umowy_file = msg.umowa_prefix + \"-\" + nr_umowa_new;\nlet umowa_name = nr_umowy_file + `_${month}${day}${hours}${minutes}`  ;\n\nlet osoba_umieplywac = osoba.umie_plywac\n    ? \"posiada umiejƒôtno≈õƒá p≈Çywania wp≈Çaw\"\n    : \"nie posiada umiejƒôtno≈õci p≈Çywania wp≈Çaw\";\n\nlet is_nr_bank = \"\";\n\nif (rejs.cena_c == \"PLN\") {\n    is_nr_bank = `Numer rachunku PLN - ${msg.firma.nr_konta_pln}`;\n} else {\n    is_nr_bank = `Numer rachunku EUR - ${msg.firma.nr_konta_eur}`;\n}\n\nlet rata = true;\nlet kwota_platnosci = umowa.rezerwacja_cena_rata1;\nlet kwota_opcje_slownie = \"zadatku\"\n\nif (umowa.umowa_platnosc == \"full\") {\n    kwota_platnosci = umowa.rezerwacja_cena;\n    kwota_opcje_slownie = \"kwoty\";\n    rata = false;\n}\n\n// const lineBreak = '||<w:br/>||';\n\n// const ft = 'foo||<w:br/>||bar';\n// const ft2 = `Tu jeszce lepiej ${lineBreak}\n// mo≈ºe bƒôdzie ok i bez problemoo ${lineBreak}\n// asd niech bedzie ok `;\n\n// const multilineText = [\"Linia 1\", \"Linia 2\", \"Linia 3\"].join(\"||<w:br/>||\");\n// const ft2 = multilineText;\n\nmsg.umowa = {\n    \"nr_umowa_new\": nr_umowa_new,\n    \"umowa_year\": msg.umowa_prefix,\n    \"umowa_name\": umowa_name,\n    \"umowa_uuid\": umowa.uuid,\n    \"nr_umowy\": nr_umowy,\n    \"nr_umowy_file\": nr_umowy_file,\n    \"data_zawarcia\": data_zawarcia,\n    \"przelew_nazwa\": nr_umowy + \" \" + data_zawarcia,\n    \"path_umowa_template\": storage + path_template_umowy + rejs.umowa_template,\n    \"path_tmp\": storage + path_tmp,\n    \"path_umowa\": storage + path_umowy + msg.umowa_prefix + \"/\" + nr_umowa_new + \"/\",\n    \"imie\": osoba.imie,\n    \"imie_nazwisko\": osoba.imie + \" \" + osoba.nazwisko,\n    \"adres_zamieszkania\": osoba.adres_zamieszkania,\n    \"data_i_miejsce_urodzenia\": osoba.data_urodzenia + \" \" + osoba.miejsce_urodzenia,\n    \"email\": osoba.email,\n    \"nr_telefonu\": osoba.telefon,\n    \"nr_dokumentu\": osoba.nr_dowodu,\n    \"stopien\": osoba.uprawnienia,\n    \"rozmiar_koszulki\": osoba.rozmiar_koszulki,\n    \"eme_osoba\": osoba.eme_contact,\n    \"umowa_przedmiot\": rejs.umowa_przedmiot,\n    \"termin_od\": rejs.termin_od,\n    \"termin_do\": rejs.termin_do,\n    \"port_start\": rejs.port_start,\n    \"port_koniec\": rejs.port_koniec,\n    \"port_start_czas\": rejs.port_start_time,\n    \"port_koniec_czas\": rejs.port_koniec_time,\n    \"cena\": rejs.cena,\n    \"cena_c\": rejs.cena_c,\n    \"cena_slownie\": slowniePL(rejs.cena),\n    \"rezerwacja_ilosc\": umowa.ile_osob,\n    \"rezerwacja_ilosc_slownie\": slowniePL(umowa.ile_osob),\n    \"rezerwacja_cena\": umowa.rezerwacja_cena,\n    \"rezerwacja_cena_slownie\": slowniePL(umowa.rezerwacja_cena),\n    \"rezerwacja_cena_rata1\": umowa.rezerwacja_cena_rata1,\n    \"rezerwacja_cena_rata1_slownie\": slowniePL(umowa.rezerwacja_cena_rata1),\n    \"rezerwacja_cena_rata2\": umowa.rezerwacja_cena_rata2,\n    \"cena_wydatki\": rejs.cena_wydatki,\n    \"cena_wydatki_c\": rejs.cena_wydatki_c,\n    \"cena_zaokretowania\": rejs.cena_zaokretowania,\n    \"cena_zaokretowania_c\": rejs.cena_zaokretowania_c,\n    \"cena_wyzywienie\": rejs.cena_wyzywienie,\n    \"cena_wyzywienie_c\": rejs.cena_wyzywienie_c,\n    \"uuid\": umowa.uuid,\n    \"umie_plywac\": osoba_umieplywac,\n    \"czym\": rejs.czym,  \n    \"is_nr_bank\": is_nr_bank,\n    \"armator\": rejs.armator,\n    \"rata\": rata,\n    \"kwota_platnosci\": kwota_platnosci,\n    \"kwota_platnosci_slownie\": slowniePL(kwota_platnosci),\n    \"kwota_opcje_slownie\": kwota_opcje_slownie\n}\n\nfor (const [key, value] of Object.entries(msg.firma || {})) {\n    msg.umowa[\"firma_\" + key] = value;\n}\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 680,
        "wires": [
            [
                "1fecc97559a778e5"
            ]
        ]
    },
    {
        "id": "52a11ea9f254b4c4",
        "type": "exec",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "command": "libreoffice --headless --convert-to pdf ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Docx to PDF",
        "x": 1090,
        "y": 680,
        "wires": [
            [],
            [],
            [
                "3b722634e39a14c5"
            ]
        ]
    },
    {
        "id": "0a915799cd0a9b38",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "path with space",
        "func": "// msg.payload = msg.payload.replace(/ /g, \"\\\\ \");\n// msg.payload += ` ${flow.get(\"storage\")}/tmp/pdf/output`;\n\nconst source_file = `${msg.umowa.path_tmp}${msg.umowa.umowa_name}.docx`;\nconst dest_file = `${msg.umowa.path_umowa}`; \n\nmsg.payload = `${source_file} --outdir ${dest_file}`;\n\nmsg.topic = \"docx_to_pdf\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 680,
        "wires": [
            [
                "52a11ea9f254b4c4"
            ]
        ]
    },
    {
        "id": "3b722634e39a14c5",
        "type": "switch",
        "z": "bf6e5312884e6967",
        "name": "",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 800,
        "wires": [
            [
                "a1f0d6f7e579f70e"
            ],
            []
        ]
    },
    {
        "id": "9060eb281e8a08fd",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "separate records",
        "func": "let rows = msg.q.list;\n\nmsg.payload = rows.map(row => {\n    let singleMsg = RED.util.cloneMessage(msg); // duplikujemy oryginalny msg\n    singleMsg.payload = row;\n    return singleMsg;\n});\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn [msg.payload]; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "6cb48eeb5107a8f1"
            ]
        ]
    },
    {
        "id": "740bedaaa777e92b",
        "type": "link in",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "in-q",
        "links": [
            "1252c9d2ad0609b6",
            "4354c87c6902235f"
        ],
        "x": 485,
        "y": 220,
        "wires": [
            [
                "6cb48eeb5107a8f1"
            ]
        ]
    },
    {
        "id": "6cb48eeb5107a8f1",
        "type": "q-gate",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "q-umowy_05",
        "controlTopic": "control-umowy_05",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "100",
        "keepNewest": false,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 160,
        "wires": [
            [
                "126789e8f3f95b0a"
            ]
        ]
    },
    {
        "id": "c812b3aa228e12af",
        "type": "link in",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "start-all_node_get_next",
        "links": [
            "c9e62eaccd0241cc"
        ],
        "x": 160,
        "y": 280,
        "wires": [
            [
                "34e95e5fe4edecc3"
            ]
        ],
        "l": true
    },
    {
        "id": "34e95e5fe4edecc3",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "get next",
        "func": "const q = flow.get('q');\nnode.send({ topic: q.ct, payload: \"drop\"})\nmsg.topic = q.ct\nmsg.payload = \"peek\"\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 280,
        "wires": [
            [
                "1252c9d2ad0609b6"
            ]
        ]
    },
    {
        "id": "1252c9d2ad0609b6",
        "type": "link out",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "end-all_node_get_next",
        "mode": "link",
        "links": [
            "740bedaaa777e92b"
        ],
        "x": 700,
        "y": 280,
        "wires": [],
        "l": true
    },
    {
        "id": "69bf6a3b91382b0d",
        "type": "status",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "q-status",
        "scope": [
            "6cb48eeb5107a8f1"
        ],
        "x": 120,
        "y": 340,
        "wires": [
            [
                "549eea8a4e59e3f1"
            ]
        ]
    },
    {
        "id": "549eea8a4e59e3f1",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "check if first in q",
        "func": "const statusText = msg.status.text;\nconst processing_tag = \"processing05\";\nlet processing = flow.get(processing_tag) || false;\nconst q = flow.get('q');\n\n// Dopasuj liczbƒô po \"queuing:\"\nconst match = statusText.match(/queuing:\\s*(\\d+)/);\n\nif (match) {\n    const queuingCount = parseInt(match[1], 10);\n    node.status({ fill: \"gray\", shape: \"ring\", text: queuingCount });\n    const timestamp = global.get(\"getDateTime\")();\n\n    // Ustaw status wƒôz≈Ça\n    node.status({\n        fill: queuingCount > 0 ? \"yellow\" : \"green\",\n        shape: \"dot\",\n        text: `${timestamp} | queuing: ${queuingCount}`\n    });\n\n    if (queuingCount == 0) {\n        flow.set(processing_tag, false);\n        msg.payload = \"end\";\n        node.status({ fill: \"gray\", shape: \"dot\", text: \"processing end\"  });\n        return msg;\n    }\n\n    \n        \n        if (queuingCount > 0) {\n\n            if (!processing) {\n                flow.set(processing_tag, true);\n                msg.topic = q.ct;\n                msg.payload = \"peek\";\n                node.status({ fill: \"gray\", shape: \"dot\", text: \"od true\" });\n                return msg;\n            } else {\n                node.status({ fill: \"gray\", shape: \"dot\", text: \"od false\" });\n            }\n\n            // msg.payload = {\n            //     queuing: queuingCount,\n            //     time: timestamp, peek\n            //     rawStatus: statusText\n            // };\n            node.status({ fill: \"gray\", shape: \"dot\", text: processing });\n            // return msg;\n        \n    } else {\n        node.status({ fill: \"green\", shape: \"dot\", text: \"processing ...\" });\n    }\n}\n\n// Je≈õli nie pasuje ‚Äì wyczy≈õƒá status i nic nie wysy≈Çaj\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"no match or queuing ‚â§ 1\" });\n// node.status({ fill: \"gray\", shape: \"ring\", text: match });\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 340,
        "wires": [
            [
                "0f65c44103db53d1"
            ]
        ]
    },
    {
        "id": "4354c87c6902235f",
        "type": "link out",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "740bedaaa777e92b"
        ],
        "x": 785,
        "y": 340,
        "wires": []
    },
    {
        "id": "8ec1b4bdf3c43882",
        "type": "delay",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 340,
        "wires": [
            [
                "4354c87c6902235f"
            ]
        ]
    },
    {
        "id": "0f65c44103db53d1",
        "type": "switch",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "peek",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "end",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 340,
        "wires": [
            [
                "8ec1b4bdf3c43882"
            ],
            []
        ]
    },
    {
        "id": "17eea626cf58a195",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "q-config",
        "func": "msg.q = {\n    ct: \"control-umowy_05\",\n    list: msg.payload.list,\n}\n\nflow.set(\"q\", msg.q);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 160,
        "wires": [
            [
                "9060eb281e8a08fd"
            ]
        ]
    },
    {
        "id": "165d3ba2dd0b69a5",
        "type": "link in",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "link in 3",
        "links": [
            "40a861699158bdb8"
        ],
        "x": 75,
        "y": 160,
        "wires": [
            [
                "17eea626cf58a195"
            ]
        ]
    },
    {
        "id": "126789e8f3f95b0a",
        "type": "link out",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "6bcfc63a363a2ab7"
        ],
        "x": 785,
        "y": 160,
        "wires": []
    },
    {
        "id": "70c29e09ef47dbdc",
        "type": "inject",
        "z": "bf6e5312884e6967",
        "g": "4f2350069ea4f77b",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "q.ct",
                "vt": "flow"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 650,
        "y": 220,
        "wires": [
            [
                "6cb48eeb5107a8f1"
            ]
        ]
    },
    {
        "id": "40a861699158bdb8",
        "type": "link out",
        "z": "bf6e5312884e6967",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "165d3ba2dd0b69a5"
        ],
        "x": 1025,
        "y": 60,
        "wires": []
    },
    {
        "id": "6bcfc63a363a2ab7",
        "type": "link in",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "link in 4",
        "links": [
            "126789e8f3f95b0a"
        ],
        "x": 75,
        "y": 440,
        "wires": [
            [
                "2f8f8edda548213e"
            ]
        ]
    },
    {
        "id": "c9e62eaccd0241cc",
        "type": "link out",
        "z": "bf6e5312884e6967",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "c812b3aa228e12af"
        ],
        "x": 1415,
        "y": 1760,
        "wires": []
    },
    {
        "id": "51b64a89d353dc95",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "email:template:umowa-email",
        "func": "const content = msg.payload; //file data\n\nconst fs = global.get('fs');\nconst path = global.get('path');\n\n// ≈öcie≈ºki do plik√≥w (dostosuj wed≈Çug potrzeb)\nconst htmlPath = global.get('storage') + \"/teamplates/html/email_umowa.html\";\nconst cssPath = global.get('storage') + \"/teamplates/html/email-style.css\";\n\nlet html = fs.readFileSync(htmlPath, \"utf8\");\nconst css = fs.readFileSync(cssPath, \"utf8\");\n\n\n\nconst formdata = {\n    \"osoba_name\": msg.umowa.imie,\n    \"umowa_przedmiot\": msg.umowa.umowa_przedmiot,\n    \"termin_od\": msg.umowa.termin_od,\n    \"termin_do\": msg.umowa.termin_do,\n    \"nr_umowy\": msg.umowa.nr_umowy,\n    \"rezerwacja_cena_rata1\": msg.umowa.rezerwacja_cena_rata1, \n    \"przelew_nazwa\": msg.umowa.przelew_nazwa,\n    \"uuid\": msg.umowa_get.uuid,\n    \"cena_c\": msg.umowa.cena_c,\n    kwota_platnosci: msg.umowa.kwota_platnosci,\n}   \n\n// Wstawienie stylu inline w miejsce <link rel=\"stylesheet\"...>\nhtml = html.replace(\n    /<link\\s+rel=[\"']stylesheet[\"']\\s+href=[\"'][^\"']+[\"']\\s*\\/?>/,\n    `<style>\\n${css}\\n</style>`\n);\n\nlet is_pln_qr_code = \"\";\nlet is_nr_bank = \"\";\n\nif (formdata.cena_c == \"PLN\") {\n    is_nr_bank = `Numer rachunku PLN - <strong>${msg.firma.nr_konta_pln}</strong><br>`;\n    is_pln_qr_code = \"<p>Jeszcze przygotowa≈Çem dla Ciebie u≈Çatwienie je≈ºeli u≈ºywasz aplikacji mobilnej banku. Mo≈ºesz zeskanowaƒá qrcode i wszystkie dane siƒô uzupe≈ÇniƒÖ samoistnie.</p><p><img src=\\\"cid:barcode.png\\\" alt=\\\"QR Code do przelewu\\\" class=\\\"qr-code\\\"></p>\"\n} else {\n    is_nr_bank = `Numer rachunku EUR - <strong>${msg.firma.nr_konta_eur}</strong><br>`;\n}\n\n// Zamiana znacznik√≥w {{...}} dynamicznie z msg.payload\nhtml = html\n    .replace(/{{osoba_name}}/g, formdata.osoba_name)\n    .replace(/{{umowa_przedmiot}}/g, formdata.umowa_przedmiot)\n    .replace(/{{termin_od}}/g, formdata.termin_od)\n    .replace(/{{termin_do}}/g, formdata.termin_do)\n    .replace(/{{nr_umowy}}/g, formdata.nr_umowy)\n    .replace(/{{rezerwacja_cena_rata1}}/g, formdata.rezerwacja_cena_rata1)\n    .replace(/{{przelew_nazwa}}/g, formdata.przelew_nazwa)\n    .replace(/{{uuid}}/g, formdata.uuid)\n    .replace(/{{firma_nr_konta_pln}}/g, msg.firma.nr_konta_pln)\n    .replace(/{{firma_nr_konta_eur}}/g, msg.firma.nr_konta_eur)\n    .replace(/{{firma_bank}}/g, msg.firma.bank)\n    .replace(/{{cena_c}}/g, formdata.cena_c)\n    .replace(/{{is_pln_qr_code}}/g, is_pln_qr_code)\n    .replace(/{{is_nr_bank}}/g, is_nr_bank)\n    .replace(/{{kwota_platnosci}}/g, formdata.kwota_platnosci)\n    ;\n\n\n\nmsg.payload = html;\nmsg.to = `${msg.umowa.email}`;\n// msg.from = \"kwatermistrz@zenflowai.net\";\nmsg.from = msg.smtp.auth.user;\nmsg.subject = `Umowa Rejsu - ${msg.umowa.nr_umowy} - Kapitan Bastek`;\nmsg.headers = {\n    \"Content-Type\": \"text/html\"\n};\n\nif (formdata.cena_c == \"PLN\") {\n    msg.attachments = [\n    {\n        \"filename\": msg.umowa_pdf_file_name,\n        \"content\": content,\n        // \"encoding\": \"base64\"\n    }, {\n        filename: \"barcode.png\",\n        content: msg.barcode,\n        encoding: \"base64\",\n        cid: \"barcode.png\"\n    }\n    ];\n} else {\n    msg.attachments = [\n    {\n        \"filename\": msg.umowa_pdf_file_name,\n        \"content\": content,\n        // \"encoding\": \"base64\"\n    }];\n}\n\nmsg.html = html;\nmsg.umowa_pdf_binary = content;\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1460,
        "wires": [
            [
                "0acbe55c9c85d051"
            ]
        ]
    },
    {
        "id": "0acbe55c9c85d051",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "NocoDB:post:osoba",
        "func": "msg.nocodb_t_active = msg.nocodb_t.messages;\n\n// const uploadedFile = msg.payload[0];\n\nconst now = new Date();\nconst pad = (n) => n.toString().padStart(2, '0');\n\nconst year = now.getFullYear();\nconst month = pad(now.getMonth() + 1);\nconst day = pad(now.getDate());\nconst hours = pad(now.getHours());\nconst minutes = pad(now.getMinutes());\nconst seconds = pad(now.getSeconds());\n\nconst uuid = global.get(\"uuidv4\")();\n\n// Prepare the update payload for the record\nmsg.payload = {\n    \"name\": year+month+day+hours+minutes+seconds+\" email-umowa \" + msg.to,\n    \"status\": \"new\",\n    \"type\": \"email\",\n    \"msg_to\": msg.to,\n    \"msg_subject\": msg.subject,\n    \"msg_body\": msg.html,\n    uuid: msg.uuid,\n    \"path_attachment\": msg.umowa_pdf_file\n};\nmsg.method = \"POST\";\n\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1460,
        "wires": [
            [
                "7aef1045a90da312"
            ]
        ]
    },
    {
        "id": "7aef1045a90da312",
        "type": "http request",
        "z": "bf6e5312884e6967",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 700,
        "y": 1460,
        "wires": [
            [
                "b960958154a1f87a"
            ]
        ]
    },
    {
        "id": "b960958154a1f87a",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "get:id:msg",
        "func": "msg.msg_id = msg.payload.Id\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1460,
        "wires": [
            [
                "058bdbf2af7b05e9"
            ]
        ]
    },
    {
        "id": "058bdbf2af7b05e9",
        "type": "email-dynamic",
        "z": "bf6e5312884e6967",
        "name": "",
        "smtpServer": "",
        "smtpPort": "",
        "smtpUser": "",
        "smtpPass": "",
        "secure": false,
        "tlsRejectUnauthorized": false,
        "x": 160,
        "y": 1560,
        "wires": [
            [
                "4c3b30ac86632a0d"
            ]
        ]
    },
    {
        "id": "4c3b30ac86632a0d",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "NocoDB:patch:msg",
        "func": "msg.nocodb_t_active = msg.nocodb_t.messages;\nmsg.method = \"PATCH\";\n\n// Domy≈õlny status\nlet status = \"pending\";\n\n// Sprawdzenie p√≥l accepted/rejected\nif (msg.payload.accepted && msg.payload.accepted.length > 0) {\n    status = \"send\";\n} else if (msg.payload.rejected && msg.payload.rejected.length > 0) {\n    status = \"error\";\n}\n\nmsg.payload = {\n    Id: msg.msg_id,   // klucz podstawowy w Twojej tabeli\n    status: status\n};\n\n\nmsg.send_status = status;\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `${global.get(\"getDateTime\")()}`\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1560,
        "wires": [
            [
                "febfbd1ef9c92d1c"
            ]
        ]
    },
    {
        "id": "febfbd1ef9c92d1c",
        "type": "http request",
        "z": "bf6e5312884e6967",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 700,
        "y": 1560,
        "wires": [
            [
                "062bae33bf60cb6c"
            ]
        ]
    },
    {
        "id": "161a06cfe1ee8836",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "umowa_prefix:get",
        "func": "msg.queue = {};\nmsg.queue.kind = \"umowa_prefix\";\nmsg.queue.uuid = \"global\"\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 440,
        "wires": [
            [
                "679891f5bf1fd8b1"
            ]
        ]
    },
    {
        "id": "fabd68f3c6a6f304",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "set:umowa_prefix",
        "func": "msg.umowa_prefix = msg.payload.status;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 440,
        "wires": [
            [
                "96662476f8736be1"
            ]
        ]
    },
    {
        "id": "2f8f8edda548213e",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "set:umowa",
        "func": "msg.umowa_get = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 440,
        "wires": [
            [
                "161a06cfe1ee8836"
            ]
        ]
    },
    {
        "id": "96662476f8736be1",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "umowa_ostatni_nr:get",
        "func": "msg.queue = {};\nmsg.queue.kind = \"umowa_ostatni_nr\";\nmsg.queue.uuid = \"global\"\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 500,
        "wires": [
            [
                "f18e7a8383d8e549"
            ]
        ]
    },
    {
        "id": "a21d790e0cbd5b6d",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "set:umowa_ostatni_nr",
        "func": "msg.umowa_ostatni_nr = msg.payload.status;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 500,
        "wires": [
            [
                "1ff02bacb793d1c6"
            ]
        ]
    },
    {
        "id": "679891f5bf1fd8b1",
        "type": "subflow:7a14c201fa805842",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "",
        "x": 690,
        "y": 440,
        "wires": [
            [
                "fabd68f3c6a6f304"
            ]
        ]
    },
    {
        "id": "f18e7a8383d8e549",
        "type": "subflow:7a14c201fa805842",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "",
        "x": 690,
        "y": 500,
        "wires": [
            [
                "a21d790e0cbd5b6d"
            ]
        ]
    },
    {
        "id": "a1f0d6f7e579f70e",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "nr_umowa_new:store",
        "func": "msg.queue = {};\nmsg.queue.kind = \"umowa_ostatni_nr\";\nmsg.queue.status = msg.umowa.nr_umowa_new;\nmsg.queue.uuid = \"global\"\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1080,
        "wires": [
            [
                "33673f59dfd60c47"
            ]
        ]
    },
    {
        "id": "33673f59dfd60c47",
        "type": "subflow:c977f243f2f9f757",
        "z": "bf6e5312884e6967",
        "name": "",
        "x": 520,
        "y": 1080,
        "wires": [
            [
                "61e0ecd738d36065"
            ]
        ]
    },
    {
        "id": "61e0ecd738d36065",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "umowa:status:07 generate-contract",
        "func": "msg.nocodb_t_active = msg.nocodb_t.umowy;\nmsg.method = \"PATCH\";\n\nmsg.payload = {\n    Id: msg.umowa_get.Id,   // klucz podstawowy w Twojej tabeli\n    status: \"07 generate-contract\",\n    umowa_data: msg.umowa.data_zawarcia,\n    umowa_nr: msg.umowa.nr_umowa_new,\n    umowa_year: msg.umowa.umowa_year,\n    nazwa: msg.umowa.nr_umowy\n};\n\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `${global.get(\"getDateTime\")()}`\n});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1140,
        "wires": [
            [
                "c46a8bb69158d40f"
            ]
        ]
    },
    {
        "id": "c46a8bb69158d40f",
        "type": "http request",
        "z": "bf6e5312884e6967",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 500,
        "y": 1140,
        "wires": [
            [
                "049ea2e3b06585d6"
            ]
        ]
    },
    {
        "id": "41d85efdfdc2b98b",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "umowa:status:10 send-contract",
        "func": "msg.nocodb_t_active = msg.nocodb_t.umowy;\nmsg.method = \"PATCH\";\n\nconst uploadedFile = msg.payload[0];\n\nmsg.payload = {\n    Id: msg.umowa_get.Id,   // klucz podstawowy w Twojej tabeli\n    status: \"10 send-contract\",\n    path_umowa_orginalna: msg.umowa_pdf_file,\n    \"umowa_orginalna_file\": JSON.stringify([{\n        path: uploadedFile.path,\n        title: uploadedFile.title,\n        mimetype: uploadedFile.mimetype,\n        size: uploadedFile.size,\n    }])\n};\n\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `${global.get(\"getDateTime\")()}`\n});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1800,
        "wires": [
            [
                "37d6a6fc56adeb94",
                "cff26d82490c14be"
            ]
        ]
    },
    {
        "id": "37d6a6fc56adeb94",
        "type": "http request",
        "z": "bf6e5312884e6967",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 520,
        "y": 1760,
        "wires": [
            [
                "c9e62eaccd0241cc"
            ]
        ]
    },
    {
        "id": "02b3a0849da54985",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "rejs:ilosc_wyk:ilosc_osob",
        "func": "msg.nocodb_t_active = msg.nocodb_t.rejsy;\nmsg.method = \"PATCH\";\nmsg.rejs = msg.payload.list[0];\nconst wyk = parseInt(msg.payload.list[0].ilosc_wyk, 10) + parseInt(msg.umowa_get.ile_osob,10);\n\nmsg.payload = {\n    Id: msg.umowa_get.rejsy.Id,   // klucz podstawowy w Twojej tabeli\n    // status: \"07 generate-contract\",\n    // data_umowy: msg.umowa.data_umowy,\n    // nazwa: msg.umowa.nr_umowy\n    ilosc_wyk: wyk\n};\n\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `${global.get(\"getDateTime\")()}`\n});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1260,
        "wires": [
            [
                "ab612e25bc9c7b5c"
            ]
        ]
    },
    {
        "id": "ab612e25bc9c7b5c",
        "type": "http request",
        "z": "bf6e5312884e6967",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 500,
        "y": 1260,
        "wires": [
            [
                "a7a91fd27a16e6b0"
            ]
        ]
    },
    {
        "id": "049ea2e3b06585d6",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "rejsy:get",
        "func": "msg.nocodb_t_active = msg.nocodb_t.rejsy;\n\ndelete msg.heders;\ndelete msg.method;\n\nmsg.payload = {\n    offset: '0',\n    limit: '1',\n    viewId: msg.nocodb_t.rejsy_view,\n    where: `(Id,eq,${msg.umowa_get.rejsy.Id})`,\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1200,
        "wires": [
            [
                "00b5780bd9649ba1"
            ]
        ]
    },
    {
        "id": "00b5780bd9649ba1",
        "type": "http request",
        "z": "bf6e5312884e6967",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 520,
        "y": 1200,
        "wires": [
            [
                "02b3a0849da54985"
            ]
        ]
    },
    {
        "id": "7e10311e09146278",
        "type": "file in",
        "z": "bf6e5312884e6967",
        "name": "",
        "filename": "umowa_pdf_file",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 1400,
        "wires": [
            [
                "51b64a89d353dc95"
            ]
        ]
    },
    {
        "id": "9f1f4e5acee212da",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "read:attachment",
        "func": "msg.umowa_pdf_file = msg.umowa.path_umowa + msg.umowa.umowa_name + \".pdf\";\nmsg.umowa_pdf_file_name = msg.umowa.umowa_name + \".pdf\";\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1400,
        "wires": [
            [
                "7e10311e09146278"
            ]
        ]
    },
    {
        "id": "a7a91fd27a16e6b0",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "qrcode:prepare:",
        "func": "const bwipjs = global.get('bwip-js');\nconst fs = global.get('fs');\nconst path = global.get('path');\n\n// Funkcja pomocnicza do daty w formacie: YYYYMMDDHHMMSS\nconst getTimestamp = () => {\n    const now = new Date();\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${now.getFullYear()}${pad(now.getMonth() + 1)}${pad(now.getDate())}${pad(now.getHours())}${pad(now.getMinutes())}${pad(now.getSeconds())}`;\n};\n\nlet kwota_platnosci = msg.umowa.rezerwacja_cena_rata1;\n\nif (msg.umowa.umowa_platnosc == \"full\") {\n    kwota_platnosci = msg.umowa.rezerwacja_cena;\n}\n\n\nfunction generateQRText(msg) {\n    const NIP = \"5671906227\";  // <- Uzupe≈Çnij prawdziwym NIP-em odbiorcy\n    const account_number = \"02116022020000000371435981\"; // <- 26 cyfr\n    const account_number_clean = account_number.replace(/\\s/g, '');\n\n    const kwota_grosze = (kwota_platnosci || 0) * 100;\n    const kwota_string = kwota_grosze.toFixed(0).padStart(6, '0'); // 6 cyfr z zerami wiodƒÖcymi\n\n    const odbiorca_nazwa = \"K&S Transport Sp. z o.o.\";  // <- max 20 znak√≥w\n    const tytul = (msg.umowa.przelew_nazwa || \"\").substring(0, 32); // max 32 znaki\n\n    const fields = [\n        NIP,\n        \"PL\",\n        account_number_clean,\n        kwota_string,\n        odbiorca_nazwa.substring(0, 20),\n        tytul,\n        \"\", \"\", \"\" // rezerwa1, rezerwa2, rezerwa3\n    ];\n\n    return fields.join(\"|\");\n}\n\nconst path_storage = global.get(\"storage\");\n// global.set(\"path_template_umowy\", \"teamplates/umowy/\")\nconst path_umowy = global.get(\"path_umowy\");\n// global.set(\"path_tmp\", \"tmp/\")\n\n// Tworzymy unikalnƒÖ nazwƒô pliku\nconst filename = `rata1.png`;\nconst filepath = `${path_storage}${path_umowy}/${msg.umowa.umowa_year}/${msg.umowa.nr_umowa_new}/${filename}`;\nconst textbarcode = generateQRText(msg);\n\nbwipjs.toBuffer({\n    bcid: 'qrcode',\n    text: textbarcode,\n    scale: 3,\n    // height: 4,\n    includetext: true,\n    textxalign: 'center',\n}, function (err, png) {\n    if (err) {\n        node.error(\"B≈ÇƒÖd generowania barcode\", err);\n    } else {\n        fs.writeFileSync(filepath, png);\n\n        msg.barcode = png.toString('base64');\n        msg.barcode_filename = filename;\n        msg.barcode_path = filepath;\n        msg.barcode_mime = \"image/png\";\n\n        return node.send(msg);\n    }\n});\n\n// return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1340,
        "wires": [
            [
                "9f1f4e5acee212da"
            ]
        ]
    },
    {
        "id": "1fecc97559a778e5",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "qrcode:prepare:uuid",
        "func": "const bwipjs = global.get('bwip-js');\nconst fs = global.get('fs');\nconst path = global.get('path');\n\n// Funkcja pomocnicza do daty w formacie: YYYYMMDDHHMMSS\nconst getTimestamp = () => {\n    const now = new Date();\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${now.getFullYear()}${pad(now.getMonth() + 1)}${pad(now.getDate())}${pad(now.getHours())}${pad(now.getMinutes())}${pad(now.getSeconds())}`;\n};\n\nconst path_storage = global.get(\"storage\");\nconst path_umowy = global.get(\"path_umowy\");\n\nconst filename = `uuid-qrcode.png`;\nconst filepath = `${path_storage}${path_umowy}${msg.umowa.umowa_year}/${msg.umowa.nr_umowa_new}/${filename}`;\n// const textbarcode = msg.umowa_get.uuid;\nconst textbarcode = msg.umowa.umowa_year + \"/\" + msg.umowa.nr_umowa_new;\nnode.status({ fill: \"blue\", shape: \"dot\", text: textbarcode });\n\nconst folderPath = `${path_storage}${path_umowy}${msg.umowa.umowa_year}/${msg.umowa.nr_umowa_new}`;\nif (!fs.existsSync(folderPath)) {\n    fs.mkdirSync(folderPath, { recursive: true });\n}\n\nbwipjs.toBuffer({\n    bcid: 'qrcode',\n    text: textbarcode,\n    scale: 3,\n    // height: 4,\n    includetext: false,\n    textxalign: 'center',\n}, function (err, png) {\n    if (err) {\n        node.error(\"B≈ÇƒÖd generowania barcode\", err);\n        node.status({ fill: \"red\", shape: \"dot\", text: err });\n    } else {\n        fs.writeFileSync(filepath, png);\n\n        msg.barcode_uuid = png.toString('base64');\n        msg.barcode_uuid_filename = filename;\n        msg.barcode_uuid_path = filepath;\n        msg.barcode_uuid_mime = \"image/png\";\n        //\n        node.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n        node.send(msg);\n        // return msg;\n    }\n});\n\n// return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 680,
        "wires": [
            [
                "d3849b6988415d4c",
                "b2b180a1019e82fa"
            ]
        ]
    },
    {
        "id": "1ff02bacb793d1c6",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "NocoDB - firma:get:info",
        "func": "msg.nocodb_t_active = msg.nocodb_t.app_queue;\n\nmsg.payload = {\n    offset: '0',\n    limit: '25',\n    viewId: msg.nocodb_t.app_queue_view,\n    where: `(uuid,eq,firma)`\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 560,
        "wires": [
            [
                "1cc46f27e4be9bb2"
            ]
        ]
    },
    {
        "id": "1cc46f27e4be9bb2",
        "type": "http request",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 680,
        "y": 560,
        "wires": [
            [
                "56c829dbe109bbdc"
            ]
        ]
    },
    {
        "id": "56c829dbe109bbdc",
        "type": "function",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "set:firma:data",
        "func": "const lista = msg.payload.list;\nconst firma = {};\n\nfor (let i = 0; i < lista.length; i++) {\n    const el = lista[i];\n    if (el.uuid === \"firma\") {\n        firma[el.kind] = el.status;\n    }\n}\n\nmsg.firma = firma;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 560,
        "wires": [
            [
                "13bd61d5d00e0938"
            ]
        ]
    },
    {
        "id": "cff26d82490c14be",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "msg:telegram",
        "func": "const template_data = {\n    rejs_name: msg.rejs.nazwa,\n    umowa_nr: msg.umowa.nr_umowy\n};\n\nmsg.message = {\n    template_in_row: \"Umowa o nr *{{umowa_nr}}* na **rejs**: *{{rejs_name}}* zosta≈Ça wys≈Çana.  \",\n    template_data: template_data,\n    kind: \"telegram\",\n    to_group: \"admin\",\n    to: \"admin\",\n\n    // to: msg.payload.value  // np. \"234242,23424234,24\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1820,
        "wires": [
            [
                "0944d6334829fb66"
            ]
        ]
    },
    {
        "id": "0944d6334829fb66",
        "type": "link out",
        "z": "bf6e5312884e6967",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "b38c6c11d0212c18"
        ],
        "x": 745,
        "y": 1820,
        "wires": []
    },
    {
        "id": "062bae33bf60cb6c",
        "type": "function",
        "z": "bf6e5312884e6967",
        "name": "to:up:file",
        "func": "msg.payload = {\n    file: {\n        value: msg.umowa_pdf_binary,  // The Buffer from the read file node\n        options: {\n            filename: msg.umowa_pdf_file_name,\n            contentType: 'application/pdf'\n        }\n    }\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1680,
        "wires": [
            [
                "8b054a622228d1b6"
            ]
        ]
    },
    {
        "id": "8b054a622228d1b6",
        "type": "http request",
        "z": "bf6e5312884e6967",
        "name": "NocoDB - UPLOAD",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/storage/upload",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "multipart/form-data",
                "valueValue": ""
            }
        ],
        "x": 330,
        "y": 1680,
        "wires": [
            [
                "41d85efdfdc2b98b"
            ]
        ]
    },
    {
        "id": "b2b180a1019e82fa",
        "type": "debug",
        "z": "bf6e5312884e6967",
        "g": "537ea4a677b95df8",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 800,
        "wires": []
    },
    {
        "id": "1f03db0d3558b040",
        "type": "inject",
        "z": "5e0f1a41e75562f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "6d29c326b6ee5d18"
            ]
        ]
    },
    {
        "id": "6d29c326b6ee5d18",
        "type": "function",
        "z": "5e0f1a41e75562f7",
        "name": "get:email",
        "func": "msg.payload = ``;\nmsg.topic = \"get_email\";\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 140,
        "wires": [
            [
                "325b4eee5d4fe5f9"
            ]
        ]
    },
    {
        "id": "325b4eee5d4fe5f9",
        "type": "exec",
        "z": "5e0f1a41e75562f7",
        "command": "cd /zenflowai/mailgate && node /zenflowai/mailgate/check-inbox.js",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get Email",
        "x": 500,
        "y": 140,
        "wires": [
            [],
            [],
            [
                "67181bed26d55ac5"
            ]
        ]
    },
    {
        "id": "67181bed26d55ac5",
        "type": "switch",
        "z": "5e0f1a41e75562f7",
        "name": "",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 160,
        "wires": [
            [],
            [
                "0d089c28ebfd63c7"
            ]
        ]
    },
    {
        "id": "0d089c28ebfd63c7",
        "type": "debug",
        "z": "5e0f1a41e75562f7",
        "name": "GET EMAIL ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 140,
        "wires": []
    },
    {
        "id": "6eb5908586e7fa56",
        "type": "comment",
        "z": "5e0f1a41e75562f7",
        "name": "Pobieraniae poczty ze skrzynki",
        "info": "",
        "x": 170,
        "y": 60,
        "wires": []
    },
    {
        "id": "8416ddccd2a3af4b",
        "type": "inject",
        "z": "be1c3f3f839ca819",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "23",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "fc7a029f2661abcd"
            ]
        ]
    },
    {
        "id": "f12da4027c5395e9",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "email:get:new",
        "func": "msg.nocodb_t_active = msg.nocodb_t.app_mail_inbox;\n\ndelete msg.headers;\ndelete msg.method;\ndelete msg.responseCookies;\n\nmsg.payload = {\n    offset: '0',\n    limit: '10',\n    viewId: msg.nocodb_t.app_mail_inbox_view,\n    where: `(status,eq,new)`,\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 60,
        "wires": [
            [
                "d661f297f856f96e"
            ]
        ]
    },
    {
        "id": "d661f297f856f96e",
        "type": "http request",
        "z": "be1c3f3f839ca819",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 800,
        "y": 60,
        "wires": [
            [
                "04ed4b3b6c47ab86"
            ]
        ]
    },
    {
        "id": "fc7a029f2661abcd",
        "type": "subflow:03b285947d86a284",
        "z": "be1c3f3f839ca819",
        "name": "",
        "x": 320,
        "y": 60,
        "wires": [
            [
                "f12da4027c5395e9"
            ]
        ]
    },
    {
        "id": "344f4fdbcc7aa161",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "separate records",
        "func": "let rows = msg.q.list;\n\nmsg.payload = rows.map(row => {\n    let singleMsg = RED.util.cloneMessage(msg); // duplikujemy oryginalny msg\n    singleMsg.payload = row;\n    return singleMsg;\n});\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn [msg.payload]; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 280,
        "wires": [
            [
                "9c3521cbdd01940d"
            ]
        ]
    },
    {
        "id": "7282e4f8e111ba27",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "in-q",
        "links": [
            "eeb338a064f555cf",
            "6133dc5ef9a2e7f8"
        ],
        "x": 485,
        "y": 340,
        "wires": [
            [
                "9c3521cbdd01940d"
            ]
        ]
    },
    {
        "id": "9c3521cbdd01940d",
        "type": "q-gate",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "q-email_examine",
        "controlTopic": "control-email_examine",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "100",
        "keepNewest": false,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 650,
        "y": 280,
        "wires": [
            [
                "689f0bd78eab811c"
            ]
        ]
    },
    {
        "id": "432f72cad7c993b3",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "start-all_node_get_next",
        "links": [
            "4376394ee780c7ec"
        ],
        "x": 160,
        "y": 400,
        "wires": [
            [
                "3321558b29da0cf7"
            ]
        ],
        "l": true
    },
    {
        "id": "3321558b29da0cf7",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "get next",
        "func": "const q = flow.get('q');\nnode.send({ topic: q.ct, payload: \"drop\"})\nmsg.topic = q.ct\nmsg.payload = \"peek\"\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 400,
        "wires": [
            [
                "eeb338a064f555cf"
            ]
        ]
    },
    {
        "id": "eeb338a064f555cf",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "end-all_node_get_next",
        "mode": "link",
        "links": [
            "7282e4f8e111ba27"
        ],
        "x": 700,
        "y": 400,
        "wires": [],
        "l": true
    },
    {
        "id": "0ea7646b207b1c61",
        "type": "status",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "q-status",
        "scope": [
            "9c3521cbdd01940d"
        ],
        "x": 120,
        "y": 500,
        "wires": [
            [
                "5de2046e824d541f"
            ]
        ]
    },
    {
        "id": "5de2046e824d541f",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "check if first in q",
        "func": "const statusText = msg.status.text;\nconst processing_tag = \"processing-email_examine\";\nlet processing = flow.get(processing_tag) || false;\nconst q = flow.get('q');\n\n// Dopasuj liczbƒô po \"queuing:\"\nconst match = statusText.match(/queuing:\\s*(\\d+)/);\n\nif (match) {\n    const queuingCount = parseInt(match[1], 10);\n    node.status({ fill: \"gray\", shape: \"ring\", text: queuingCount });\n    const timestamp = global.get(\"getDateTime\")();\n\n    // Ustaw status wƒôz≈Ça\n    node.status({\n        fill: queuingCount > 0 ? \"yellow\" : \"green\",\n        shape: \"dot\",\n        text: `${timestamp} | queuing: ${queuingCount}`\n    });\n\n    if (queuingCount == 0) {\n        flow.set(processing_tag, false);\n        msg.payload = \"end\";\n        node.status({ fill: \"gray\", shape: \"dot\", text: \"processing end\"  });\n        return msg;\n    }\n\n    \n        \n        if (queuingCount > 0) {\n\n            if (!processing) {\n                flow.set(processing_tag, true);\n                msg.topic = q.ct;\n                msg.payload = \"peek\";\n                node.status({ fill: \"gray\", shape: \"dot\", text: \"od true\" });\n                return msg;\n            } else {\n                node.status({ fill: \"gray\", shape: \"dot\", text: \"od false\" });\n            }\n\n            // msg.payload = {\n            //     queuing: queuingCount,\n            //     time: timestamp, peek\n            //     rawStatus: statusText\n            // };\n            node.status({ fill: \"gray\", shape: \"dot\", text: processing });\n            // return msg;\n        \n    } else {\n        node.status({ fill: \"green\", shape: \"dot\", text: \"processing ...\" });\n    }\n}\n\n// Je≈õli nie pasuje ‚Äì wyczy≈õƒá status i nic nie wysy≈Çaj\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"no match or queuing ‚â§ 1\" });\n// node.status({ fill: \"gray\", shape: \"ring\", text: match });\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 500,
        "wires": [
            [
                "06a3092fd10d6b09"
            ]
        ]
    },
    {
        "id": "6133dc5ef9a2e7f8",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "7282e4f8e111ba27"
        ],
        "x": 785,
        "y": 460,
        "wires": []
    },
    {
        "id": "1fc92443bd36b6ac",
        "type": "delay",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 460,
        "wires": [
            [
                "6133dc5ef9a2e7f8"
            ]
        ]
    },
    {
        "id": "06a3092fd10d6b09",
        "type": "switch",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "peek",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "end",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 500,
        "wires": [
            [
                "1fc92443bd36b6ac"
            ],
            []
        ]
    },
    {
        "id": "f54078fb7e5ba183",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "q-config",
        "func": "msg.q = {\n    ct: \"control-email_examine\",\n    list: msg.payload.list,\n}\n\nflow.set(\"q\", msg.q);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 160,
        "wires": [
            [
                "7e2415a1a8fb10f8"
            ]
        ]
    },
    {
        "id": "59f39a36a11b77c4",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "link in 5",
        "links": [
            "04ed4b3b6c47ab86"
        ],
        "x": 75,
        "y": 160,
        "wires": [
            [
                "f54078fb7e5ba183"
            ]
        ]
    },
    {
        "id": "689f0bd78eab811c",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "aaadc52352e816a9"
        ],
        "x": 785,
        "y": 280,
        "wires": []
    },
    {
        "id": "aaeb584c7ed5f33b",
        "type": "inject",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "q.ct",
                "vt": "flow"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 650,
        "y": 340,
        "wires": [
            [
                "9c3521cbdd01940d"
            ]
        ]
    },
    {
        "id": "04ed4b3b6c47ab86",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "59f39a36a11b77c4"
        ],
        "x": 965,
        "y": 60,
        "wires": []
    },
    {
        "id": "3d6f84614a1fbf6e",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "check:email:find",
        "func": "msg.email = msg.payload;\n\nlet email = msg.email;\nlet email_find = {\n    nr_umowy: null,\n    nr_umowy_from_filename: null,\n    uuid: null,\n    attachments: [],\n    probably_contract: false,\n    mail_delivery_failed: false,\n    mail_delivery_failed_email: null,\n    no_contract_found: false,\n};\n\nconst bounce_patterns = [\n    /550\\s5\\.1\\.1/i,\n    /Undelivered Mail Returned to Sender/i,\n    /delivery[ -]status notification/i,\n    /recipient address rejected/i,\n    /mailbox unavailable/i\n];\n\nconst failed_email_pattern = /<([^>]+@[^>]+)>/;\n\nif (bounce_patterns.some(pattern => pattern.test(email.subject) || pattern.test(email.body))) {\n    email_find.mail_delivery_failed = true;\n    const failed_match = email.body?.match(failed_email_pattern);\n    if (failed_match) {\n        email_find.mail_delivery_failed_email = failed_match[1];\n    }\n}\n\n// 1. Szukamy numeru umowy w temacie\nlet nr_umowy_match = email.subject?.match(/\\b[A-Z]+-\\d{1,}\\/\\d{1,}\\b/);\nif (nr_umowy_match) {\n    email_find.nr_umowy = nr_umowy_match[0];\n}\n\n// 2. Szukamy UUID w tre≈õci\nlet uuid_match = email.body?.match(/uuid:([0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})/i);\nif (uuid_match) {\n    email_find.uuid = uuid_match[1];\n}\n\n// 3. Parsowanie za≈ÇƒÖcznik√≥w\nlet raw_attachments = typeof email.attachments === \"string\" ? email.attachments.split(\",\") : [];\n\nlet found_any_pdf = false;\nlet found_pdf_with_nr_from_filename = false;\nlet found_image_non_barcode = false;\n\nraw_attachments.forEach(path => {\n    const filename = path.split(\"/\").pop();\n    if (filename === \"barcode.png\") return;\n\n    const ext = filename.toLowerCase().split(\".\").pop();\n    let kind = null;\n    if ([\"pdf\"].includes(ext)) kind = \"pdf\";\n    else if ([\"jpg\", \"jpeg\", \"png\", \"bmp\", \"tiff\", \"webp\"].includes(ext)) kind = \"image\";\n\n    let nr_umowy_from_filename = null;\n    let match_prefix = filename.match(/([A-Z])-(\\d{1,})-(\\d{1,})/);\n    if (match_prefix) {\n        nr_umowy_from_filename = `${match_prefix[1]}-${match_prefix[2]}/${match_prefix[3]}`;\n        // je≈õli nie by≈Ço w mailu, a znale≈∫li≈õmy w nazwie pliku ‚Äî ustawiamy\n        if (!email_find.nr_umowy) {\n            email_find.nr_umowy = nr_umowy_from_filename;\n            email_find.nr_umowy_from_filename = nr_umowy_from_filename;\n        }\n        found_pdf_with_nr_from_filename = true;\n    }\n\n    if (kind === \"pdf\") {\n        found_any_pdf = true;\n    }\n\n    if (kind === \"image\") {\n        found_image_non_barcode = true;\n    }\n\n    email_find.attachments.push({\n        patch: path,\n        filename: filename,\n        kind: kind,\n        nr_umowy_from_filename: nr_umowy_from_filename\n    });\n});\n\n// 4. Ustalenie probably_contract wg 3 zasad\nif (\n    (email_find.nr_umowy && found_any_pdf) ||      // nr umowy z maila + PDF\n    (!nr_umowy_match && found_pdf_with_nr_from_filename) || // brak w mailu, ale nr w nazwie PDF\n    (email_find.nr_umowy && found_image_non_barcode) // <-- nr umowy + zdjƒôcia\n) {\n    email_find.probably_contract = true;\n}\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nmsg.email_find = email_find;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 620,
        "wires": [
            [
                "b2edea07e9697dc0"
            ]
        ]
    },
    {
        "id": "aaadc52352e816a9",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "name": "link in 6",
        "links": [
            "689f0bd78eab811c"
        ],
        "x": 85,
        "y": 620,
        "wires": [
            [
                "3d6f84614a1fbf6e"
            ]
        ]
    },
    {
        "id": "4376394ee780c7ec",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "432f72cad7c993b3"
        ],
        "x": 3015,
        "y": 1180,
        "wires": []
    },
    {
        "id": "e088baaede4c8f3c",
        "type": "switch",
        "z": "be1c3f3f839ca819",
        "name": "",
        "property": "route",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "pdf_z_nr_umowy",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nr_i_pdf",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "wiele_obrazow",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "inne_probably_contract",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "uuid_only",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mail_delivery_failed",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "no_contract_found",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 1210,
        "y": 940,
        "wires": [
            [
                "0a9bd45f1d1b05f1"
            ],
            [
                "0a9bd45f1d1b05f1"
            ],
            [
                "c5a5fb7b9de73e41"
            ],
            [
                "c12e78b134f4567c"
            ],
            [
                "c2d4ce240f9aadde"
            ],
            [
                "b7fa61b324b55bb0"
            ],
            [
                "73c9a19a3a3e4a70"
            ],
            [
                "8813c5dd42b8ad16"
            ]
        ]
    },
    {
        "id": "210f906ede8ee242",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "analize:route",
        "func": "let find = msg.email_find;\nlet attachments = Array.isArray(find.attachments) ? find.attachments : [];\n\nlet imageCount = attachments.filter(a => a.kind === \"image\").length;\nlet pdfWithNrCount = attachments.filter(a => a.kind === \"pdf\" && a.nr_umowy === find.nr_umowy).length;\nlet pdfWithoutNrCount = attachments.filter(a => a.kind === \"pdf\" && (!a.nr_umowy && !a.nr_umowy_from_filename)).length;\n\nlet route = \"brak_danych\";\n\n// Priorytet 1: Wiadomo≈õƒá niedostarczona\nif (find.mail_delivery_failed) {\n    route = \"mail_delivery_failed\";\n\n    // Priorytet 2: Prawdopodobna umowa\n} else if (find.probably_contract) {\n    if (pdfWithNrCount > 0) {\n        route = \"pdf_z_nr_umowy\";\n    } else if (pdfWithoutNrCount > 0) {\n        route = \"nr_i_pdf\"; // NOWY przypadek\n    } else if (imageCount > 0) {\n        route = \"wiele_obrazow\";\n    } else {\n        route = \"inne_probably_contract\";\n    }\n\n    // Priorytet 3: Jest UUID, ale brak numeru umowy\n} else if (find.uuid && !find.nr_umowy) {\n    route = \"uuid_only\";\n}\n\n// Priorytet 4: Nie znaleziono umowy\nif (find.no_contract_found) {\n    route = \"no_contract_found\";\n}\n\nmsg.route = route;\nnode.status({ fill: \"green\", shape: \"dot\", text: route + \" \" + global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 940,
        "wires": [
            [
                "e088baaede4c8f3c"
            ]
        ]
    },
    {
        "id": "9957284425d66a7f",
        "type": "comment",
        "z": "be1c3f3f839ca819",
        "g": "863158746555e7a5",
        "name": "analiza:pdf:sumakontrolna",
        "info": "",
        "x": 190,
        "y": 1540,
        "wires": []
    },
    {
        "id": "0a9bd45f1d1b05f1",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "863158746555e7a5",
        "name": "checsume:sha256",
        "func": "const path = global.get(\"path\");\nconst crypto = global.get(\"crypto\");\nconst fs = global.get(\"fs\");\n\nconst path_storage = global.get(\"storage\");\nconst path_umowy = global.get(\"path_umowy\");\nconst path_email = global.get(\"path_email\");\n\n// ≈öcie≈ºka do oryginalnej umowy\nconst path1 = msg.umowa.path_umowa_orginalna;\n\n// Filtrujemy tylko PDF-y z za≈ÇƒÖcznik√≥w\nconst attachments = (msg.email_find.attachments || []).filter(a => a.kind === \"pdf\");\n\n// Je≈õli brak plik√≥w PDF ‚Äì ko≈Ñczymy\nif (attachments.length === 0) {\n    node.status({ fill: \"red\", shape: \"dot\", text: \"Brak PDF w za≈ÇƒÖcznikach\" });\n    return null;\n}\n\n// Bierzemy pierwszy plik PDF\nconst path2 = attachments[0].patch;\n\n// Czytanie zawarto≈õci\nconst buffer1 = fs.readFileSync(path1);\nconst buffer2 = fs.readFileSync(path2);\n\n// Por√≥wnanie hash√≥w\nconst hash1 = crypto.createHash('sha256').update(buffer1).digest('hex');\nconst hash2 = crypto.createHash('sha256').update(buffer2).digest('hex');\n\nmsg.hash_diff = hash1 !== hash2;\nmsg.hash_input = hash1;\nmsg.hash_signed = hash2;\n\n// ≈öcie≈ºki do kopiowania\nmsg.source_path = path.dirname(path2) + path.sep;\nmsg.source_file = path.basename(path2);\nmsg.dest_path = path_storage + path_umowy + msg.umowa.umowa_year + \"/\" + msg.umowa.umowa_nr + \"/\";\nmsg.dest_file = \"podpisana-\" + path.basename(path2);\n\nmsg.path_umowa_podpisana_email_pdf = msg.dest_path + msg.dest_file;\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1600,
        "wires": [
            [
                "b38108020e6fc6dd"
            ]
        ]
    },
    {
        "id": "b2edea07e9697dc0",
        "type": "switch",
        "z": "be1c3f3f839ca819",
        "name": "",
        "property": "email_find.probably_contract",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 620,
        "wires": [
            [
                "9ba915fac081c1ff"
            ],
            [
                "210f906ede8ee242"
            ]
        ]
    },
    {
        "id": "c19662359a2b3bd2",
        "type": "http request",
        "z": "be1c3f3f839ca819",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1040,
        "y": 620,
        "wires": [
            [
                "53e6c5b86871d08b"
            ]
        ]
    },
    {
        "id": "bf60fb51fb38b989",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "umowa:get:by_uuid",
        "func": "msg.nocodb_t_active = msg.nocodb_t.umowy;\n\ndelete msg.heders;\ndelete msg.method;\n\nmsg.payload = {\n    offset: '0',\n    limit: '1',\n    viewId: msg.nocodb_t.umowy_view,\n    where: msg.nocodb_query.where,\n    \"nested[osoby][fields]\": \"*\",\n    \"nested[rejsy][fields]\": \"*\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 620,
        "wires": [
            [
                "c19662359a2b3bd2"
            ]
        ]
    },
    {
        "id": "9ba915fac081c1ff",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "build:where",
        "func": "let find = msg.email_find || {};\nlet where = \"\";\n\n// Najpierw UUID\nif (find.uuid) {\n    where = `(uuid,eq,${find.uuid})`;\n} else {\n    // Ustal ≈∫r√≥d≈Ço numeru umowy\n    let umowa = find.nr_umowy || find.nr_umowy_from_filename;\n\n    if (umowa) {\n        let parts = umowa.split(\"/\");\n        if (parts.length === 2) {\n            let year = parts[0];\n            let umowa_nr = parts[1];\n            where = `(umowa_year,eq,${year})~and(umowa_nr,eq,${umowa_nr})`;\n        }\n    }\n}\n\nmsg.nocodb_query = {\n    where: where\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: where });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 620,
        "wires": [
            [
                "bf60fb51fb38b989"
            ]
        ]
    },
    {
        "id": "53e6c5b86871d08b",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "function 7",
        "func": "msg.umowa = msg.payload.list?.[0] || null;\n\nif (!msg.umowa) {\n    // msg.email_find = msg.email_find || {};\n    msg.email_find.no_contract_found = true;\n}\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 620,
        "wires": [
            [
                "210f906ede8ee242",
                "a914496f87c36531"
            ]
        ]
    },
    {
        "id": "7e2415a1a8fb10f8",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "up:status:new_to_queue",
        "func": "let rows = msg.payload.list;\n\nmsg.method = \"PATCH\";\nmsg.payload = rows.map(row => {\n    let singleMsg = {\n        \"Id\": row.Id,\n        \"status\": \"queue\"\n    };\n\n    return singleMsg;\n});\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 220,
        "wires": [
            [
                "f21258598582116b"
            ]
        ]
    },
    {
        "id": "f21258598582116b",
        "type": "http request",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 440,
        "y": 220,
        "wires": [
            [
                "5b3d9084b179b7b3"
            ]
        ]
    },
    {
        "id": "5b3d9084b179b7b3",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "e70669bd24ffbcf3",
        "name": "NocoDB - analize save",
        "func": "if (msg.payload && msg.payload.length > 0) {\n    node.status({ fill: \"grey\", shape: \"ring\", text: `update rows: ${msg.payload.length}` });\n    msg.statusText = `update rows: ${msg.payload.length}`;\n    return msg;\n}\n\n\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"Brak danych\" });\nmsg.statusText = \"no records update\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 220,
        "wires": [
            [
                "344f4fdbcc7aa161"
            ]
        ]
    },
    {
        "id": "24ada9ad71fb27e5",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "863158746555e7a5",
        "name": "up:umowa_podpisana",
        "func": "delete msg.heders;\ndelete msg.method;\n\nlet rows = msg.payload.list;\nmsg.method = \"PATCH\";\n\nmsg.payload = {\n        \"Id\": msg.umowa.Id,\n        \"status\": \"25 contract-ok\",\n        \"umowa_podpisana\": true,\n        \"umowa_podpisana_why\": \"diff_sha256\",\n        \"path_umowa_podpisana\": msg.path_umowa_podpisana_email_pdf\n    };\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1600,
        "wires": [
            [
                "3948f3ca7ad74cf8"
            ]
        ]
    },
    {
        "id": "3948f3ca7ad74cf8",
        "type": "http request",
        "z": "be1c3f3f839ca819",
        "g": "863158746555e7a5",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1360,
        "y": 1600,
        "wires": [
            [
                "8521c39907b05f75"
            ]
        ]
    },
    {
        "id": "b38108020e6fc6dd",
        "type": "switch",
        "z": "be1c3f3f839ca819",
        "g": "863158746555e7a5",
        "name": "hash_diff",
        "property": "hash_diff",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 1600,
        "wires": [
            [
                "1f33ac787fa27bb8"
            ],
            []
        ]
    },
    {
        "id": "1f33ac787fa27bb8",
        "type": "fs-ops-copy",
        "z": "be1c3f3f839ca819",
        "g": "863158746555e7a5",
        "name": "",
        "sourcePath": "source_path",
        "sourcePathType": "msg",
        "sourceFilename": "source_file",
        "sourceFilenameType": "msg",
        "destPath": "dest_path",
        "destPathType": "msg",
        "destFilename": "dest_file",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 580,
        "y": 1600,
        "wires": [
            [
                "985d625385b7399d"
            ]
        ]
    },
    {
        "id": "10899b1d53947e83",
        "type": "comment",
        "z": "be1c3f3f839ca819",
        "g": "24acd2baaff30f4c",
        "name": "GPT analize",
        "info": "",
        "x": 150,
        "y": 2000,
        "wires": []
    },
    {
        "id": "4ff8d3d1742d566c",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "24acd2baaff30f4c",
        "name": "Prepare",
        "func": "node.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); // STATUS\n\n// Pobierz tekst z OCR\n// let ocrImgText = (msg.payload && msg.payload.responses && msg.payload.responses[0] && msg.payload.responses[0].fullTextAnnotation && msg.payload.responses[0].fullTextAnnotation.text) || \"\";\n\n// Pobierz tekst z msg.ocrpdf\n// let ocrPdfText = msg.ocrpdf || \"\";\n\n// Je≈ºeli oba sƒÖ puste -> zako≈Ñcz flow\n// if ((!ocrImgText || ocrImgText.trim() === \"\") && (!ocrPdfText || ocrPdfText.trim() === \"\")) {\n//     node.status({ fill: \"red\", shape: \"dot\", text: global.get(\"getDateTime\")() }); // STATUS\n//     return null;\n// }\n// const ocrText = (ocrImgText && ocrImgText.trim() !== \"\") ? ocrImgText : ocrPdfText;\n\n\n// const ocrText = msg.payload.responses[0].fullTextAnnotation.text;\n// msg.question = `Oto tekst OCR:\\n\\n${ocrText}`;\nmsg.question = \"test pytanie: Puk Puk \";\nmsg.files = [\n    \"asda/jeden.jpg\" ,\n    \"asdede/dwa.jpg\"\n]\n\n// const msg2 = {\n//     topic: \"prepare_ocr_to_ai\",\n//     ocrText: ocrText,\n//     payload: \"ok\"    \n// };\n\n// const uuidv4 = () => {\n//     return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n//         let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n//         return v.toString(16);\n//     });\n// };\n\n// flow.set(\"uuidv4\", uuidv4());\n\ndelete msg.headers;\ndelete msg.url;\ndelete msg.method;\ndelete msg.statusCode;\ndelete msg.responseUrl;\ndelete msg.redirectList;\n\nnode.status({ fill: \"gray\", shape: \"dot\", text: global.get(\"getDateTime\")() }); // STATUS\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "ebe57c8170dea9e9",
        "type": "subflow:4b1994ea08f806f1",
        "z": "be1c3f3f839ca819",
        "g": "24acd2baaff30f4c",
        "name": "",
        "x": 370,
        "y": 1920,
        "wires": [
            [
                "f33441915ef0ebbc"
            ]
        ]
    },
    {
        "id": "f33441915ef0ebbc",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "24acd2baaff30f4c",
        "name": "set Thred_id",
        "func": "msg.thread_id = msg.payload.thread_id;\nmsg.run_id = msg.payload.id\n\ndelete msg.headers;\ndelete msg.url;\ndelete msg.method;\ndelete msg.statusCode;\ndelete msg.responseUrl;\ndelete msg.redirectList;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1920,
        "wires": [
            [
                "d41ccd5e807be2a6"
            ]
        ]
    },
    {
        "id": "d41ccd5e807be2a6",
        "type": "subflow:bfda0bc698f05633",
        "z": "be1c3f3f839ca819",
        "g": "24acd2baaff30f4c",
        "name": "",
        "x": 810,
        "y": 1920,
        "wires": [
            [
                "fd42845d2e4811c2"
            ]
        ]
    },
    {
        "id": "fd42845d2e4811c2",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "24acd2baaff30f4c",
        "name": "Parsuj respo ChatGPT",
        "func": "const ts = flow.get(\"fileStamp\")\nconst path_storage = global.get(\"storage\");\n\nlet content = \"\";\ntry {\n    content = msg.payload || \"\";\n} catch (e) {\n    msg.payload = { error: \"Brak choices w odpowiedzi\", raw: msg.payload };\n    return msg;\n}\n\nlet parsed;\ntry {\n    parsed = JSON.parse(content);\n} catch (e) {\n    parsed = {\n        blad: \"Nie uda≈Ço siƒô sparsowaƒá JSON z odpowiedzi\",\n        surowaOdpowiedz: content\n    };\n}\n\n\nconst baseFilename = msg.filename?.split('/').pop().replace(/\\.[^/.]+$/, '') || \"dokument\";\nlet response = JSON.stringify(parsed, null, 2);\nmsg.filename = `${path_storage}tmp/${ts}_${baseFilename}.json`;\nmsg.payload = response;\nmsg.responseChatGPT = parsed;\n\n// Status Show Time\nconst now = new Date();\nconst pad = (n) => n.toString().padStart(2, '0');\nconst timestamp = `${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())} ` +\n    `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(now.getSeconds())}`;\nnode.status({ fill: \"green\", shape: \"dot\", text: timestamp });\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1920,
        "wires": [
            [
                "86183fdac91b6d57",
                "49fad7c4acefac24"
            ]
        ]
    },
    {
        "id": "2820d7330d92ab47",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "g": "24acd2baaff30f4c",
        "name": "start-analize_openai",
        "links": [
            "7e2f867ede23e703"
        ],
        "x": 170,
        "y": 1860,
        "wires": [
            [
                "ebe57c8170dea9e9"
            ]
        ],
        "l": true
    },
    {
        "id": "637ef8f0903ac97f",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "g": "24acd2baaff30f4c",
        "name": "end-analize_openai",
        "mode": "link",
        "links": [
            "3346c19ae8aa21d2"
        ],
        "x": 1350,
        "y": 2000,
        "wires": [],
        "l": true
    },
    {
        "id": "58158ff7821b7110",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "Prepare",
        "func": "node.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); // STATUS\n\nmsg.chatgpt_asst = global.get('chatgpt_asst_sign');\nmsg.question = \"Czy dokument (storna 4) zawiera podpis rƒôczny  nad qrcode ? Podpis Uczestnika. Dodatkowo zweryfikuj jaki nr umowy jest w qrcode. \";\n\ndelete msg.headers;\ndelete msg.url;\ndelete msg.method;\ndelete msg.statusCode;\ndelete msg.responseUrl;\ndelete msg.redirectList;\n\nnode.status({ fill: \"gray\", shape: \"dot\", text: global.get(\"getDateTime\")() }); // STATUS\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1780,
        "wires": [
            [
                "7e2f867ede23e703"
            ]
        ]
    },
    {
        "id": "c5a5fb7b9de73e41",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "attach:from:email to list",
        "func": "// const basePath = \"/zenflowai/storage/email/\";\n// const fileString = msg.file_string || \"\";\n// const fileString = 'attachment/27/image0.jpeg,attachment/27/image1.jpeg,attachment/27/image2.jpeg,attachment/27/image3.jpeg';\n\n// msg.files = fileString\n//     .split(\",\")\n//     .map(p => p.trim())\n//     .filter(p => p.length > 0)\n//     .map(relPath => {\n//         return {\n//             filename: relPath.split(\"/\").pop(),\n//             path: basePath + relPath\n//         };\n//     });\n\n// return msg;\n\n\nmsg.files = (msg.email_find.attachments || [])\n    .filter(a => a.patch && a.patch.length > 0)\n    .map(a => {\n        return {\n            filename: a.filename,\n            path: a.patch\n        };\n    });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1780,
        "wires": [
            [
                "58158ff7821b7110"
            ]
        ]
    },
    {
        "id": "86183fdac91b6d57",
        "type": "subflow:cb0cbe65f5a7b6e2",
        "z": "be1c3f3f839ca819",
        "g": "24acd2baaff30f4c",
        "name": "",
        "x": 1330,
        "y": 1920,
        "wires": [
            [
                "637ef8f0903ac97f"
            ]
        ]
    },
    {
        "id": "7e2f867ede23e703",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "2820d7330d92ab47"
        ],
        "x": 545,
        "y": 1780,
        "wires": []
    },
    {
        "id": "3346c19ae8aa21d2",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "name": "link in 7",
        "links": [
            "637ef8f0903ac97f"
        ],
        "x": 655,
        "y": 1780,
        "wires": [
            [
                "0379e85ef16424bc"
            ]
        ]
    },
    {
        "id": "0379e85ef16424bc",
        "type": "switch",
        "z": "be1c3f3f839ca819",
        "name": "",
        "property": "responseChatGPT.doc_is_sign",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1780,
        "wires": [
            [
                "8bbe0f756fef0ef6",
                "3f80a813ff9a9363"
            ],
            []
        ]
    },
    {
        "id": "8bbe0f756fef0ef6",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "copy:makepdf:umowa",
        "func": "const fs = global.get(\"fs\");\nconst path = global.get(\"path\");\nconst PDFDocument = global.get(\"pdfkit\");  // dodaj do settings.js je≈õli nie ma\nconst A4_LANDSCAPE = [841.89, 595.28];\n\nconst path_storage = global.get(\"storage\");\nconst path_umowy = global.get(\"path_umowy\");\nconst path_email = global.get(\"path_email\");\n\nconst attachments = msg.email_find.attachments || [];\nconst umowa_folder = `${path_storage}${path_umowy}${msg.umowa.umowa_year}/${msg.umowa.umowa_nr}/`;\nconst email_folder = `${path_storage}${path_email}`;\nconst path1 = msg.umowa.path_umowa_orginalna;\nmsg.source_file = path.basename(path1);\nmsg.dest_file = \"podpisana-e-\" + msg.source_file;\n\nif (!fs.existsSync(umowa_folder)) {\n    fs.mkdirSync(umowa_folder, { recursive: true });\n}\n\nconst copied_files = [];\n\nfor (const att of attachments) {\n    const src = att.patch; //path.join(email_folder, ); // np. /zenflowai/storage/inbox/attachment/27/image0.jpeg\n    const dest = path.join(umowa_folder, att.filename);\n\n    if (fs.existsSync(src)) {\n        fs.copyFileSync(src, dest);\n        copied_files.push(dest);\n    } else {\n        node.warn(`Plik nie istnieje: ${src}`);\n        node.status({ fill: \"red\", shape: \"dot\", text: `Plik nie istnieje: ${src}` });\n\n    }\n}\n\n// Tworzenie PDF z obrazk√≥w\nif (copied_files.length > 0) {\n    const pdfPath = path.join(umowa_folder, msg.dest_file);\n    const doc = new PDFDocument({ autoFirstPage: false });\n\n    const writeStream = fs.createWriteStream(pdfPath);\n    doc.pipe(writeStream);\n\n    for (const imgPath of copied_files) {\n        // const { width, height } = doc.openImage(imgPath);\n        // doc.addPage({ size: [width, height] });\n        // doc.image(imgPath, 0, 0);\n\n        // const img = doc.openImage(imgPath);\n        // const width = img.width;\n        // const height = img.height;\n\n        // doc.addPage({ size: [width, height] });\n        // doc.image(img, 0, 0, { width, height: height - 1 }); // delikatna korekta\n\n        const img = doc.openImage(imgPath);\n        doc.addPage({ size: A4_LANDSCAPE });\n\n        doc.image(img, 0, 0, {\n            fit: A4_LANDSCAPE,\n            align: 'center',\n            valign: 'center'\n        });\n        \n    }\n\n    doc.end();\n\n    msg.umowa.path_pdf_zalaczniki = pdfPath;\n    msg.payload = {\n        status: \"ok\",\n        pdf: pdfPath,\n        kopie: copied_files\n    };\n    node.status({ fill: \"green\", shape: \"dot\", text: pdfPath });\n} else {\n    msg.payload = { status: \"brak plik√≥w do kopiowania\" };\n    node.status({ fill: \"red\", shape: \"dot\", text: \"brak plik√≥w do kopiowania\" });\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1780,
        "wires": [
            [
                "613e610cc3a835e4",
                "169430d5a6c292d8"
            ]
        ]
    },
    {
        "id": "130b6b391a470d25",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "up:umowa_podpisana",
        "func": "delete msg.headers;\ndelete msg.method;\ndelete msg.responseCookies;\n\nmsg.method = \"PATCH\";\n\nconst uploadedFile = msg.payload[0];\n\nmsg.payload = {\n        \"Id\": msg.kind.Id,\n        \"status\": msg.kind.status,\n        \"umowa_podpisana\": msg.kind.umowa_podpisana,\n        \"umowa_podpisana_why\": msg.kind.umowa_podpisana_why,\n        \"path_umowa_podpisana\": msg.kind.path_file,\n        \"umowa_podpisana_file\": JSON.stringify([{\n            path: uploadedFile.path,\n            title: uploadedFile.title,\n            mimetype: uploadedFile.mimetype,\n            size: uploadedFile.size,\n        }])\n    };\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2500,
        "y": 1660,
        "wires": [
            [
                "eb1fa11e2db45bd9",
                "36b09dfb5bfdca64",
                "30146bbb67aa2593"
            ]
        ]
    },
    {
        "id": "eb1fa11e2db45bd9",
        "type": "http request",
        "z": "be1c3f3f839ca819",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 2740,
        "y": 1660,
        "wires": [
            [
                "8521c39907b05f75"
            ]
        ]
    },
    {
        "id": "8521c39907b05f75",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "email:set:processed",
        "func": "msg.nocodb_t_active = msg.nocodb_t.app_mail_inbox;\nnode.status({ fill: \"blue\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\n// Usuwanie zbƒôdnych danych\ndelete msg.headers;\ndelete msg.method;\ndelete msg.responseCookies;\n\n// Metoda PATCH\nmsg.method = \"PATCH\";\n\n// Komentarz opisujƒÖcy sytuacjƒô\nlet comment = `route: ${msg.route}\nnazwa_umowy: ${msg.umowa?.nazwa || \"brak\"}\nchatgpt: ${msg.responseChatGPT?.notes || \"brak\"}\n`;\n\n// Konwersja debug_json do stringa JSON\nlet debug_json;\ntry {\n    debug_json = JSON.stringify(msg.email_find, null, 2); // formatowany JSON\n} catch (e) {\n    debug_json = JSON.stringify({ error: \"B≈ÇƒÖd przy konwersji email_find\", raw: String(msg.email_find) });\n}\n\n// Payload do NoCoDB\nmsg.payload = {\n    \"Id\": msg.email.Id,\n    \"status\": \"processed\",\n    \"comment\": comment,\n    \"debug_json\": debug_json\n};\n\n// Finalny status\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2620,
        "y": 1180,
        "wires": [
            [
                "8ed3a2d5bd808a6d",
                "84adb3bfd6c08412"
            ]
        ]
    },
    {
        "id": "8ed3a2d5bd808a6d",
        "type": "http request",
        "z": "be1c3f3f839ca819",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 2880,
        "y": 1180,
        "wires": [
            [
                "4376394ee780c7ec",
                "5d3e88fea6a9efb5"
            ]
        ]
    },
    {
        "id": "a914496f87c36531",
        "type": "debug",
        "z": "be1c3f3f839ca819",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 580,
        "wires": []
    },
    {
        "id": "62271a965b7c3f0c",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "5a48da093318a6e2",
        "name": "attach:from:email to list",
        "func": "const basePath = \"/zenflowai/storage/email/\";\n// const fileString = msg.file_string || \"\";\n// const fileString = 'attachment/27/image0.jpeg,attachment/27/image1.jpeg,attachment/27/image2.jpeg,attachment/27/image3.jpeg';\n\n// msg.files = fileString\n//     .split(\",\")\n//     .map(p => p.trim())\n//     .filter(p => p.length > 0)\n//     .map(relPath => {\n//         return {\n//             filename: relPath.split(\"/\").pop(),\n//             path: basePath + relPath\n//         };\n//     });\n\n// return msg;\n\n\nmsg.files = (msg.email_find.attachments || [])\n    .filter(a => a.patch && a.patch.length > 0)\n    .map(a => {\n        return {\n            filename: a.filename,\n            path: a.patch\n        };\n    });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1120,
        "wires": [
            [
                "2e7cff19f475f711"
            ]
        ]
    },
    {
        "id": "2e7cff19f475f711",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "5a48da093318a6e2",
        "name": "Prepare",
        "func": "node.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); // STATUS\n\nmsg.email_template_response = \"chatgpt_email_answer.html\";\n\nmsg.chatgpt_kind = \"brak_danych\";\nmsg.chatgpt_asst = global.get('chatgpt_asst_email');\nmsg.question = `\nAnalizuj poni≈ºszƒÖ wiadomo≈õƒá e-mail i zakwalifikuj jƒÖ zgodnie z ustalonym schematem JSON.\n\nDane e-maila:\n- Nadawca: ${msg.email.from}\n- Temat: ${msg.email.subject}\n- Tre≈õƒá: ${msg.email.body}\n\nWstƒôpna analiza:\n${JSON.stringify(msg.email_find, null, 2)}\n\nDostƒôpne rejsy (skr√≥cone):\n${msg.rejsy.map(r => `- ${r.nazwa} [${r.termin_od} - ${r.termin_do}], cena: ${r.cena} ${r.cena_c}`).join('\\n')}\n\nZwr√≥ƒá wynik w formacie JSON zgodnym ze zdefiniowanym schematem odpowiedzi.\n`;\n\ndelete msg.headers;\ndelete msg.url;\ndelete msg.method;\ndelete msg.statusCode;\ndelete msg.responseUrl;\ndelete msg.redirectList;\n\nnode.status({ fill: \"gray\", shape: \"dot\", text: global.get(\"getDateTime\")() }); // STATUS\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1120,
        "wires": [
            [
                "e72ad402e181b3c3"
            ]
        ]
    },
    {
        "id": "aa42338187a37ee5",
        "type": "comment",
        "z": "be1c3f3f839ca819",
        "g": "727dd0b334f9c095",
        "name": "GPT analize",
        "info": "",
        "x": 150,
        "y": 1400,
        "wires": []
    },
    {
        "id": "016e7caeb45b4b90",
        "type": "subflow:4b1994ea08f806f1",
        "z": "be1c3f3f839ca819",
        "g": "727dd0b334f9c095",
        "name": "",
        "x": 250,
        "y": 1340,
        "wires": [
            [
                "da94a28b18cd787a"
            ]
        ]
    },
    {
        "id": "da94a28b18cd787a",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "727dd0b334f9c095",
        "name": "set Thred_id",
        "func": "msg.thread_id = msg.payload.thread_id;\nmsg.run_id = msg.payload.id\n\ndelete msg.headers;\ndelete msg.url;\ndelete msg.method;\ndelete msg.statusCode;\ndelete msg.responseUrl;\ndelete msg.redirectList;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1340,
        "wires": [
            [
                "5f3173974d010f8d"
            ]
        ]
    },
    {
        "id": "5f3173974d010f8d",
        "type": "subflow:bfda0bc698f05633",
        "z": "be1c3f3f839ca819",
        "g": "727dd0b334f9c095",
        "name": "",
        "x": 690,
        "y": 1340,
        "wires": [
            [
                "a4334c1a25387636"
            ]
        ]
    },
    {
        "id": "a4334c1a25387636",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "727dd0b334f9c095",
        "name": "Parsuj respo ChatGPT",
        "func": "const ts = flow.get(\"fileStamp\")\nconst path_storage = global.get(\"storage\");\n\nlet content = \"\";\ntry {\n    content = msg.payload || \"\";\n} catch (e) {\n    msg.payload = { error: \"Brak choices w odpowiedzi\", raw: msg.payload };\n    return msg;\n}\n\nlet parsed;\ntry {\n    parsed = JSON.parse(content);\n} catch (e) {\n    parsed = {\n        blad: \"Nie uda≈Ço siƒô sparsowaƒá JSON z odpowiedzi\",\n        surowaOdpowiedz: content\n    };\n}\n\n\nconst baseFilename = msg.filename?.split('/').pop().replace(/\\.[^/.]+$/, '') || \"dokument\";\nlet response = JSON.stringify(parsed, null, 2);\nmsg.filename = `${path_storage}tmp/${ts}_${baseFilename}.json`;\nmsg.payload = response;\nmsg.responseChatGPT = parsed;\n\n// Status Show Time\nconst now = new Date();\nconst pad = (n) => n.toString().padStart(2, '0');\nconst timestamp = `${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())} ` +\n    `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(now.getSeconds())}`;\nnode.status({ fill: \"green\", shape: \"dot\", text: timestamp });\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1340,
        "wires": [
            [
                "83f375e56d5576ec",
                "959a28fdc68c6fd3"
            ]
        ]
    },
    {
        "id": "2f47160fd1b9a3e4",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "g": "727dd0b334f9c095",
        "name": "start-analize_openai",
        "links": [
            "e72ad402e181b3c3"
        ],
        "x": 170,
        "y": 1280,
        "wires": [
            [
                "016e7caeb45b4b90"
            ]
        ],
        "l": true
    },
    {
        "id": "959a28fdc68c6fd3",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "g": "727dd0b334f9c095",
        "name": "end-analize_openai",
        "mode": "link",
        "links": [
            "bd49fcea4bcb06fc"
        ],
        "x": 1350,
        "y": 1400,
        "wires": [],
        "l": true
    },
    {
        "id": "83f375e56d5576ec",
        "type": "subflow:cb0cbe65f5a7b6e2",
        "z": "be1c3f3f839ca819",
        "g": "727dd0b334f9c095",
        "name": "",
        "x": 1250,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "e72ad402e181b3c3",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "g": "5a48da093318a6e2",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "2f47160fd1b9a3e4"
        ],
        "x": 555,
        "y": 1120,
        "wires": []
    },
    {
        "id": "aa5e3985105c76f9",
        "type": "switch",
        "z": "be1c3f3f839ca819",
        "name": "",
        "property": "chatgpt_kind",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "brak_danych",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "verifi_sign",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2030,
        "y": 820,
        "wires": [
            [
                "8521c39907b05f75",
                "90ce2f0ac1466479",
                "29e6d846e7bdc6d4"
            ],
            [
                "5eb155b527fb4200"
            ],
            [
                "1a87c507f9465aa5"
            ]
        ]
    },
    {
        "id": "bd49fcea4bcb06fc",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "name": "link in 8",
        "links": [
            "959a28fdc68c6fd3"
        ],
        "x": 1885,
        "y": 820,
        "wires": [
            [
                "aa5e3985105c76f9"
            ]
        ]
    },
    {
        "id": "5eb155b527fb4200",
        "type": "debug",
        "z": "be1c3f3f839ca819",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2200,
        "y": 820,
        "wires": []
    },
    {
        "id": "1a87c507f9465aa5",
        "type": "debug",
        "z": "be1c3f3f839ca819",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2200,
        "y": 860,
        "wires": []
    },
    {
        "id": "f6b6f42eaaa61aee",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "5a48da093318a6e2",
        "name": "NocoDB - rejsy:get",
        "func": "msg.nocodb_t_active = msg.nocodb_t.rejsy;\n\nlet nr_k = msg.payload.nr_k;\n\nmsg.form_data = msg.payload;\n\nmsg.payload = {\n    offset: '0',\n    limit: '25',\n    viewId: msg.nocodb_t.rejsy_view,\n    where: `(status,eq,active)`\n};\n//${nr_k}\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1060,
        "wires": [
            [
                "114f63ea7c2a3302"
            ]
        ]
    },
    {
        "id": "114f63ea7c2a3302",
        "type": "http request",
        "z": "be1c3f3f839ca819",
        "g": "5a48da093318a6e2",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 420,
        "y": 1060,
        "wires": [
            [
                "44cc669bad8efc18"
            ]
        ]
    },
    {
        "id": "44cc669bad8efc18",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "5a48da093318a6e2",
        "name": "rejsy:set",
        "func": "msg.rejsy = msg.payload.list;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1060,
        "wires": [
            [
                "62271a965b7c3f0c"
            ]
        ]
    },
    {
        "id": "90ce2f0ac1466479",
        "type": "debug",
        "z": "be1c3f3f839ca819",
        "name": "brakdanych",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 700,
        "wires": []
    },
    {
        "id": "84adb3bfd6c08412",
        "type": "debug",
        "z": "be1c3f3f839ca819",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2660,
        "y": 1240,
        "wires": []
    },
    {
        "id": "5d3e88fea6a9efb5",
        "type": "debug",
        "z": "be1c3f3f839ca819",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2900,
        "y": 1240,
        "wires": []
    },
    {
        "id": "64745f9d409f056b",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "email:template:confirm-email",
        "func": "var data = msg.payload;\n\nconst fs = global.get('fs');\nconst path = global.get('path');\n\n// ≈öcie≈ºki do plik√≥w (dostosuj wed≈Çug potrzeb)\nconst htmlPath = global.get('storage') + \"/teamplates/html/\" + msg.email_template_response;\nconst cssPath = global.get('storage') + \"/teamplates/html/email-style.css\";\n\nlet html = fs.readFileSync(htmlPath, \"utf8\");\nconst css = fs.readFileSync(cssPath, \"utf8\");\n\nconst template_data = msg.email_template_data;\n\n// Wstawienie stylu inline w miejsce <link rel=\"stylesheet\"...>\nhtml = html.replace(\n    /<link\\s+rel=[\"']stylesheet[\"']\\s+href=[\"'][^\"']+[\"']\\s*\\/?>/,\n    `<style>\\n${css}\\n</style>`\n);\n\n// Dynamiczna zamiana {{klucz}} na warto≈õƒá z template_data\nfor (const key in template_data) {\n    const regex = new RegExp(`{{${key}}}`, 'g');\n    html = html.replace(regex, template_data[key]);\n}\n\nmsg.payload = html;\nmsg.to = `${msg.email.from}`;\nmsg.from = msg.smtp.auth.user;\nmsg.subject = \"Odp: \" + msg.email.subject;\nmsg.headers = {\n    \"Content-Type\": \"text/html\"\n};\n\nmsg.umowa = data;\nmsg.html = html;\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2220,
        "wires": [
            [
                "fd5b8003865b6820"
            ]
        ]
    },
    {
        "id": "fd5b8003865b6820",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "NocoDB:post:osoba",
        "func": "msg.nocodb_t_active = msg.nocodb_t.messages;\n\n// const uploadedFile = msg.payload[0];\n\nconst now = new Date();\nconst pad = (n) => n.toString().padStart(2, '0');\n\nconst year = now.getFullYear();\nconst month = pad(now.getMonth() + 1);\nconst day = pad(now.getDate());\nconst hours = pad(now.getHours());\nconst minutes = pad(now.getMinutes());\nconst seconds = pad(now.getSeconds());\n\nconst uuid = global.get(\"uuidv4\")();\n\n// Prepare the update payload for the record\nmsg.payload = {\n    \"name\": year+month+day+hours+minutes+seconds+\" confirm-email \" + msg.to,\n    \"status\": \"new\",\n    \"type\": \"email\",\n    \"msg_to\": msg.to,\n    \"msg_subject\": msg.subject,\n    \"msg_body\": msg.html,\n    uuid: msg.uuid\n};\nmsg.method = \"POST\";\n\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 2220,
        "wires": [
            [
                "0456ff4095b65a59"
            ]
        ]
    },
    {
        "id": "0456ff4095b65a59",
        "type": "http request",
        "z": "be1c3f3f839ca819",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1040,
        "y": 2220,
        "wires": [
            [
                "f2ca122b6347e47c"
            ]
        ]
    },
    {
        "id": "f2ca122b6347e47c",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "get:id:msg",
        "func": "msg.msg_id = msg.payload.Id\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 2220,
        "wires": [
            [
                "070ca3d7f1993e72"
            ]
        ]
    },
    {
        "id": "070ca3d7f1993e72",
        "type": "email-dynamic",
        "z": "be1c3f3f839ca819",
        "name": "",
        "smtpServer": "",
        "smtpPort": "",
        "smtpUser": "",
        "smtpPass": "",
        "secure": false,
        "tlsRejectUnauthorized": false,
        "x": 260,
        "y": 2320,
        "wires": [
            [
                "d4c70bf31bed89e1"
            ]
        ]
    },
    {
        "id": "d4c70bf31bed89e1",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "NocoDB:patch:msg",
        "func": "msg.nocodb_t_active = msg.nocodb_t.messages;\nmsg.method = \"PATCH\";\n\n// Domy≈õlny status\nlet status = \"pending\";\n\n// Sprawdzenie p√≥l accepted/rejected\nif (msg.payload.accepted && msg.payload.accepted.length > 0) {\n    status = \"send\";\n} else if (msg.payload.rejected && msg.payload.rejected.length > 0) {\n    status = \"error\";\n}\n\nmsg.payload = {\n    Id: msg.msg_id,   // klucz podstawowy w Twojej tabeli\n    status: status\n};\n\n\nmsg.send_status = status;\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `${global.get(\"getDateTime\")()}`\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2320,
        "wires": [
            [
                "8b9fc2962856e082"
            ]
        ]
    },
    {
        "id": "8b9fc2962856e082",
        "type": "http request",
        "z": "be1c3f3f839ca819",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 720,
        "y": 2320,
        "wires": [
            [
                "6da7b5a7f804c679"
            ]
        ]
    },
    {
        "id": "29e6d846e7bdc6d4",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "prepare:data:email:template",
        "func": "\nlet data_for_template = {\n    message: msg.responseChatGPT.reply_message,\n    message_html: msg.responseChatGPT.reply_message_html,\n    tags: msg.responseChatGPT.tags,\n    intent: msg.responseChatGPT.email_intent\n}\n\nmsg.email_template_data = data_for_template;\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 660,
        "wires": [
            [
                "e1ac35e424150a0b"
            ]
        ]
    },
    {
        "id": "c762bac562c97480",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "name": "start-send:emial:from:template",
        "links": [
            "e1ac35e424150a0b"
        ],
        "x": 200,
        "y": 2220,
        "wires": [
            [
                "64745f9d409f056b"
            ]
        ],
        "l": true
    },
    {
        "id": "e1ac35e424150a0b",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "c762bac562c97480"
        ],
        "x": 2445,
        "y": 660,
        "wires": []
    },
    {
        "id": "6da7b5a7f804c679",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "end:send:emial:from:template",
        "mode": "link",
        "links": [
            "2939d454d30f1e52"
        ],
        "x": 985,
        "y": 2320,
        "wires": []
    },
    {
        "id": "2939d454d30f1e52",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "name": "start-email:set:processed",
        "links": [
            "6da7b5a7f804c679",
            "b7fa61b324b55bb0",
            "73c9a19a3a3e4a70",
            "8813c5dd42b8ad16",
            "c12e78b134f4567c",
            "c2d4ce240f9aadde"
        ],
        "x": 2285,
        "y": 1180,
        "wires": [
            [
                "8521c39907b05f75"
            ]
        ]
    },
    {
        "id": "3f80a813ff9a9363",
        "type": "debug",
        "z": "be1c3f3f839ca819",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1700,
        "wires": []
    },
    {
        "id": "49fad7c4acefac24",
        "type": "debug",
        "z": "be1c3f3f839ca819",
        "g": "24acd2baaff30f4c",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 2000,
        "wires": []
    },
    {
        "id": "613e610cc3a835e4",
        "type": "debug",
        "z": "be1c3f3f839ca819",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1680,
        "wires": []
    },
    {
        "id": "ba6ca4a312bb18eb",
        "type": "file in",
        "z": "be1c3f3f839ca819",
        "name": "read:PDF",
        "filename": "kind.path_file",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 1800,
        "y": 1660,
        "wires": [
            [
                "0984a229cf13b354"
            ]
        ]
    },
    {
        "id": "0984a229cf13b354",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "Format the header",
        "func": "msg.payload = {\n    file: {\n        value: msg.payload,  // The Buffer from the read file node\n        options: {\n            filename: msg.dest_file,\n            contentType: 'application/pdf'\n        }\n    }\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 1660,
        "wires": [
            [
                "f1aa88b8166cdd9d",
                "547a5646cae0a0d8"
            ]
        ]
    },
    {
        "id": "f1aa88b8166cdd9d",
        "type": "http request",
        "z": "be1c3f3f839ca819",
        "name": "NocoDB - UPLOAD",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/storage/upload",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "multipart/form-data",
                "valueValue": ""
            }
        ],
        "x": 2230,
        "y": 1660,
        "wires": [
            [
                "130b6b391a470d25",
                "3c999acd4c1e0c07"
            ]
        ]
    },
    {
        "id": "547a5646cae0a0d8",
        "type": "debug",
        "z": "be1c3f3f839ca819",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 1720,
        "wires": []
    },
    {
        "id": "36b09dfb5bfdca64",
        "type": "debug",
        "z": "be1c3f3f839ca819",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2520,
        "y": 1720,
        "wires": []
    },
    {
        "id": "3c999acd4c1e0c07",
        "type": "debug",
        "z": "be1c3f3f839ca819",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2260,
        "y": 1720,
        "wires": []
    },
    {
        "id": "817eac3f892f84f9",
        "type": "delay",
        "z": "be1c3f3f839ca819",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1640,
        "y": 1660,
        "wires": [
            [
                "ba6ca4a312bb18eb"
            ]
        ]
    },
    {
        "id": "985d625385b7399d",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "g": "863158746555e7a5",
        "name": "kind:check",
        "func": "\nmsg.kind = {\n    \"Id\": msg.umowa.Id,\n    \"status\": \"25 contract-ok\",\n    \"umowa_podpisana\": true,\n    \"path_file\": msg.path_umowa_podpisana_email_pdf,\n    \"umowa_podpisana_why\": \"sh256\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1600,
        "wires": [
            [
                "817eac3f892f84f9"
            ]
        ]
    },
    {
        "id": "169430d5a6c292d8",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "kind:check",
        "func": "\nmsg.kind = {\n    \"Id\": msg.umowa.Id,\n    \"status\": \"25 contract-ok\",\n    \"umowa_podpisana\": true,\n    \"path_file\": msg.umowa.path_pdf_zalaczniki,\n    \"umowa_podpisana_why\": \"chatgpt\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1780,
        "wires": [
            [
                "817eac3f892f84f9"
            ]
        ]
    },
    {
        "id": "073079b90e2b805f",
        "type": "comment",
        "z": "be1c3f3f839ca819",
        "name": "jezel mial wyzszy stan naprzyklad zaplacil nie zmieniac ",
        "info": "",
        "x": 2720,
        "y": 1140,
        "wires": []
    },
    {
        "id": "30146bbb67aa2593",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "msg:telegram",
        "func": "let umowa_nr = msg.email_find.nr_umowy || msg.email_find.nr_umowy_from_filename;\n\nconst template_data = {\n    rejs_name: msg.umowa.rejsy.nazwa,\n    umowa_nr: umowa_nr\n};\n\nmsg.message = {\n    template_in_row: \"üìß: Dotar≈Ça podpisana umowa {{umowa_nr}} na rejs {{rejs_name}}\",\n    template_data: template_data,\n    kind: \"telegram\",\n    to_group: \"admin\",\n    to: \"admin\",\n\n    // to: msg.payload.value  // np. \"234242,23424234,24\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 1720,
        "wires": [
            [
                "94b362f32fa52ed8"
            ]
        ]
    },
    {
        "id": "94b362f32fa52ed8",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "link out 28",
        "mode": "link",
        "links": [
            "b38c6c11d0212c18"
        ],
        "x": 2965,
        "y": 1720,
        "wires": []
    },
    {
        "id": "7a894a5a3b5e9620",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "msg:telegram: mail_delivery_failed",
        "func": "const template_data = {\n    data: \"data\"\n};\n\nmsg.message = {\n    template_in_row: \"üìß Z≈Çy email przy rejestracji. Nie mog≈Çem wys≈Çaƒá emaila.\",\n    template_data: template_data,\n    kind: \"telegram\",\n    to_group: \"dev\",\n    to: \"admin\",\n\n    // to: msg.payload.value  // np. \"234242,23424234,24\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 320,
        "wires": [
            [
                "d7dd5f2f89bb925e"
            ]
        ]
    },
    {
        "id": "d7dd5f2f89bb925e",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "link out 29",
        "mode": "link",
        "links": [
            "b38c6c11d0212c18"
        ],
        "x": 2255,
        "y": 320,
        "wires": []
    },
    {
        "id": "b7fa61b324b55bb0",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "mail_delivery_failed",
        "mode": "link",
        "links": [
            "2939d454d30f1e52",
            "834376900a7555b1"
        ],
        "x": 1570,
        "y": 960,
        "wires": [],
        "l": true
    },
    {
        "id": "834376900a7555b1",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "name": "link in 11",
        "links": [
            "b7fa61b324b55bb0"
        ],
        "x": 1755,
        "y": 320,
        "wires": [
            [
                "7a894a5a3b5e9620"
            ]
        ]
    },
    {
        "id": "73c9a19a3a3e4a70",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "no_contract_found",
        "mode": "link",
        "links": [
            "2939d454d30f1e52",
            "69f5bd99f87c877c"
        ],
        "x": 1570,
        "y": 1000,
        "wires": [],
        "l": true
    },
    {
        "id": "a1d5047fa8a97cdc",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "link out 30",
        "mode": "link",
        "links": [
            "b38c6c11d0212c18"
        ],
        "x": 2255,
        "y": 380,
        "wires": []
    },
    {
        "id": "3075918d085ebabe",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "msg:telegram: no_contract_found",
        "func": "let umowa_nr = msg.email_find.nr_umowy || msg.email_find.nr_umowy_from_filename;\n\nconst template_data = {\n    rejs_name: msg.umowa.rejsy.nazwa,\n    umowa_nr: umowa_nr\n};\n\nmsg.message = {\n    template_in_row: \"üìß Z≈Çy email przy rejestracji. Nie mog≈Çem wys≈Çaƒá emaila.\",\n    template_data: template_data,\n    kind: \"telegram\",\n    to_group: \"dev\",\n    to: \"dev\",\n\n    // to: msg.payload.value  // np. \"234242,23424234,24\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 380,
        "wires": [
            [
                "a1d5047fa8a97cdc"
            ]
        ]
    },
    {
        "id": "69f5bd99f87c877c",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "name": "link in 12",
        "links": [
            "73c9a19a3a3e4a70"
        ],
        "x": 1755,
        "y": 380,
        "wires": [
            [
                "3075918d085ebabe"
            ]
        ]
    },
    {
        "id": "8813c5dd42b8ad16",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "brak_danych",
        "mode": "link",
        "links": [
            "2939d454d30f1e52",
            "bce1e1481b12fda2"
        ],
        "x": 1550,
        "y": 1040,
        "wires": [],
        "l": true
    },
    {
        "id": "1e344fabe6b4e291",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "link out 31",
        "mode": "link",
        "links": [
            "b38c6c11d0212c18"
        ],
        "x": 2255,
        "y": 440,
        "wires": []
    },
    {
        "id": "3b74e06482d83045",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "msg:telegram: brak_danych",
        "func": "const template_data = {\n    subject: msg.email.subject\n};\n\nmsg.message = {\n    template_in_row: `[dev] üìß brak_danych \n    subject: {{subject}}\n`,\n    template_data: template_data,\n    kind: \"telegram\",\n    to_group: \"dev\",\n    to: \"dev\",\n\n    // to: msg.payload.value  // np. \"234242,23424234,24\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 440,
        "wires": [
            [
                "1e344fabe6b4e291"
            ]
        ]
    },
    {
        "id": "bce1e1481b12fda2",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "name": "link in 13",
        "links": [
            "8813c5dd42b8ad16"
        ],
        "x": 1755,
        "y": 440,
        "wires": [
            [
                "3b74e06482d83045"
            ]
        ]
    },
    {
        "id": "c12e78b134f4567c",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "inne_probably_contract",
        "mode": "link",
        "links": [
            "2939d454d30f1e52",
            "254532dd82375f54"
        ],
        "x": 1590,
        "y": 880,
        "wires": [],
        "l": true
    },
    {
        "id": "c2d4ce240f9aadde",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "uuid_only",
        "mode": "link",
        "links": [
            "2939d454d30f1e52",
            "a31fa2b34cd15b69",
            "254532dd82375f54"
        ],
        "x": 1540,
        "y": 920,
        "wires": [],
        "l": true
    },
    {
        "id": "1d1046a9ec0eb8fa",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "link out 32",
        "mode": "link",
        "links": [
            "b38c6c11d0212c18"
        ],
        "x": 2255,
        "y": 260,
        "wires": []
    },
    {
        "id": "c4548b582caafa0f",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "msg:telegram: uuid_only",
        "func": "const template_data = {\n    subject: msg.email.subject\n};\n\nmsg.message = {\n    template_in_row: `[dev] üìß uuid_only\n    subject: {{subject}}\n`,\n    template_data: template_data,\n    kind: \"telegram\",\n    to_group: \"dev\",\n    to: \"dev\",\n\n    // to: msg.payload.value  // np. \"234242,23424234,24\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 260,
        "wires": [
            [
                "1d1046a9ec0eb8fa"
            ]
        ]
    },
    {
        "id": "a31fa2b34cd15b69",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "name": "link in 14",
        "links": [
            "c2d4ce240f9aadde"
        ],
        "x": 1755,
        "y": 260,
        "wires": [
            [
                "c4548b582caafa0f"
            ]
        ]
    },
    {
        "id": "716b8a5fab1f1112",
        "type": "link out",
        "z": "be1c3f3f839ca819",
        "name": "link out 33",
        "mode": "link",
        "links": [
            "b38c6c11d0212c18"
        ],
        "x": 2255,
        "y": 200,
        "wires": []
    },
    {
        "id": "f8bf790d315c5a9a",
        "type": "function",
        "z": "be1c3f3f839ca819",
        "name": "msg:telegram: inne_probably_contract",
        "func": "const template_data = {\n    subject: msg.email.subject\n};\n\nmsg.message = {\n    template_in_row: `[dev] üìß inne_probably_contract\n    subject: {{subject}}\n`,\n    template_data: template_data,\n    kind: \"telegram\",\n    to_group: \"dev\",\n    to: \"dev\",\n\n    // to: msg.payload.value  // np. \"234242,23424234,24\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 200,
        "wires": [
            [
                "716b8a5fab1f1112"
            ]
        ]
    },
    {
        "id": "254532dd82375f54",
        "type": "link in",
        "z": "be1c3f3f839ca819",
        "name": "link in 15",
        "links": [
            "c2d4ce240f9aadde",
            "c12e78b134f4567c"
        ],
        "x": 1755,
        "y": 200,
        "wires": [
            [
                "f8bf790d315c5a9a"
            ]
        ]
    },
    {
        "id": "353379d5bcdeee09",
        "type": "http in",
        "z": "6ef65b964aaf43e6",
        "g": "49c2be5b620ebeda",
        "name": "",
        "url": "/api/rejsy/get",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "9a824614bd5da150"
            ]
        ]
    },
    {
        "id": "b8e46ab11cd82e31",
        "type": "http response",
        "z": "6ef65b964aaf43e6",
        "g": "49c2be5b620ebeda",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1140,
        "y": 140,
        "wires": []
    },
    {
        "id": "e2ee6162640b5a29",
        "type": "function",
        "z": "6ef65b964aaf43e6",
        "g": "49c2be5b620ebeda",
        "name": "prepare:response",
        "func": "let output = [];\n\nconst today = new Date(); // dzisiejsza data bez czasu\ntoday.setHours(0, 0, 0, 0);\n\nif (msg.payload && Array.isArray(msg.payload.list)) {\n    for (let item of msg.payload.list) {\n        const free_space = (item.ilosc_max || 0) - (item.ilosc_wyk || 0);\n        const termin_od = (item.termin_od || \"\").replaceAll(\"-\", \".\");\n        const termin_do = (item.termin_do || \"\").replaceAll(\"-\", \".\");\n\n        let name = `${item.nazwa} [${termin_od} - ${termin_do}]`;\n        if (free_space <= 0) {\n            name += \" BRAK MIEJSC\";\n        }\n\n        let pay_full = false;\n        if (item.termin_30) {\n            const date_30 = new Date(item.termin_30);\n            date_30.setHours(0, 0, 0, 0); // usu≈Ñ czas\n\n            // je≈ºeli termin_30 jest dzisiejszy lub wcze≈õniejszy\n            if (date_30 <= today) {\n                pay_full = true;\n            }\n        }\n\n        output.push({\n            name: name,\n            value: item.Id,\n            free_space: free_space,\n            cena: item.cena || 0,\n            czym: item.czym,\n            brak_miejsc: free_space <= 0,\n            cena_c: item.cena_c || \"PLN\",\n            pay_full: pay_full\n        });\n    }\n}\n\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 140,
        "wires": [
            [
                "b8e46ab11cd82e31"
            ]
        ]
    },
    {
        "id": "9a824614bd5da150",
        "type": "subflow:03b285947d86a284",
        "z": "6ef65b964aaf43e6",
        "g": "49c2be5b620ebeda",
        "name": "",
        "x": 340,
        "y": 140,
        "wires": [
            [
                "5c111b1ca0dd686e"
            ]
        ]
    },
    {
        "id": "5c111b1ca0dd686e",
        "type": "function",
        "z": "6ef65b964aaf43e6",
        "g": "49c2be5b620ebeda",
        "name": "NocoDB - rejsy:get",
        "func": "msg.nocodb_t_active = msg.nocodb_t.rejsy;\n\nlet nr_k = msg.payload.nr_k;\n\nmsg.form_data = msg.payload;\n\nmsg.payload = {\n    offset: '0',\n    limit: '25',\n    viewId: msg.nocodb_t.rejsy_view,\n    where: `(status,eq,active)`\n};\n//${nr_k}\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 140,
        "wires": [
            [
                "f6fc7c875e15e454"
            ]
        ]
    },
    {
        "id": "f6fc7c875e15e454",
        "type": "http request",
        "z": "6ef65b964aaf43e6",
        "g": "49c2be5b620ebeda",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 740,
        "y": 140,
        "wires": [
            [
                "e2ee6162640b5a29"
            ]
        ]
    },
    {
        "id": "d9b3f86bef90891d",
        "type": "comment",
        "z": "6ef65b964aaf43e6",
        "g": "49c2be5b620ebeda",
        "name": "Respone Json",
        "info": "Zwraca rejsy do formularza w formie jsona.",
        "x": 130,
        "y": 80,
        "wires": []
    },
    {
        "id": "e9c1304f5f90927e",
        "type": "http in",
        "z": "7f8edcc91438aff6",
        "g": "de07ac967b5ab328",
        "name": "",
        "url": "/api/rejsy/zapisz",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "eb069a6838953468"
            ]
        ]
    },
    {
        "id": "c9199959da0f2652",
        "type": "http response",
        "z": "7f8edcc91438aff6",
        "g": "de07ac967b5ab328",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 820,
        "y": 520,
        "wires": []
    },
    {
        "id": "8b0f70caea35ed13",
        "type": "function",
        "z": "7f8edcc91438aff6",
        "g": "de07ac967b5ab328",
        "name": "NocoDB:post:osoba",
        "func": "delete msg.headers;\ndelete msg.method;\ndelete msg.responseCookies;\n\nmsg.nocodb_t_active = msg.nocodb_t.osoby;\n\nmsg.payload = msg.data_form;\n\n// const uploadedFile = msg.payload[0];\n\nconst now = new Date();\nconst pad = (n) => n.toString().padStart(2, '0');\n\nconst year = now.getFullYear();\nconst month = pad(now.getMonth() + 1);\nconst day = pad(now.getDate());\nconst hours = pad(now.getHours());\nconst minutes = pad(now.getMinutes());\nconst seconds = pad(now.getSeconds());\n\n// const uuid = global.get(\"uuidv4\")();\n\nmsg.form = {\n    \"liczbaOsob\": msg.payload.data.liczbaOsob,\n    \"rejsId\": msg.payload.data.rejsId,\n}\n\n// Prepare the update payload for the record\nmsg.payload = {\n    \"cj5mwpsab4bh5zv\": msg.payload.data.imie,\n    \"cm1fyirgmdcemtv\": msg.payload.data.nazwisko,\n    \"c5hrv18inqamu4d\": msg.payload.data.email,\n    \"co7qha0ikufbnjx\": msg.payload.data.telefon,\n    \"cb0a24v6fm28sj0\": msg.payload.data.miejsceUrodzenia,\n    \"c77doycdzvddszv\": msg.payload.data.dataUrodzenia ,\n    \"ca42qwypv1kcyh7\": msg.payload.data.adresZamieszkania ,\n    \"cioe98sbu9qwxjg\": msg.payload.data.nrDokumentu ,\n    \"cp07bymy87xk9qf\": msg.payload.data.uprawnienia ,\n    \"cfihnz9e66moiug\": msg.payload.data.rozmiarKoszulki ,\n    \"cfewcth4yte2zhr\": msg.payload.data.osobaKontaktowaImieNazwisko + ' ' + msg.payload.data.osobaKontaktowaTelefon ,\n    uuid: msg.uuid,\n    \"rodo\": msg.payload.data.regulamin,\n    \"oswiadczenie\": msg.payload.data.oswiadczenie,\n    \"umie_plywac\": msg.payload.data.plywanie\n};\nmsg.method = \"POST\";\n\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 320,
        "wires": [
            [
                "050dabcd08732f94"
            ]
        ]
    },
    {
        "id": "050dabcd08732f94",
        "type": "http request",
        "z": "7f8edcc91438aff6",
        "g": "de07ac967b5ab328",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 580,
        "y": 320,
        "wires": [
            [
                "24362b7ab3a611b8"
            ]
        ]
    },
    {
        "id": "eb069a6838953468",
        "type": "subflow:03b285947d86a284",
        "z": "7f8edcc91438aff6",
        "g": "de07ac967b5ab328",
        "name": "",
        "x": 340,
        "y": 160,
        "wires": [
            [
                "dc114f2912e02c94"
            ]
        ]
    },
    {
        "id": "388e845554a0cdbb",
        "type": "function",
        "z": "7f8edcc91438aff6",
        "g": "de07ac967b5ab328",
        "name": "NocoDB:post:umowy",
        "func": "delete msg.headers;\ndelete msg.method;\ndelete msg.responseCookies;\n\nmsg.nocodb_t_active = msg.nocodb_t.umowy;\nconst rejs = msg.payload.list[0];\n\nconst now = new Date();\nconst pad = (n) => n.toString().padStart(2, '0');\n\nconst today = new Date(); // dzisiejsza data bez czasu\ntoday.setHours(0, 0, 0, 0);\n\nconst year = now.getFullYear();\nconst month = pad(now.getMonth() + 1);\nconst day = pad(now.getDate());\nconst hours = pad(now.getHours());\nconst minutes = pad(now.getMinutes());\nconst seconds = pad(now.getSeconds());\n\nconst uuid = global.get(\"uuidv4\")();\n\nconst rezerwacja_cena = rejs.cena * msg.form.liczbaOsob;\nconst rezerwacja_cena_rata1 = Math.floor(rezerwacja_cena * 0.3);\nconst rezerwacja_cena_rata2 = rezerwacja_cena - rezerwacja_cena_rata1; \nconst cena_wydatki = rejs.cena_wydatki * msg.form.liczbaOsob;\nconst cena_zaokretowania = rejs.cena_zaokretowania * msg.form.liczbaOsob;\n\nlet umowa_platnosc = \"raty\";\nif (rejs.termin_30) {\n    const date_30 = new Date(rejs.termin_30);\n    date_30.setHours(0, 0, 0, 0); // usu≈Ñ czas\n\n    // je≈ºeli termin_30 jest dzisiejszy lub wcze≈õniejszy\n    if (date_30 <= today) {\n        umowa_platnosc = \"full\";\n    }\n}\n\nmsg.payload = {\n    \"nc_5cf7__osoby_id\": msg.osoba_id,\n    \"cdp5l9hs8gbe7kn\": msg.form.liczbaOsob,\n    \"nc_5cf7___rejsy_id\": msg.form.rejsId,\n    uuid: uuid,\n    \"nazwa\": \"Umowa - wait for confirm\",\n    \"rezerwacja_cena\": rezerwacja_cena,\n    \"rezerwacja_cena_rata1\": rezerwacja_cena_rata1,\n    \"rezerwacja_cena_rata2\": rezerwacja_cena_rata2,\n    \"cena_wydatki\": cena_wydatki,\n    \"cena_zaokretowania\": cena_zaokretowania,\n    app_year: year,\n    app_month: month,\n    \"umowa_platnosc\": umowa_platnosc\n}\n\nmsg.rejs = rejs;\n\nmsg.method = \"POST\";\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 520,
        "wires": [
            [
                "d747d5ba3cbab626"
            ]
        ]
    },
    {
        "id": "d747d5ba3cbab626",
        "type": "http request",
        "z": "7f8edcc91438aff6",
        "g": "de07ac967b5ab328",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 580,
        "y": 520,
        "wires": [
            [
                "c9199959da0f2652",
                "a0a5e4714542e56a"
            ]
        ]
    },
    {
        "id": "24362b7ab3a611b8",
        "type": "function",
        "z": "7f8edcc91438aff6",
        "g": "de07ac967b5ab328",
        "name": "NocoDB - rejsy:get:Id",
        "func": "delete msg.headers;\ndelete msg.method;\ndelete msg.responseCookies;\n\nmsg.nocodb_t_active = msg.nocodb_t.rejsy;\n\nmsg.osoba_id = msg.payload.Id;\n\nmsg.payload = {\n    offset: '0',\n    limit: '1',\n    viewId: msg.nocodb_t.rejsy_view,\n    where: `(Id,eq,${msg.form.rejsId})`,\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "8aff7492ecde8657"
            ]
        ]
    },
    {
        "id": "8aff7492ecde8657",
        "type": "http request",
        "z": "7f8edcc91438aff6",
        "g": "de07ac967b5ab328",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 580,
        "y": 420,
        "wires": [
            [
                "388e845554a0cdbb"
            ]
        ]
    },
    {
        "id": "dfbd52e418f9fe83",
        "type": "comment",
        "z": "7f8edcc91438aff6",
        "g": "de07ac967b5ab328",
        "name": "Save Form",
        "info": "Przyjmuje dane z formularza i zapisuje je do NoCoDB.\n- do osoby\n- do umowy",
        "x": 120,
        "y": 80,
        "wires": []
    },
    {
        "id": "dc114f2912e02c94",
        "type": "function",
        "z": "7f8edcc91438aff6",
        "g": "de07ac967b5ab328",
        "name": "check:Cloudflare",
        "func": "delete msg.headers;\ndelete msg.method;\ndelete msg.responseCookies;\n\nconst token = msg.payload.turnstileToken;\nmsg.data_form = msg.payload;\n\nconst ip = msg.req?.ip || \"\";  // opcjonalnie IP klienta, je≈õli chcesz\n\nif (!token) {\n    node.status({ fill: \"red\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\n    return [null, { payload: \"Brak tokenu Cloudflare Turnstile\", statusCode: 400 }];\n}\n\n// przygotuj zapytanie do Cloudflare\nmsg.method = \"POST\";\nmsg.url = \"https://challenges.cloudflare.com/turnstile/v0/siteverify\";\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n};\nmsg.payload = `secret=${encodeURIComponent(global.get(\"cf_turnstile_secret\"))}&response=${encodeURIComponent(token)}&remoteip=${ip}`;\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 160,
        "wires": [
            [
                "37e28c92b2c5de6a"
            ],
            []
        ]
    },
    {
        "id": "37e28c92b2c5de6a",
        "type": "http request",
        "z": "7f8edcc91438aff6",
        "g": "de07ac967b5ab328",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 160,
        "wires": [
            [
                "3b04fab737edca4b"
            ]
        ]
    },
    {
        "id": "3b04fab737edca4b",
        "type": "function",
        "z": "7f8edcc91438aff6",
        "g": "de07ac967b5ab328",
        "name": "veryfi:recapcha",
        "func": "try {\n    if (typeof msg.payload === \"string\") {\n        msg.payload = JSON.parse(msg.payload);\n    }\n} catch (e) {\n    node.status({ fill: \"red\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\n    return [null, { payload: \"Niepoprawna odpowied≈∫ z Cloudflare\", statusCode: 500 }];\n}\n\nif (!msg.payload.success) {\n    node.status({ fill: \"red\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\n    return [null, { payload: \"Weryfikacja Turnstile nie powiod≈Ça siƒô\", statusCode: 403 }];\n}\n\n// OK ‚Äî token zweryfikowany\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "8b0f70caea35ed13"
            ],
            []
        ]
    },
    {
        "id": "a0a5e4714542e56a",
        "type": "function",
        "z": "7f8edcc91438aff6",
        "name": "msg:telegram",
        "func": "const template_data = {\n    rejs_name: msg.rejs.nazwa\n};\n\nmsg.message = {\n    template_in_row: \"Nowa rejestracja na **rejs**: *{{rejs_name}}* \",\n    template_data: template_data,\n    kind: \"telegram\",\n    to_group: \"admin\",\n    to: \"admin\",\n\n    // to: msg.payload.value  // np. \"234242,23424234,24\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 660,
        "wires": [
            [
                "64b8d814115c9512"
            ]
        ]
    },
    {
        "id": "64b8d814115c9512",
        "type": "link out",
        "z": "7f8edcc91438aff6",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "b38c6c11d0212c18"
        ],
        "x": 1065,
        "y": 660,
        "wires": []
    },
    {
        "id": "0ad1c2e33d36b2e2",
        "type": "http in",
        "z": "8971cc29f27d4741",
        "g": "4ee9ee381cb20b47",
        "name": "",
        "url": "/api/check/email",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 360,
        "y": 140,
        "wires": [
            [
                "ee1d170117a16cb9"
            ]
        ]
    },
    {
        "id": "ee1d170117a16cb9",
        "type": "subflow:03b285947d86a284",
        "z": "8971cc29f27d4741",
        "g": "4ee9ee381cb20b47",
        "name": "",
        "x": 580,
        "y": 140,
        "wires": [
            [
                "92cf13ad610664b9"
            ]
        ]
    },
    {
        "id": "92cf13ad610664b9",
        "type": "function",
        "z": "8971cc29f27d4741",
        "g": "4ee9ee381cb20b47",
        "name": "NocoDB - umowy:get:new",
        "func": "msg.nocodb_t_active = msg.nocodb_t.umowy;\n\nmsg.form_data = msg.payload;\n\nmsg.payload = {\n    offset: '0',\n    limit: '25',\n    viewId: msg.nocodb_t.umowy_view,\n    where: `(status,eq,03 email-send)~and(uuid,eq,${msg.form_data.uuid})`,\n    \"nested[osoby][fields]\": \"*\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 140,
        "wires": [
            [
                "1843a6fb6ef174c8"
            ]
        ]
    },
    {
        "id": "1843a6fb6ef174c8",
        "type": "http request",
        "z": "8971cc29f27d4741",
        "g": "4ee9ee381cb20b47",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1160,
        "y": 140,
        "wires": [
            [
                "2da5f5f1636f4f75"
            ]
        ]
    },
    {
        "id": "2da5f5f1636f4f75",
        "type": "function",
        "z": "8971cc29f27d4741",
        "g": "4ee9ee381cb20b47",
        "name": "NocoDB:patch:osoby",
        "func": "msg.nocodb_t_active = msg.nocodb_t.osoby;\nmsg.umowa_data = msg.payload.list[0];\nmsg.method = \"PATCH\";\n// Domy≈õlny status\n// let status = false;\n\n// // Sprawdzenie p√≥l accepted/rejected\n// if (msg.payload.accepted && msg.payload.accepted.length > 0) {\n//     status = \"send\";\n// } else if (msg.payload.rejected && msg.payload.rejected.length > 0) {\n//     status = \"error\";\n// }\n\nmsg.payload = {\n    Id: msg.umowa_data.osoby.Id,   // klucz podstawowy w Twojej tabeli\n    email_confirmed: true\n};\n\n\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `${global.get(\"getDateTime\")()}`\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 280,
        "wires": [
            [
                "64fb459404f1d9ec"
            ]
        ]
    },
    {
        "id": "64fb459404f1d9ec",
        "type": "http request",
        "z": "8971cc29f27d4741",
        "g": "4ee9ee381cb20b47",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 720,
        "y": 280,
        "wires": [
            [
                "82659668adc9e858"
            ]
        ]
    },
    {
        "id": "82659668adc9e858",
        "type": "function",
        "z": "8971cc29f27d4741",
        "g": "4ee9ee381cb20b47",
        "name": "NocoDB:patch:umowy",
        "func": "msg.nocodb_t_active = msg.nocodb_t.umowy;\nmsg.method = \"PATCH\";\n\n// Domy≈õlny status\n// let status = false;\n\n// // Sprawdzenie p√≥l accepted/rejected\n// if (msg.payload.accepted && msg.payload.accepted.length > 0) {\n//     status = \"send\";\n// } else if (msg.payload.rejected && msg.payload.rejected.length > 0) {\n//     status = \"error\";\n// }\n\nmsg.payload = {\n    Id: msg.umowa_data.Id,   // klucz podstawowy w Twojej tabeli\n    email_confirmed: true,\n    status: \"05 email-confirmed\"\n};\n\n\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `${global.get(\"getDateTime\")()}`\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "6af24b5c04863e1b"
            ]
        ]
    },
    {
        "id": "6af24b5c04863e1b",
        "type": "http request",
        "z": "8971cc29f27d4741",
        "g": "4ee9ee381cb20b47",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 720,
        "y": 360,
        "wires": [
            [
                "d675709b0a7d7e1c"
            ]
        ]
    },
    {
        "id": "aafbd476563b4156",
        "type": "http response",
        "z": "8971cc29f27d4741",
        "g": "4ee9ee381cb20b47",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 740,
        "y": 440,
        "wires": []
    },
    {
        "id": "d675709b0a7d7e1c",
        "type": "function",
        "z": "8971cc29f27d4741",
        "g": "4ee9ee381cb20b47",
        "name": "response:ok",
        "func": "msg.payload = {\n    confirm: true\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 440,
        "wires": [
            [
                "aafbd476563b4156"
            ]
        ]
    },
    {
        "id": "76b5da44be016767",
        "type": "comment",
        "z": "8971cc29f27d4741",
        "g": "4ee9ee381cb20b47",
        "name": "Email Verifi",
        "info": "",
        "x": 120,
        "y": 80,
        "wires": []
    },
    {
        "id": "457e4508f7e0ebbb",
        "type": "subflow:03b285947d86a284",
        "z": "77589ba277290912",
        "name": "",
        "x": 280,
        "y": 60,
        "wires": [
            [
                "9a19d40e5b5b6fbc"
            ]
        ]
    },
    {
        "id": "2447803b251a8a64",
        "type": "inject",
        "z": "77589ba277290912",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "457e4508f7e0ebbb"
            ]
        ]
    },
    {
        "id": "9a19d40e5b5b6fbc",
        "type": "function",
        "z": "77589ba277290912",
        "name": "NocoDB - umowy:get:10 send-contract:3days",
        "func": "msg.nocodb_t_active = msg.nocodb_t.umowy;\n\nmsg.payload = {\n    offset: '0',\n    limit: '5',\n    viewId: msg.nocodb_t.umowy_view,\n    where: `(status,eq,10 send-contract)~and(umowa_data,lt,daysAgo,3)`,\n    \"nested[osoby][fields]\": \"*\",\n    \"nested[rejsy][fields]\": \"*\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 60,
        "wires": [
            [
                "01ca15d6cff87c3c"
            ]
        ]
    },
    {
        "id": "01ca15d6cff87c3c",
        "type": "http request",
        "z": "77589ba277290912",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 880,
        "y": 60,
        "wires": [
            [
                "3b93e7e10e1c1044"
            ]
        ]
    },
    {
        "id": "3b93e7e10e1c1044",
        "type": "debug",
        "z": "77589ba277290912",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 60,
        "wires": []
    },
    {
        "id": "40bb53708044b360",
        "type": "debug",
        "z": "77589ba277290912",
        "g": "f9bbfc32157cdb86",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 340,
        "wires": []
    },
    {
        "id": "49097134b356b2e0",
        "type": "http request",
        "z": "77589ba277290912",
        "g": "f9bbfc32157cdb86",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 900,
        "y": 300,
        "wires": [
            [
                "40bb53708044b360",
                "859efdb4505bae86"
            ]
        ]
    },
    {
        "id": "77e59c26a15a179d",
        "type": "function",
        "z": "77589ba277290912",
        "g": "f9bbfc32157cdb86",
        "name": "NocoDB - umowy:get:10 send-contract:2day",
        "func": "msg.nocodb_t_active = msg.nocodb_t.umowy;\n\nmsg.payload = {\n    offset: '0',\n    limit: '5',\n    viewId: msg.nocodb_t.umowy_view,\n    where: `(status,eq,10 send-contract)~and(umowa_data,eq,daysAgo,2)`,\n    \"nested[osoby][fields]\": \"*\",\n    \"nested[rejsy][fields]\": \"*\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 300,
        "wires": [
            [
                "49097134b356b2e0"
            ]
        ]
    },
    {
        "id": "a7ea8748e9067d11",
        "type": "subflow:03b285947d86a284",
        "z": "77589ba277290912",
        "g": "f9bbfc32157cdb86",
        "name": "",
        "x": 300,
        "y": 300,
        "wires": [
            [
                "77e59c26a15a179d"
            ]
        ]
    },
    {
        "id": "b5a91360a8ac5138",
        "type": "inject",
        "z": "77589ba277290912",
        "g": "f9bbfc32157cdb86",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "a7ea8748e9067d11"
            ]
        ]
    },
    {
        "id": "972686854135edc7",
        "type": "function",
        "z": "77589ba277290912",
        "g": "b1b6694d796f2268",
        "name": "msg:email",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: \"1/4 \" + global.get(\"getDateTime\")() });\n\n\n\n\n\n\n// const formdata = {\n//     \"osoba_name\": msg.umowa.imie,\n//     \"umowa_przedmiot\": msg.umowa.umowa_przedmiot,\n//     \"termin_od\": msg.umowa.termin_od,\n//     \"termin_do\": msg.umowa.termin_do,\n//     \"nr_umowy\": msg.umowa.nr_umowy,\n//     \"rezerwacja_cena_rata1\": msg.umowa.rezerwacja_cena_rata1,\n//     \"przelew_nazwa\": msg.umowa.przelew_nazwa,\n//     \"uuid\": msg.umowa_get.uuid,\n//     \"cena_c\": msg.umowa.cena_c,\n// }\nlet nr_umowy = msg.umowa.umowa_year + \"/\" + msg.umowa.umowa_nr;\n\nlet template_data = {\n    message_html: \"\",\n    \"przelew_nazwa\": nr_umowy + \" \" + msg.umowa.umowa_data,\n};\n\nfor (const [key, value] of Object.entries(msg.umowa || {})) {\n    template_data[\"umowa_\" + key] = value;\n}\n\nfor (const [key, value] of Object.entries(msg.firma || {})) {\n    template_data[\"firma_\" + key] = value;\n}\n\nfor (const [key, value] of Object.entries(msg.rejs || {})) {\n    template_data[\"rejs_\" + key] = value;\n}\n\nfor (const [key, value] of Object.entries(msg.osoba || {})) {\n    template_data[\"osoba_\" + key] = value;\n}\n\n\n\nlet is_pln_qr_code = \"\";\nlet is_nr_bank = \"\";\n\nif (template_data.rejs_cena_c == \"PLN\") {\n    is_nr_bank = `Numer rachunku PLN - <strong>${msg.firma.nr_konta_pln}</strong><br>`;\n    is_pln_qr_code = \"<p>Jeszcze przygotowa≈Çem dla Ciebie u≈Çatwienie je≈ºeli u≈ºywasz aplikacji mobilnej banku. Mo≈ºesz zeskanowaƒá qrcode i wszystkie dane siƒô uzupe≈ÇniƒÖ samoistnie.</p><p><img src=\\\"cid:barcode.png\\\" alt=\\\"QR Code do przelewu\\\" class=\\\"qr-code\\\"></p>\"\n} else {\n    is_nr_bank = `Numer rachunku EUR - <strong>${msg.firma.nr_konta_eur}</strong><br>`;\n}\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"2/4 \" + global.get(\"getDateTime\")() });\n\ntemplate_data.is_pln_qr_code = is_pln_qr_code;\ntemplate_data.is_nr_bank = is_nr_bank;\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"3/4 \" + global.get(\"getDateTime\")() });\n\n\nmsg.message = {\n    template: \"email_payment_2day_rata1.html\",\n    template_data: template_data,\n    kind: \"email\",\n    to_group: \"admin\",\n    to: \"admin\",\n\n    email: \"netruner80@gmail.com\",\n    subject: \"ok bedzie dobrze\",\n    // to: msg.payload.value  // np. \"234242,23424234,24\"\n    // template_in_row: \"Nowa rejestracja na **rejs**: *{{rejs_name}}* \",\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 880,
        "wires": [
            [
                "fffab29afffa0ca2",
                "f06c0fd4ec506f23"
            ]
        ]
    },
    {
        "id": "9407368179ec2d01",
        "type": "function",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "separate records",
        "func": "let rows = msg.q.list;\n\nmsg.payload = rows.map(row => {\n    let singleMsg = RED.util.cloneMessage(msg); // duplikujemy oryginalny msg\n    singleMsg.payload = row;\n    return singleMsg;\n});\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn [msg.payload]; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 580,
        "wires": [
            [
                "2c09b68be327efc7"
            ]
        ]
    },
    {
        "id": "2c09b68be327efc7",
        "type": "q-gate",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "q-control-monitoring-day02",
        "controlTopic": "control-monitoring-day02",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "100",
        "keepNewest": false,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 480,
        "y": 580,
        "wires": [
            [
                "95447c54ed5bcc29"
            ]
        ]
    },
    {
        "id": "24c3c48b7f9e604e",
        "type": "link in",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "start-all_node_get_next",
        "links": [
            "fffab29afffa0ca2"
        ],
        "x": 140,
        "y": 700,
        "wires": [
            [
                "ffecdc961fc788a3"
            ]
        ],
        "l": true
    },
    {
        "id": "ffecdc961fc788a3",
        "type": "function",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "get next",
        "func": "const q = flow.get('q');\nnode.send({ topic: q.ct, payload: \"drop\"})\nmsg.topic = q.ct\nmsg.payload = \"peek\"\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 700,
        "wires": [
            [
                "2c09b68be327efc7"
            ]
        ]
    },
    {
        "id": "32b4a119168a6867",
        "type": "status",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "q-status",
        "scope": [
            "2c09b68be327efc7"
        ],
        "x": 100,
        "y": 640,
        "wires": [
            [
                "1182af59a084503f"
            ]
        ]
    },
    {
        "id": "1182af59a084503f",
        "type": "function",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "check if first in q",
        "func": "const statusText = msg.status.text;\nconst processing_tag = \"processing-control-monitoring-day02\";\nlet processing = flow.get(processing_tag) || false;\nconst q = flow.get('q');\n\n// Dopasuj liczbƒô po \"queuing:\"\nconst match = statusText.match(/queuing:\\s*(\\d+)/);\n\nif (match) {\n    const queuingCount = parseInt(match[1], 10);\n    node.status({ fill: \"gray\", shape: \"ring\", text: queuingCount });\n    const timestamp = global.get(\"getDateTime\")();\n\n    // Ustaw status wƒôz≈Ça\n    node.status({\n        fill: queuingCount > 0 ? \"yellow\" : \"green\",\n        shape: \"dot\",\n        text: `${timestamp} | queuing: ${queuingCount}`\n    });\n\n    if (queuingCount == 0) {\n        flow.set(processing_tag, false);\n        msg.payload = \"end\";\n        node.status({ fill: \"gray\", shape: \"dot\", text: \"processing end\"  });\n        return msg;\n    }\n\n    \n        \n        if (queuingCount > 0) {\n\n            if (!processing) {\n                flow.set(processing_tag, true);\n                msg.topic = q.ct;\n                msg.payload = \"peek\";\n                node.status({ fill: \"gray\", shape: \"dot\", text: \"od true\" });\n                return msg;\n            } else {\n                node.status({ fill: \"gray\", shape: \"dot\", text: \"od false\" });\n            }\n\n            // msg.payload = {\n            //     queuing: queuingCount,\n            //     time: timestamp, peek\n            //     rawStatus: statusText\n            // };\n            node.status({ fill: \"gray\", shape: \"dot\", text: processing });\n            // return msg;\n        \n    } else {\n        node.status({ fill: \"green\", shape: \"dot\", text: \"processing ...\" });\n    }\n}\n\n// Je≈õli nie pasuje ‚Äì wyczy≈õƒá status i nic nie wysy≈Çaj\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"no match or queuing ‚â§ 1\" });\n// node.status({ fill: \"gray\", shape: \"ring\", text: match });\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 640,
        "wires": [
            [
                "341bc6749a92c644"
            ]
        ]
    },
    {
        "id": "1aa6815b8796ee9a",
        "type": "delay",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 640,
        "wires": [
            [
                "2c09b68be327efc7"
            ]
        ]
    },
    {
        "id": "341bc6749a92c644",
        "type": "switch",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "peek",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "end",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 640,
        "wires": [
            [
                "1aa6815b8796ee9a"
            ],
            []
        ]
    },
    {
        "id": "16ba26b1271e6af5",
        "type": "function",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "q-config:control-monitoring-day02",
        "func": "msg.q = {\n    ct: \"control-monitoring-day02\",\n    list: msg.payload.list,\n}\n\nflow.set(\"q\", msg.q);\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 460,
        "wires": [
            [
                "9407368179ec2d01"
            ]
        ]
    },
    {
        "id": "6f53c036e57e020f",
        "type": "link in",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "link in 9",
        "links": [
            "859efdb4505bae86"
        ],
        "x": 55,
        "y": 460,
        "wires": [
            [
                "16ba26b1271e6af5"
            ]
        ]
    },
    {
        "id": "95447c54ed5bcc29",
        "type": "link out",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "link out 24",
        "mode": "link",
        "links": [
            "73af710f88d8f0ae"
        ],
        "x": 755,
        "y": 700,
        "wires": []
    },
    {
        "id": "adef80085c9ba213",
        "type": "inject",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "q.ct",
                "vt": "flow"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "x": 710,
        "y": 580,
        "wires": [
            [
                "2c09b68be327efc7"
            ]
        ]
    },
    {
        "id": "c618303a32bfc6e2",
        "type": "function",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "up:status:new_to_queue",
        "func": "let rows = msg.payload.list;\n\nmsg.method = \"PATCH\";\nmsg.payload = rows.map(row => {\n    let singleMsg = {\n        \"Id\": row.Id,\n        \"status\": \"queue\"\n    };\n\n    return singleMsg;\n});\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 520,
        "wires": [
            [
                "fb8eceb8c074d48f"
            ]
        ]
    },
    {
        "id": "fb8eceb8c074d48f",
        "type": "http request",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 440,
        "y": 520,
        "wires": [
            [
                "812ef4a3b678cf9d"
            ]
        ]
    },
    {
        "id": "812ef4a3b678cf9d",
        "type": "function",
        "z": "77589ba277290912",
        "g": "73239419c2047320",
        "name": "NocoDB - analize save",
        "func": "if (msg.payload && msg.payload.length > 0) {\n    node.status({ fill: \"grey\", shape: \"ring\", text: `update rows: ${msg.payload.length}` });\n    msg.statusText = `update rows: ${msg.payload.length}`;\n    return msg;\n}\n\n\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"Brak danych\" });\nmsg.statusText = \"no records update\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 520,
        "wires": [
            [
                "9407368179ec2d01"
            ]
        ]
    },
    {
        "id": "859efdb4505bae86",
        "type": "link out",
        "z": "77589ba277290912",
        "g": "f9bbfc32157cdb86",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "6f53c036e57e020f"
        ],
        "x": 1165,
        "y": 300,
        "wires": []
    },
    {
        "id": "73af710f88d8f0ae",
        "type": "link in",
        "z": "77589ba277290912",
        "g": "b1b6694d796f2268",
        "name": "link in 10",
        "links": [
            "95447c54ed5bcc29"
        ],
        "x": 55,
        "y": 880,
        "wires": [
            [
                "627e76625d5f573d"
            ]
        ]
    },
    {
        "id": "fffab29afffa0ca2",
        "type": "link out",
        "z": "77589ba277290912",
        "g": "b1b6694d796f2268",
        "name": "link out 25",
        "mode": "link",
        "links": [
            "24c3c48b7f9e604e"
        ],
        "x": 1005,
        "y": 840,
        "wires": []
    },
    {
        "id": "6036a778a9287460",
        "type": "function",
        "z": "77589ba277290912",
        "g": "b1b6694d796f2268",
        "name": "NocoDB - firma:get:info",
        "func": "msg.config = {};\nmsg.config.limit = 25;\nmsg.config.parametr = \"*\"\nmsg.config.kind = \"firma\";\nmsg.config.flat = \"firma\";\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;\n\n\n\n\n// msg.nocodb_t_active = msg.nocodb_t.app_config;\n\n// msg.payload = {\n//     offset: '0',\n//     limit: '25',\n//     viewId: msg.nocodb_t.app_config_view,\n//     where: `(kind,eq,firma)`\n// };\n\n// node.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\n// return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 880,
        "wires": [
            [
                "5786daab56f2e47a"
            ]
        ]
    },
    {
        "id": "5786daab56f2e47a",
        "type": "subflow:54b98742948036f5",
        "z": "77589ba277290912",
        "g": "b1b6694d796f2268",
        "name": "",
        "x": 660,
        "y": 880,
        "wires": [
            [
                "972686854135edc7"
            ]
        ]
    },
    {
        "id": "f06c0fd4ec506f23",
        "type": "link out",
        "z": "77589ba277290912",
        "g": "b1b6694d796f2268",
        "name": "link out 26",
        "mode": "link",
        "links": [
            "d34147cb0559b0fc"
        ],
        "x": 1005,
        "y": 880,
        "wires": []
    },
    {
        "id": "627e76625d5f573d",
        "type": "function",
        "z": "77589ba277290912",
        "g": "b1b6694d796f2268",
        "name": "set:data",
        "func": "msg.umowa = msg.payload;\nmsg.rejs = msg.payload.rejsy;\nmsg.osoba = msg.payload.osoby;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 880,
        "wires": [
            [
                "6036a778a9287460"
            ]
        ]
    },
    {
        "id": "777d95f82f496b75",
        "type": "comment",
        "z": "77589ba277290912",
        "g": "b1b6694d796f2268",
        "name": "wysli emaila z przypomnieniem",
        "info": "",
        "x": 170,
        "y": 820,
        "wires": []
    },
    {
        "id": "04454ff8b22a7a5f",
        "type": "comment",
        "z": "77589ba277290912",
        "name": "czy robic kolejke = queue czy wytarczy raz opalenie dzienie ",
        "info": "",
        "x": 1080,
        "y": 440,
        "wires": [],
        "icon": "font-awesome/fa-exclamation"
    },
    {
        "id": "a977c1487e0d24c5",
        "type": "function",
        "z": "c74ceced8c3687a1",
        "name": "function 2",
        "func": "// const fs = require(\"fs\");\n\n// const createReport = require(\"docx-templates\").default;\nconst createReport = global.get(\"docx-templates\");\n\nconst template = msg.payload;\n\n(async () => {\n    // const template = fs.readFileSync(\"/zewnflowai/umowy/szablon.docx\");\n    // const data = JSON.parse(fs.readFileSync(\"/tmp/dane.json\"));\n\n    const data = {\n        nr_umowy: \"12/12\",\n        data_zawarcia: \"2025-05-24\",\n    };\n\n    const buffer = await createReport({\n        template,\n        data\n    });\n\n    msg.payload = buffer;\n    // fs.writeFileSync(\"/zewnflowai/umowy/wypelniona.docx\", buffer);\n})();",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 620,
        "wires": [
            [
                "6aadcda335adcd24",
                "aa20ba6ab7f01f61"
            ]
        ]
    },
    {
        "id": "6aadcda335adcd24",
        "type": "debug",
        "z": "c74ceced8c3687a1",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 540,
        "wires": []
    },
    {
        "id": "f850f1b4e43d171b",
        "type": "file in",
        "z": "c74ceced8c3687a1",
        "name": "",
        "filename": "/zenflowai/storage/templates/umowa-mazury.docx",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 450,
        "y": 620,
        "wires": [
            [
                "a977c1487e0d24c5",
                "8f267f752b686196"
            ]
        ]
    },
    {
        "id": "aa20ba6ab7f01f61",
        "type": "file",
        "z": "c74ceced8c3687a1",
        "name": "",
        "filename": "/zenflowai/storage/templates/gotowe.docx",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1090,
        "y": 620,
        "wires": [
            [
                "48d0564e608f78b1"
            ]
        ]
    },
    {
        "id": "48d0564e608f78b1",
        "type": "debug",
        "z": "c74ceced8c3687a1",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 540,
        "wires": []
    },
    {
        "id": "579358545ee05ab1",
        "type": "inject",
        "z": "c74ceced8c3687a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 500,
        "wires": [
            [
                "b118b96dcac8580e"
            ]
        ]
    },
    {
        "id": "b118b96dcac8580e",
        "type": "function",
        "z": "c74ceced8c3687a1",
        "name": "function 3",
        "func": "const os = global.get(\"os\");\nmsg.payload = os.platform();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 500,
        "wires": [
            [
                "cc90b15d5b2ee908"
            ]
        ]
    },
    {
        "id": "cc90b15d5b2ee908",
        "type": "debug",
        "z": "c74ceced8c3687a1",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 500,
        "wires": []
    },
    {
        "id": "8f267f752b686196",
        "type": "debug",
        "z": "c74ceced8c3687a1",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 540,
        "wires": []
    },
    {
        "id": "1722428ed71a4c40",
        "type": "inject",
        "z": "c74ceced8c3687a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 560,
        "wires": [
            [
                "8f267f752b686196",
                "f850f1b4e43d171b"
            ]
        ]
    },
    {
        "id": "0593c53023e99d07",
        "type": "function",
        "z": "c74ceced8c3687a1",
        "name": "function 4",
        "func": "// Get required modules from global context (configured in settings.js)\nconst fs = global.get('fs');\nconst path = global.get('path');\nconst createReport = global.get('docx_templates').createReport;\n\n(async () => {\n    try {\n        const templatePath = \"/zenflowai/storage/templates/umowa-mazury.docx\";\n\n        if (!fs.existsSync(templatePath)) {\n            throw new Error(`Template nie istnieje: ${templatePath}`);\n        }\n\n        const template = fs.readFileSync(templatePath);\n\n        const data = {\n            nr_umowy: \"12/12\",\n            data_zawarcia: \"2025-05-24\",\n        };\n\n        console.log(\"Generowanie dokumentu...\");\n\n        const buffer = await createReport({\n            template,\n            data\n        });\n\n        msg.payload = buffer;\n\n        const outputPath = \"/zenflowai/storage/templates/umowa-mazury-wypelniona.docx\";\n        fs.writeFileSync(outputPath, buffer);\n\n        console.log(`Dokument zapisany: ${outputPath}`);\n\n        node.send(msg);\n\n    } catch (error) {\n        console.error(\"B≈ÇƒÖd:\", error);\n        node.error(error.message, msg);\n    }\n})();",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 760,
        "wires": [
            [
                "b06dcd616dd28661"
            ]
        ]
    },
    {
        "id": "ef054bf8b4f4d793",
        "type": "inject",
        "z": "c74ceced8c3687a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 740,
        "wires": [
            [
                "0593c53023e99d07",
                "b06dcd616dd28661"
            ]
        ]
    },
    {
        "id": "b06dcd616dd28661",
        "type": "debug",
        "z": "c74ceced8c3687a1",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 740,
        "wires": []
    },
    {
        "id": "39aa69ec25e10e77",
        "type": "function",
        "z": "c74ceced8c3687a1",
        "name": "function 5",
        "func": "console.log(\"fs z global:\", global.get(\"fs\"));\nconsole.log(\"Dostƒôpne klucze w global:\", Object.keys(global.keys || {}));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 840,
        "wires": [
            [
                "6ec1c583de8e5378"
            ]
        ]
    },
    {
        "id": "3eb17527ac4b17b4",
        "type": "inject",
        "z": "c74ceced8c3687a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 820,
        "wires": [
            [
                "39aa69ec25e10e77"
            ]
        ]
    },
    {
        "id": "6ec1c583de8e5378",
        "type": "debug",
        "z": "c74ceced8c3687a1",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 820,
        "wires": []
    },
    {
        "id": "0553c056fd52bef6",
        "type": "telegram command",
        "z": "63acb26d6d62c6a7",
        "g": "98ebb837b0a8d454",
        "name": "",
        "command": "/help",
        "description": "Dostƒôpne opcje ",
        "registercommand": true,
        "language": "",
        "scope": "default",
        "bot": "telegram_bot",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 90,
        "y": 60,
        "wires": [
            [
                "9cd6e401c88a4ea3"
            ],
            [
                "d5080d546f5000c8"
            ]
        ]
    },
    {
        "id": "d5080d546f5000c8",
        "type": "debug",
        "z": "63acb26d6d62c6a7",
        "g": "98ebb837b0a8d454",
        "name": "telegram:debug-cmd-help",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 120,
        "wires": []
    },
    {
        "id": "d826163ff57b1f9a",
        "type": "subflow:03b285947d86a284",
        "z": "63acb26d6d62c6a7",
        "g": "98ebb837b0a8d454",
        "name": "",
        "x": 500,
        "y": 60,
        "wires": [
            [
                "1e83de49104afef7"
            ]
        ]
    },
    {
        "id": "571c54a6d40c0903",
        "type": "subflow:54b98742948036f5",
        "z": "63acb26d6d62c6a7",
        "g": "98ebb837b0a8d454",
        "name": "",
        "x": 940,
        "y": 60,
        "wires": [
            [
                "089abbe4a8575aa3"
            ]
        ]
    },
    {
        "id": "1e83de49104afef7",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "98ebb837b0a8d454",
        "name": "get:config:telegram_admin",
        "func": "msg.config = {};\nmsg.config.limit = 20;\nmsg.config.parametr = \"*\"\nmsg.config.kind = \"telegram_admin\";\nmsg.config.value = msg.payload.chatId;\nmsg.config.flat = false;\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 60,
        "wires": [
            [
                "571c54a6d40c0903"
            ]
        ]
    },
    {
        "id": "089abbe4a8575aa3",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "98ebb837b0a8d454",
        "name": "check:exist:user",
        "func": "if (Array.isArray(msg.payload) && msg.payload.length > 0 && msg.payload[0].kind === \"telegram_admin\") {\n    msg.telegram_admin = msg.payload[0];\n\n    node.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n    return msg;\n} else {\n    node.status({ fill: \"red\", shape: \"dot\", text: \"No Admin Found \" + global.get(\"getDateTime\")() });\n    return null;  // ko≈Ñczy przetwarzanie\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 60,
        "wires": [
            [
                "e7547e052ad0742d"
            ]
        ]
    },
    {
        "id": "9cd6e401c88a4ea3",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "98ebb837b0a8d454",
        "name": "store:to:telegram_cmd",
        "func": "msg.telegram_cmd = msg.payload;\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 60,
        "wires": [
            [
                "d826163ff57b1f9a"
            ]
        ]
    },
    {
        "id": "e7547e052ad0742d",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "98ebb837b0a8d454",
        "name": "msg:telegram",
        "func": "const template_data = {\n    rejs_name: \"adad\"\n};\n\nmsg.message = {\n    template_in_row: \"Dostƒôpne polecenia \\n /u <nr> - informacja o umoweie <nr> numer umowy z tego roku \\n /l <ile> - wysli info o <ile> ostatnich umowach \"\n        + \"\\n\\nhttps://kwatermistrz.panel.zenflowai.net - panel\\n\\nhttps://form.kwatermistrz.zenflowai.net - adres formularza\",\n     template_data: template_data,\n    kind: \"telegram\",\n    // to_group: \"admin\",\n    to: msg.telegram_admin.value,\n\n    // to: msg.payload.value  // np. \"234242,23424234,24\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 60,
        "wires": [
            [
                "a7d36146b2282a7c"
            ]
        ]
    },
    {
        "id": "a7d36146b2282a7c",
        "type": "link out",
        "z": "63acb26d6d62c6a7",
        "g": "98ebb837b0a8d454",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "b38c6c11d0212c18"
        ],
        "x": 1445,
        "y": 60,
        "wires": []
    },
    {
        "id": "cc8434dc2f151dc3",
        "type": "telegram command",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "",
        "command": "/u",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "telegram_bot",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 90,
        "y": 240,
        "wires": [
            [
                "20c122696ef0bc4e"
            ],
            [
                "7d17c56e56404b9e"
            ]
        ]
    },
    {
        "id": "20c122696ef0bc4e",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "store:to:telegram_cmd",
        "func": "msg.telegram_cmd = msg.payload;\n\nlet rawContent = msg.telegram_cmd.content?.trim() || \"\";\n\nmsg.cmd_str = rawContent;\nmsg.cmd_int = parseInt(rawContent, 10);\n\n// Je≈õli nie jest liczbƒÖ, usu≈Ñ\nif (isNaN(msg.cmd_int)) {\n    delete msg.cmd_int;\n}\n\nnode.status({ fill: \"green\", shape: \"dot\", text: msg.cmd_str });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 240,
        "wires": [
            [
                "8bb0752e96f183d0"
            ]
        ]
    },
    {
        "id": "8bb0752e96f183d0",
        "type": "subflow:03b285947d86a284",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "",
        "x": 500,
        "y": 240,
        "wires": [
            [
                "aae0e6e5b141fbe5"
            ]
        ]
    },
    {
        "id": "aae0e6e5b141fbe5",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "get:config:telegram_admin",
        "func": "msg.config = {};\nmsg.config.limit = 20;\nmsg.config.parametr = \"*\"\nmsg.config.kind = \"telegram_admin\";\nmsg.config.value = msg.payload.chatId;\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 240,
        "wires": [
            [
                "c7a0324304b3b041"
            ]
        ]
    },
    {
        "id": "c7a0324304b3b041",
        "type": "subflow:54b98742948036f5",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "",
        "x": 940,
        "y": 240,
        "wires": [
            [
                "301484661c74561e"
            ]
        ]
    },
    {
        "id": "301484661c74561e",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "check:exist:user",
        "func": "if (Array.isArray(msg.payload) && msg.payload.length > 0 && msg.payload[0].kind === \"telegram_admin\") {\n    msg.telegram_admin = msg.payload[0];\n\n    node.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n    return msg;\n} else {\n    node.status({ fill: \"red\", shape: \"dot\", text: \"No Admin Found \" + global.get(\"getDateTime\")() });\n    return null;  // ko≈Ñczy przetwarzanie\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 240,
        "wires": [
            [
                "2b4a8d9db9d46d6e"
            ]
        ]
    },
    {
        "id": "7d17c56e56404b9e",
        "type": "debug",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "telegram:debug-cmd-u",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 300,
        "wires": []
    },
    {
        "id": "2b4a8d9db9d46d6e",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "umowa_prefix:get",
        "func": "msg.queue = {};\nmsg.queue.kind = \"umowa_prefix\";\nmsg.queue.uuid = \"global\"\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 360,
        "wires": [
            [
                "3aca31d79f028e08"
            ]
        ]
    },
    {
        "id": "3aca31d79f028e08",
        "type": "subflow:7a14c201fa805842",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "",
        "x": 530,
        "y": 360,
        "wires": [
            [
                "f4884138272fb87e"
            ]
        ]
    },
    {
        "id": "f4884138272fb87e",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "store:to::umowa_prefix",
        "func": "msg.umowa_prefix = msg.payload.status;\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 360,
        "wires": [
            [
                "d7b4a24b096e0d4e"
            ]
        ]
    },
    {
        "id": "d7b4a24b096e0d4e",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "NocoDB - umowy:get:by_nr",
        "func": "msg.nocodb_t_active = msg.nocodb_t.umowy;\n\nmsg.payload = {\n    offset: '0',\n    limit: '1',\n    viewId: msg.nocodb_t.umowy_view,\n    where: `(umowa_year,eq,${msg.umowa_prefix})~and(umowa_nr,eq,${msg.cmd_int})`,\n    \"nested[osoby][fields]\": \"*\",\n    \"nested[rejsy][fields]\": \"*\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 420,
        "wires": [
            [
                "4f5e3bf13f7afea8"
            ]
        ]
    },
    {
        "id": "4f5e3bf13f7afea8",
        "type": "http request",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 560,
        "y": 420,
        "wires": [
            [
                "6864c44392bd2e0c"
            ]
        ]
    },
    {
        "id": "6864c44392bd2e0c",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "prepare mesage",
        "func": "const umowa = msg.payload.list[0];\n\nconst nazwa_umowy = umowa.nazwa || '';\nconst ilosc_osob = umowa.ile_osob || 0;\nconst rejs = umowa.rejsy?.nazwa || 'brak danych';\nconst termin_od = umowa.rejsy?.termin_od || '';\nconst termin_do = umowa.rejsy?.termin_do || '';\nconst port_start = umowa.rejsy?.port_start || '';\nconst port_koniec = umowa.rejsy?.port_koniec || '';\n\nconst podpisana = umowa.umowa_podpisana ? \"‚úÖ Tak\" : \"‚ùå Nie\";\nconst rata1 = umowa.oplacone_rata1 ? \"‚úÖ Tak\" : \"‚ùå Nie\";\nconst rata2 = umowa.oplacone_rata2 ? \"‚úÖ Tak\" : \"‚ùå Nie\";\n\nconst message = `üìÑ *Umowa*: \\`${nazwa_umowy}\\`\nüß≠ *Rejs*: *${rejs}*\nüìÖ *Termin*: ${termin_od} ‚Äì ${termin_do}\nüë• *Liczba os√≥b*: *${ilosc_osob}*\n\nüì¨ *Umowa podpisana*: ${podpisana}\nüí∏ *Rata 1 zap≈Çacona*: ${rata1}\nüí∞ *Rata 2 zap≈Çacona*: ${rata2}\n`;\n//‚öì *Porty*: ${port_start} ‚Üí ${port_koniec}\nmsg.payload = {\n    chatId: msg.telegram_cmd.chatId,\n    type: \"message\",\n    content: message,\n    options: {\n        parse_mode: \"Markdown\"\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 420,
        "wires": [
            [
                "3ed7aebfddb1fed8"
            ]
        ]
    },
    {
        "id": "3acfa58cf1e285d8",
        "type": "link out",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "link out 20",
        "mode": "link",
        "links": [
            "b38c6c11d0212c18"
        ],
        "x": 1445,
        "y": 420,
        "wires": []
    },
    {
        "id": "3ed7aebfddb1fed8",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "21e8dc7395c23c6f",
        "name": "msg:telegram",
        "func": "const template_data = {\n    none: \"none\"\n};\n\nmsg.message = {\n    template_in_row: msg.payload.content,\n    template_data: template_data,\n    kind: \"telegram\",\n    // to_group: \"admin\",\n    to: msg.telegram_admin.value,\n\n    // to: msg.payload.value  // np. \"234242,23424234,24\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 420,
        "wires": [
            [
                "3acfa58cf1e285d8"
            ]
        ]
    },
    {
        "id": "7df1d82535ca7da6",
        "type": "telegram command",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "",
        "command": "/l",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "telegram_bot",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 90,
        "y": 540,
        "wires": [
            [
                "c6ecda197f2c7756"
            ],
            [
                "c5b22891970b034f"
            ]
        ]
    },
    {
        "id": "c6ecda197f2c7756",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "store:to:telegram_cmd",
        "func": "msg.telegram_cmd = msg.payload;\n\nlet rawContent = msg.telegram_cmd.content?.trim() || \"\";\n\nmsg.cmd_str = rawContent;\nmsg.cmd_int = parseInt(rawContent, 10);\n\n// Je≈õli nie jest liczbƒÖ, usu≈Ñ\nif (isNaN(msg.cmd_int)) {\n    delete msg.cmd_int;\n}\n\nnode.status({ fill: \"green\", shape: \"dot\", text: msg.cmd_str });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 540,
        "wires": [
            [
                "cac96696c131113d"
            ]
        ]
    },
    {
        "id": "cac96696c131113d",
        "type": "subflow:03b285947d86a284",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "",
        "x": 500,
        "y": 540,
        "wires": [
            [
                "be164207f0fb422c"
            ]
        ]
    },
    {
        "id": "be164207f0fb422c",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "get:config:telegram_admin",
        "func": "msg.config = {};\nmsg.config.limit = 20;\nmsg.config.parametr = \"*\"\nmsg.config.kind = \"telegram_admin\";\nmsg.config.value = msg.payload.chatId;\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 540,
        "wires": [
            [
                "82222e3128714a37"
            ]
        ]
    },
    {
        "id": "82222e3128714a37",
        "type": "subflow:54b98742948036f5",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "",
        "x": 940,
        "y": 540,
        "wires": [
            [
                "dc6b3abdfbae4214"
            ]
        ]
    },
    {
        "id": "dc6b3abdfbae4214",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "check:exist:user",
        "func": "if (Array.isArray(msg.payload) && msg.payload.length > 0 && msg.payload[0].kind === \"telegram_admin\") {\n    msg.telegram_admin = msg.payload[0];\n\n    node.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n    return msg;\n} else {\n    node.status({ fill: \"red\", shape: \"dot\", text: \"No Admin Found \" + global.get(\"getDateTime\")() });\n    return null;  // ko≈Ñczy przetwarzanie\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 540,
        "wires": [
            [
                "c4d1a145c8fd2071"
            ]
        ]
    },
    {
        "id": "c4d1a145c8fd2071",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "NocoDB - umowy:get:by_nr",
        "func": "msg.nocodb_t_active = msg.nocodb_t.umowy;\n\nmsg.payload = {\n    offset: '0',\n    limit: msg.cmd_int,\n    viewId: msg.nocodb_t.umowy_view,\n    sort: \"-umowa_nr\",\n    // where: `(umowa_year,eq,${msg.umowa_prefix})~and(umowa_nr,eq,${msg.cmd_int})`,\n    \"nested[osoby][fields]\": \"*\",\n    \"nested[rejsy][fields]\": \"*\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 660,
        "wires": [
            [
                "b90fa9c387b19295"
            ]
        ]
    },
    {
        "id": "b90fa9c387b19295",
        "type": "http request",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 560,
        "y": 660,
        "wires": [
            [
                "c5cba888a5a53ac7"
            ]
        ]
    },
    {
        "id": "71de6977e18c0bba",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "prepare mesage",
        "func": "const umowa = msg.payload;\n\nconst nazwa_umowy = umowa.nazwa || '';\nconst ilosc_osob = umowa.ile_osob || 0;\nconst rejs = umowa.rejsy?.nazwa || 'brak danych';\nconst termin_od = umowa.rejsy?.termin_od || '';\nconst termin_do = umowa.rejsy?.termin_do || '';\nconst port_start = umowa.rejsy?.port_start || '';\nconst port_koniec = umowa.rejsy?.port_koniec || '';\n\nconst podpisana = umowa.umowa_podpisana ? \"‚úÖ Tak\" : \"‚ùå Nie\";\nconst rata1 = umowa.oplacone_rata1 ? \"‚úÖ Tak\" : \"‚ùå Nie\";\nconst rata2 = umowa.oplacone_rata2 ? \"‚úÖ Tak\" : \"‚ùå Nie\";\n\nconst message = `üìÑ *Umowa*: \\`${nazwa_umowy}\\`\nüß≠ *Rejs*: *${rejs}*\nüìÖ *Termin*: ${termin_od} ‚Äì ${termin_do}\nüë• *Liczba os√≥b*: *${ilosc_osob}*\n\nüì¨ *Umowa podpisana*: ${podpisana}\nüí∏ *Rata 1 zap≈Çacona*: ${rata1}\nüí∞ *Rata 2 zap≈Çacona*: ${rata2}\n- -- - - -- - - -- - - -- - - -- - - -- -`;\n//‚öì *Porty*: ${port_start} ‚Üí ${port_koniec}\nmsg.payload = {\n    chatId: msg.telegram_cmd.chatId,\n    type: \"message\",\n    content: message,\n    options: {\n        parse_mode: \"Markdown\"\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 660,
        "wires": [
            [
                "96fe3b936394ce16"
            ]
        ]
    },
    {
        "id": "96fe3b936394ce16",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "msg:telegram",
        "func": "const template_data = {\n    none: \"none\"\n};\n\nmsg.message = {\n    template_in_row: msg.payload.content,\n    template_data: template_data,\n    kind: \"telegram\",\n    // to_group: \"admin\",\n    to: msg.telegram_admin.value,\n\n    // to: msg.payload.value  // np. \"234242,23424234,24\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 660,
        "wires": [
            [
                "799e576850c2a16c"
            ]
        ]
    },
    {
        "id": "799e576850c2a16c",
        "type": "link out",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "b38c6c11d0212c18"
        ],
        "x": 1465,
        "y": 660,
        "wires": []
    },
    {
        "id": "c5cba888a5a53ac7",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "value:clone",
        "func": "let rows = (msg.payload && msg.payload.list) ? msg.payload.list : [];\n\nif (!Array.isArray(rows) || rows.length === 0) {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Brak danych\" });\n    return null; // lub return []; je≈õli chcesz zwr√≥ciƒá pusty wynik\n}\n\n// Tworzymy array wiadomo≈õci\nlet outMsgs = rows.map(row => {\n    let singleMsg = RED.util.cloneMessage(msg);\n    singleMsg.payload = row;\n    return singleMsg;\n});\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn [outMsgs]; // Uwaga: musi byƒá opakowane w tablicƒô, bo to split node (1 output)",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 660,
        "wires": [
            [
                "0413ffbfda008984"
            ]
        ]
    },
    {
        "id": "0413ffbfda008984",
        "type": "delay",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 930,
        "y": 660,
        "wires": [
            [
                "71de6977e18c0bba"
            ]
        ]
    },
    {
        "id": "c5b22891970b034f",
        "type": "debug",
        "z": "63acb26d6d62c6a7",
        "g": "98736a5cc35a2f91",
        "name": "telegram:debug-cmd-l",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 600,
        "wires": []
    },
    {
        "id": "c56d1030b010a33d",
        "type": "telegram command",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "",
        "command": "/rejsy",
        "description": "stan rejs√≥w aktywnych.",
        "registercommand": true,
        "language": "",
        "scope": "default",
        "bot": "telegram_bot",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 90,
        "y": 800,
        "wires": [
            [
                "60b02b41a406f9a1"
            ],
            [
                "42384abfb69ac6e6"
            ]
        ]
    },
    {
        "id": "60b02b41a406f9a1",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "store:to:telegram_cmd",
        "func": "msg.telegram_cmd = msg.payload;\n\nlet rawContent = msg.telegram_cmd.content?.trim() || \"\";\n\nmsg.cmd_str = rawContent;\nmsg.cmd_int = parseInt(rawContent, 10);\n\n// Je≈õli nie jest liczbƒÖ, usu≈Ñ\nif (isNaN(msg.cmd_int)) {\n    delete msg.cmd_int;\n}\n\nnode.status({ fill: \"green\", shape: \"dot\", text: msg.cmd_str });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 800,
        "wires": [
            [
                "7a5460e190f6cd1a"
            ]
        ]
    },
    {
        "id": "7a5460e190f6cd1a",
        "type": "subflow:03b285947d86a284",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "",
        "x": 500,
        "y": 800,
        "wires": [
            [
                "ddc4eda71cdeb12a"
            ]
        ]
    },
    {
        "id": "ddc4eda71cdeb12a",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "get:config:telegram_admin",
        "func": "msg.config = {};\nmsg.config.limit = 20;\nmsg.config.parametr = \"*\"\nmsg.config.kind = \"telegram_admin\";\nmsg.config.value = msg.payload.chatId;\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 800,
        "wires": [
            [
                "d55e61242858b9b2"
            ]
        ]
    },
    {
        "id": "d55e61242858b9b2",
        "type": "subflow:54b98742948036f5",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "",
        "x": 940,
        "y": 800,
        "wires": [
            [
                "430ada3446244ea8"
            ]
        ]
    },
    {
        "id": "430ada3446244ea8",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "check:exist:user",
        "func": "if (Array.isArray(msg.payload) && msg.payload.length > 0 && msg.payload[0].kind === \"telegram_admin\") {\n    msg.telegram_admin = msg.payload[0];\n\n    node.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n    return msg;\n} else {\n    node.status({ fill: \"red\", shape: \"dot\", text: \"No Admin Found \" + global.get(\"getDateTime\")() });\n    return null;  // ko≈Ñczy przetwarzanie\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 800,
        "wires": [
            [
                "d5985ef0154fedb9"
            ]
        ]
    },
    {
        "id": "d5985ef0154fedb9",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "NocoDB - umowy:get:by_nr",
        "func": "msg.nocodb_t_active = msg.nocodb_t.rejsy;\n\nmsg.payload = {\n    offset: '0',\n    limit: msg.cmd_int,\n    viewId: msg.nocodb_t.rejsy_view,\n    sort: \"termin_od\",\n    where: `(status,eq,active)`,\n    // \"nested[osoby][fields]\": \"*\",\n    // \"nested[rejsy][fields]\": \"*\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 920,
        "wires": [
            [
                "31cc3b927ec061f3"
            ]
        ]
    },
    {
        "id": "31cc3b927ec061f3",
        "type": "http request",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 560,
        "y": 920,
        "wires": [
            [
                "501ffba732296b03",
                "73664b974a486325"
            ]
        ]
    },
    {
        "id": "501ffba732296b03",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "prepare mesage",
        "func": "const rejsy = msg.payload.list;\n\nconst pad = (v, l) => String(v).padStart(l, ' ');\nconst formatDate = (d) => {\n    const [yyyy, mm, dd] = d.split('-');\n    return `${pad(mm, 2)}.${pad(dd, 2)}`;\n};\n\nconst lines = rejsy.map(rejs => {\n    const data = formatDate(rejs.termin_od || '----');\n    const max = pad(rejs.ilosc_max ?? 0, 2);\n    const zaj = pad(rejs.ilosc_wyk ?? 0, 2);\n    const wol = pad((rejs.ilosc_max ?? 0) - (rejs.ilosc_wyk ?? 0), 2);\n    // const nazwa = rejs.nazwa || 'brak';\n    const nazwa = (rejs.nazwa || 'brak').slice(-20).padEnd(20, ' ');\n    return `${data} | ${max} | ${zaj} | ${wol} |..${nazwa}`;\n});\n\nconst header = `üìú *Dostƒôpne rejsy* üìÖ :\nData| Max| Zaj| Wol| Nazwa\n-----------------------------------------`;\n\n\nconst message = [\"```\", header , ...lines, \"```\" ].join('\\n');\n\nmsg.payload = {\n    chatId: msg.telegram_cmd.chatId,\n    type: \"message\",\n    content: message,\n    options: {\n        parse_mode: \"Markdown\"\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 920,
        "wires": [
            [
                "68952e7603429f09",
                "03a2a3c321018e60"
            ]
        ]
    },
    {
        "id": "68952e7603429f09",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "msg:telegram",
        "func": "const template_data = {\n    none: \"none\"\n};\n\nmsg.message = {\n    template_in_row: msg.payload.content,\n    template_data: template_data,\n    kind: \"telegram\",\n    // to_group: \"admin\",\n    to: msg.telegram_admin.value,\n\n    // to: msg.payload.value  // np. \"234242,23424234,24\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 920,
        "wires": [
            [
                "9826806d4f227dd8"
            ]
        ]
    },
    {
        "id": "9826806d4f227dd8",
        "type": "link out",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "link out 27",
        "mode": "link",
        "links": [
            "b38c6c11d0212c18"
        ],
        "x": 1465,
        "y": 920,
        "wires": []
    },
    {
        "id": "7ac8669501eb3b35",
        "type": "function",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "value:clone",
        "func": "let rows = (msg.payload && msg.payload.list) ? msg.payload.list : [];\n\nif (!Array.isArray(rows) || rows.length === 0) {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Brak danych\" });\n    return null; // lub return []; je≈õli chcesz zwr√≥ciƒá pusty wynik\n}\n\n// Tworzymy array wiadomo≈õci\nlet outMsgs = rows.map(row => {\n    let singleMsg = RED.util.cloneMessage(msg);\n    singleMsg.payload = row;\n    return singleMsg;\n});\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn [outMsgs]; // Uwaga: musi byƒá opakowane w tablicƒô, bo to split node (1 output)",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 880,
        "wires": [
            [
                "61370446aa787625"
            ]
        ]
    },
    {
        "id": "61370446aa787625",
        "type": "delay",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 930,
        "y": 880,
        "wires": [
            [
                "501ffba732296b03",
                "164c6854f9b77b79"
            ]
        ]
    },
    {
        "id": "42384abfb69ac6e6",
        "type": "debug",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "telegram:debug-cmd-rejsy",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 860,
        "wires": []
    },
    {
        "id": "03a2a3c321018e60",
        "type": "debug",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1080,
        "wires": []
    },
    {
        "id": "164c6854f9b77b79",
        "type": "debug",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1080,
        "wires": []
    },
    {
        "id": "73664b974a486325",
        "type": "debug",
        "z": "63acb26d6d62c6a7",
        "g": "f8c622ed58f1f1af",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 1040,
        "wires": []
    },
    {
        "id": "b38c6c11d0212c18",
        "type": "link in",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "start-msg-send-telegram",
        "links": [
            "0944d6334829fb66",
            "3acfa58cf1e285d8",
            "64b8d814115c9512",
            "799e576850c2a16c",
            "a7d36146b2282a7c",
            "9826806d4f227dd8",
            "94b362f32fa52ed8",
            "d7dd5f2f89bb925e",
            "a1d5047fa8a97cdc",
            "1e344fabe6b4e291",
            "1d1046a9ec0eb8fa",
            "716b8a5fab1f1112"
        ],
        "x": 170,
        "y": 80,
        "wires": [
            [
                "ff22d8d375026584"
            ]
        ],
        "l": true
    },
    {
        "id": "05787fdb9e24909d",
        "type": "link out",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "link out 16",
        "mode": "link",
        "links": [],
        "x": 1085,
        "y": 260,
        "wires": []
    },
    {
        "id": "a11e422b6114d822",
        "type": "function",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "NocoDB:store:message",
        "func": "msg.nocodb_t_active = msg.nocodb_t.messages;\nlet m = msg.message;\n// const uploadedFile = msg.payload[0];\n\nconst now = new Date();\nconst pad = (n) => n.toString().padStart(2, '0');\n\nconst year = now.getFullYear();\nconst month = pad(now.getMonth() + 1);\nconst day = pad(now.getDate());\nconst hours = pad(now.getHours());\nconst minutes = pad(now.getMinutes());\nconst seconds = pad(now.getSeconds());\n\nconst uuid = global.get(\"uuidv4\")();\n\n// Prepare the update payload for the record\nmsg.payload = {\n    \"name\": year+month+day+hours+minutes+seconds + \" \" + m.kind + \" \" + msg.to,\n    \"status\": \"new\",\n    \"type\": m.kind,\n    \"msg_to\": m.to,\n    \"msg_subject\": m.subject,\n    \"msg_body\": m.body,\n    uuid: msg.uuid\n};\nmsg.method = \"POST\";\n\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 200,
        "wires": [
            [
                "331f8aac05af3f84"
            ]
        ]
    },
    {
        "id": "331f8aac05af3f84",
        "type": "http request",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 760,
        "y": 200,
        "wires": [
            [
                "4052c790d3e279e9"
            ]
        ]
    },
    {
        "id": "4052c790d3e279e9",
        "type": "function",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "get:id:msg",
        "func": "msg.msg_id = msg.payload.Id\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 200,
        "wires": [
            [
                "ad22c65f984b2fa7"
            ]
        ]
    },
    {
        "id": "cb8bf8e488c1a183",
        "type": "http request",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 920,
        "y": 260,
        "wires": [
            [
                "05787fdb9e24909d"
            ]
        ]
    },
    {
        "id": "cb62cc24fb94ce57",
        "type": "function",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "NocoDB:patch:msg",
        "func": "msg.nocodb_t_active = msg.nocodb_t.messages;\nmsg.method = \"PATCH\";\n\n// Domy≈õlny status\nlet status = \"pending\";\n\n// Sprawdzenie p√≥l accepted/rejected\nif (msg.payload.sentMessageId && msg.payload.sentMessageId.length > 0) {\n    status = \"send\";\n}\n//  else if (msg.payload.rejected && msg.payload.rejected.length > 0) {\n//     status = \"error\";\n// }\n\nmsg.payload = {\n    Id: msg.msg_id,   // klucz podstawowy w Twojej tabeli\n    status: status\n};\n\n\nmsg.send_status = status;\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `${global.get(\"getDateTime\")()}`\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 260,
        "wires": [
            [
                "cb8bf8e488c1a183"
            ]
        ]
    },
    {
        "id": "59bbb540505cd062",
        "type": "function",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "message:template:telegram",
        "func": "var data = msg.payload;\n\nconst fs = global.get('fs');\nconst path = global.get('path');\n\nlet cssPath = \"\";\nlet css = \"\";\nlet html = \"\";\n\nlet m = msg.message;\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: m.kind });\n\n\nif (m.kind == \"email\") {\n    cssPath = global.get('storage') + \"/teamplates/html/email-style.css\";\n    css = fs.readFileSync(cssPath, \"utf8\");\n}\n\nif (m.template_in_row) {\n    html = m.template_in_row;\n} else {\n    const htmlPath = global.get('storage') + \"/teamplates/html/\" + msg.message.template;\n    html = fs.readFileSync(htmlPath, \"utf8\");\n\n    if (m.kind == \"email\") {\n        // Wstawienie stylu inline w miejsce <link rel=\"stylesheet\"...>\n        html = html.replace(\n            /<link\\s+rel=[\"']stylesheet[\"']\\s+href=[\"'][^\"']+[\"']\\s*\\/?>/,\n            `<style>\\n${css}\\n</style>`\n        );\n    }\n}\n\nconst template_data = m.template_data;\n\n// Dynamiczna zamiana {{klucz}} na warto≈õƒá z template_data\nfor (const key in template_data) {\n    const regex = new RegExp(`{{${key}}}`, 'g');\n    html = html.replace(regex, template_data[key]);\n}\n\n// msg.payload = html;\n// msg.to = `${msg.email.from}`;\n// msg.from = msg.smtp.auth.user;\n// msg.subject = \"Odp: \" + msg.email.subject;\n// msg.headers = {\n//     \"Content-Type\": \"text/html\"\n// };\n\n\nmsg.message.from = \"Kwatermistrz\";\nmsg.message.subject = \"Info\";\nmsg.message.body = html;\nif (msg.message.to_group != \"\") {\n    msg.message.to = msg.payload.value;\n} \n\n\n// msg.umowa = data;\n// msg.html = html;\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 200,
        "wires": [
            [
                "a11e422b6114d822"
            ]
        ]
    },
    {
        "id": "9eaf057bbd22b391",
        "type": "telegram sender",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "",
        "bot": "telegram_bot",
        "haserroroutput": true,
        "outputs": 2,
        "x": 500,
        "y": 260,
        "wires": [
            [
                "cb62cc24fb94ce57"
            ],
            []
        ]
    },
    {
        "id": "ad22c65f984b2fa7",
        "type": "function",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "prepare:telegram:message",
        "func": "function escapeMarkdownV2(text) {\n    if (!text) return \"\";\n    return text\n        .toString()\n        .trim()\n        .replace(/[[\\]()~`>#+\\-=|{}.!]/g, '\\\\$&');  // Escape znaki specjalne MarkdownV2\n}\n//_*\nmsg.message.body = escapeMarkdownV2(msg.message.body);  // oczyszczony body\n\nmsg.payload = {\n    chatId: msg.message.to,\n    content: msg.message.body,\n    type: \"message\",\n    options: {\n        parse_mode: \"MarkdownV2\",\n        disable_web_page_preview: true\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 260,
        "wires": [
            [
                "9eaf057bbd22b391",
                "517f9e00e31abb1f"
            ]
        ]
    },
    {
        "id": "efd2c3e56d49ea9a",
        "type": "function",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "get:config",
        "func": "let kind = msg.message.kind + \"_\" + msg.message.to_group\n\nmsg.config = {};\nmsg.config.limit = 20;\nmsg.config.parametr = \"*\"\nmsg.config.kind = kind;\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "5ed9f39bab8aac16"
            ]
        ]
    },
    {
        "id": "5ed9f39bab8aac16",
        "type": "subflow:54b98742948036f5",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "",
        "x": 580,
        "y": 140,
        "wires": [
            [
                "c80e33e6bba36bf8"
            ]
        ]
    },
    {
        "id": "c80e33e6bba36bf8",
        "type": "function",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "value:clone",
        "func": "let rows = msg.payload;\n\nmsg.payload = rows.map(row => {\n    let singleMsg = RED.util.cloneMessage(msg); // duplikujemy oryginalny msg\n    singleMsg.payload = row;\n    return singleMsg;\n});\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn [msg.payload]; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 140,
        "wires": [
            [
                "59bbb540505cd062"
            ]
        ]
    },
    {
        "id": "ff22d8d375026584",
        "type": "switch",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "group_or_notgroup",
        "property": "message.to_group",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 140,
        "wires": [
            [
                "efd2c3e56d49ea9a"
            ],
            [
                "59bbb540505cd062"
            ]
        ]
    },
    {
        "id": "af5988b14e5e0f89",
        "type": "function",
        "z": "7ac738eef3d259eb",
        "g": "62d8f16d3b6436f6",
        "name": "email:template:umowa-email",
        "func": "const content = msg.payload; //file data\n\nconst fs = global.get('fs');\nconst path = global.get('path');\n\nlet m = msg.message;\nconst template_data = m.template_data;\n\n// ≈öcie≈ºki do plik√≥w (dostosuj wed≈Çug potrzeb)\nconst htmlPath = global.get('storage') + \"/teamplates/html/\"+ msg.message.template;\nconst cssPath = global.get('storage') + \"/teamplates/html/email-style.css\";\n\nlet html = fs.readFileSync(htmlPath, \"utf8\");\nconst css = fs.readFileSync(cssPath, \"utf8\");\n\n// Dynamiczna zamiana {{klucz}} na warto≈õƒá z template_data\nfor (const key in template_data) {\n    const regex = new RegExp(`{{${key}}}`, 'g');\n    html = html.replace(regex, template_data[key]);\n}\n\n// Wstawienie stylu inline w miejsce <link rel=\"stylesheet\"...>\nhtml = html.replace(\n    /<link\\s+rel=[\"']stylesheet[\"']\\s+href=[\"'][^\"']+[\"']\\s*\\/?>/,\n    `<style>\\n${css}\\n</style>`\n);\n\n// let is_pln_qr_code = \"\";\n// let is_nr_bank = \"\";\n\n// if (formdata.cena_c == \"PLN\") {\n//     is_nr_bank = `Numer rachunku PLN - <strong>${msg.firma.nr_konta_pln}</strong><br>`;\n//     is_pln_qr_code = \"<p>Jeszcze przygotowa≈Çem dla Ciebie u≈Çatwienie je≈ºeli u≈ºywasz aplikacji mobilnej banku. Mo≈ºesz zeskanowaƒá qrcode i wszystkie dane siƒô uzupe≈ÇniƒÖ samoistnie.</p><p><img src=\\\"cid:barcode.png\\\" alt=\\\"QR Code do przelewu\\\" class=\\\"qr-code\\\"></p>\"\n// } else {\n//     is_nr_bank = `Numer rachunku EUR - <strong>${msg.firma.nr_konta_eur}</strong><br>`;\n// }\n\n// Zamiana znacznik√≥w {{...}} dynamicznie z msg.payload\n// html = html\n//     .replace(/{{osoba_name}}/g, formdata.osoba_name)\n//     .replace(/{{umowa_przedmiot}}/g, formdata.umowa_przedmiot)\n//     .replace(/{{termin_od}}/g, formdata.termin_od)\n//     .replace(/{{termin_do}}/g, formdata.termin_do)\n//     .replace(/{{nr_umowy}}/g, formdata.nr_umowy)\n//     .replace(/{{rezerwacja_cena_rata1}}/g, formdata.rezerwacja_cena_rata1)\n//     .replace(/{{przelew_nazwa}}/g, formdata.przelew_nazwa)\n//     .replace(/{{uuid}}/g, formdata.uuid)\n//     .replace(/{{firma_nr_konta_pln}}/g, msg.firma.nr_konta_pln)\n//     .replace(/{{firma_nr_konta_eur}}/g, msg.firma.nr_konta_eur)\n//     .replace(/{{firma_bank}}/g, msg.firma.bank)\n//     .replace(/{{cena_c}}/g, formdata.cena_c)\n//     .replace(/{{is_pln_qr_code}}/g, is_pln_qr_code)\n//     .replace(/{{is_nr_bank}}/g, is_nr_bank)\n//     ;\n\nmsg.to = `${msg.message.email}`;\nmsg.from = msg.smtp.auth.user;\nmsg.subject = msg.message.subject;\nmsg.headers = {\n    \"Content-Type\": \"text/html\"\n};\nmsg.attachments = msg.message.attachments;\n\nmsg.payload = html;\nmsg.html = html;\nmsg.umowa_pdf_binary = content;\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 480,
        "wires": [
            [
                "8ddc47805697df87"
            ]
        ]
    },
    {
        "id": "8ddc47805697df87",
        "type": "function",
        "z": "7ac738eef3d259eb",
        "g": "62d8f16d3b6436f6",
        "name": "NocoDB:post:osoba",
        "func": "msg.nocodb_t_active = msg.nocodb_t.messages;\n\n// const uploadedFile = msg.payload[0];\n\nconst now = new Date();\nconst pad = (n) => n.toString().padStart(2, '0');\n\nconst year = now.getFullYear();\nconst month = pad(now.getMonth() + 1);\nconst day = pad(now.getDate());\nconst hours = pad(now.getHours());\nconst minutes = pad(now.getMinutes());\nconst seconds = pad(now.getSeconds());\n\nconst uuid = global.get(\"uuidv4\")();\n\n// Prepare the update payload for the record\nmsg.payload = {\n    \"name\": year+month+day+hours+minutes+seconds+\" email-umowa \" + msg.to,\n    \"status\": \"new\",\n    \"type\": \"email\",\n    \"msg_to\": msg.to,\n    \"msg_subject\": msg.subject,\n    \"msg_body\": msg.html,\n    uuid: msg.uuid,\n    \"path_attachment\": msg.umowa_pdf_file\n};\nmsg.method = \"POST\";\n\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 480,
        "wires": [
            [
                "706d9530c14be168"
            ]
        ]
    },
    {
        "id": "706d9530c14be168",
        "type": "http request",
        "z": "7ac738eef3d259eb",
        "g": "62d8f16d3b6436f6",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 700,
        "y": 480,
        "wires": [
            [
                "3ca6cc4f3684235a"
            ]
        ]
    },
    {
        "id": "3ca6cc4f3684235a",
        "type": "function",
        "z": "7ac738eef3d259eb",
        "g": "62d8f16d3b6436f6",
        "name": "get:id:msg",
        "func": "msg.msg_id = msg.payload.Id\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() }); //STATUS\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 480,
        "wires": [
            [
                "c883e43364769c58"
            ]
        ]
    },
    {
        "id": "c883e43364769c58",
        "type": "email-dynamic",
        "z": "7ac738eef3d259eb",
        "g": "62d8f16d3b6436f6",
        "name": "",
        "smtpServer": "",
        "smtpPort": "",
        "smtpUser": "",
        "smtpPass": "",
        "secure": false,
        "tlsRejectUnauthorized": false,
        "x": 220,
        "y": 540,
        "wires": [
            [
                "295c85d65cc691b1"
            ]
        ]
    },
    {
        "id": "295c85d65cc691b1",
        "type": "function",
        "z": "7ac738eef3d259eb",
        "g": "62d8f16d3b6436f6",
        "name": "NocoDB:patch:msg",
        "func": "msg.nocodb_t_active = msg.nocodb_t.messages;\nmsg.method = \"PATCH\";\n\n// Domy≈õlny status\nlet status = \"pending\";\n\n// Sprawdzenie p√≥l accepted/rejected\nif (msg.payload.accepted && msg.payload.accepted.length > 0) {\n    status = \"send\";\n} else if (msg.payload.rejected && msg.payload.rejected.length > 0) {\n    status = \"error\";\n}\n\nmsg.payload = {\n    Id: msg.msg_id,   // klucz podstawowy w Twojej tabeli\n    status: status\n};\n\n\nmsg.send_status = status;\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `${global.get(\"getDateTime\")()}`\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 540,
        "wires": [
            [
                "4299ba8fb5f1cf7d"
            ]
        ]
    },
    {
        "id": "4299ba8fb5f1cf7d",
        "type": "http request",
        "z": "7ac738eef3d259eb",
        "g": "62d8f16d3b6436f6",
        "name": "NocoDB - ALL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 640,
        "y": 540,
        "wires": [
            [
                "e415410fe3904fb3"
            ]
        ]
    },
    {
        "id": "d34147cb0559b0fc",
        "type": "link in",
        "z": "7ac738eef3d259eb",
        "g": "62d8f16d3b6436f6",
        "name": "start-msg-send-email",
        "links": [
            "f06c0fd4ec506f23"
        ],
        "x": 160,
        "y": 420,
        "wires": [
            [
                "af5988b14e5e0f89"
            ]
        ],
        "l": true
    },
    {
        "id": "e415410fe3904fb3",
        "type": "link out",
        "z": "7ac738eef3d259eb",
        "g": "62d8f16d3b6436f6",
        "name": "link out 22",
        "mode": "link",
        "links": [],
        "x": 1085,
        "y": 540,
        "wires": []
    },
    {
        "id": "783ea1d3e543917a",
        "type": "comment",
        "z": "7ac738eef3d259eb",
        "name": "Do przeniesienia do subflow",
        "info": "",
        "x": 1340,
        "y": 60,
        "wires": []
    },
    {
        "id": "517f9e00e31abb1f",
        "type": "debug",
        "z": "7ac738eef3d259eb",
        "g": "4f84417ea22d54a2",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 320,
        "wires": []
    },
    {
        "id": "41916a070ea72119",
        "type": "inject",
        "z": "7314cbba718b913d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "dcf0789dc7c90e29"
            ]
        ]
    },
    {
        "id": "dcf0789dc7c90e29",
        "type": "subflow:03b285947d86a284",
        "z": "7314cbba718b913d",
        "name": "",
        "x": 320,
        "y": 100,
        "wires": [
            [
                "44557aebc338a15a"
            ]
        ]
    },
    {
        "id": "44557aebc338a15a",
        "type": "function",
        "z": "7314cbba718b913d",
        "name": "NocoDB - umowy:get:10 send-contract:2day",
        "func": "msg.nocodb_t_active = msg.nocodb_t.umowy;\n\nmsg.payload = {\n    offset: '0',\n    limit: '5',\n    viewId: msg.nocodb_t.umowy_view,\n    where: `(status,eq,10 send-contract)~and(umowa_data,eq,daysAgo,2)`,\n    \"nested[osoby][fields]\": \"*\",\n    \"nested[rejsy][fields]\": \"*\"\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: global.get(\"getDateTime\")() });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 100,
        "wires": [
            [
                "ea5357a9abf27fc8"
            ]
        ]
    },
    {
        "id": "ea5357a9abf27fc8",
        "type": "http request",
        "z": "7314cbba718b913d",
        "name": "NocoDB - GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "http://{{nocodb_host}}/api/v2/tables/{{nocodb_t_active}}/records",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "xc-token",
                "valueType": "msg",
                "valueValue": "xc_token"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 920,
        "y": 100,
        "wires": [
            [
                "5d35201a8882b461"
            ]
        ]
    },
    {
        "id": "5d35201a8882b461",
        "type": "debug",
        "z": "7314cbba718b913d",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 140,
        "wires": []
    }
]